* [misc]progress:  [Phase 1 of 3] Setting up.
* * * [misc]progress:  [1/2] Preparing points
* * * * [misc]points:  Sampling 256 additional inputs, on iter 0 have 0 / 256
* * * * [misc]points:  Computing exacts on every 16 of 256 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 8 of 256 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 4 of 256 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 2 of 256 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts for 256 points
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Filtering points with unrepresentable outputs
* * * * [exit]points:  Sampled 256 points with exact outputs
* * * [misc]progress:  [2/2] Setting up program.
* [misc]progress:  [Phase 2 of 3] Improving.
* [enter]simplify:  Simplifying (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (27 enodes)
* * [misc]simplify:  iters left: 3 (33 enodes)
* [exit]simplify:  Simplified to (+ (* (* x 0.5) x) (+ (* x -2.0) 1.0))
* * [misc]progress:  iteration 1 / 4
* * * [misc]progress:  picking best candidate
* * * * [misc]pick:  Picked  #<alt-event (Î» (x) (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))>
* * * [misc]progress:  localizing error
* * * [misc]progress:  generating rewritten candidates
* * * * [misc]progress:  [ 1 / 1 ] rewriting at (2)
* * * [misc]progress:  generating series expansions
* * * * [misc]progress:  [ 1 / 1 ] generating series at (2)
* [misc]approximate:  Taking taylor expansion of (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))) in x
* [misc]taylor:  Taking taylor expansion of (+ 1.0 (* -2.0 x)) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* -2.0 x) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* 0.5 (* x x)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (* x x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))) in x
* [misc]taylor:  Taking taylor expansion of (+ 1.0 (* -2.0 x)) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* -2.0 x) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* 0.5 (* x x)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (* x x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (* -2.0 0) into 0
* [misc]backup-simplify:  Simplify (+ 1.0 0) into 1.0
* [misc]backup-simplify:  Simplify (* 0 0) into 0
* [misc]backup-simplify:  Simplify (* 0.5 0) into 0
* [misc]backup-simplify:  Simplify (+ 1.0 0) into 1.0
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ (* -2.0 1) (* 0 0)) into (- 2.0)
* [misc]backup-simplify:  Simplify (+ 0 (- 2.0)) into (- 2.0)
* [misc]backup-simplify:  Simplify (+ (* 0 1) (* 1 0)) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 0)) into 0
* [misc]backup-simplify:  Simplify (+ (- 2.0) 0) into (- 2.0)
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (+ (* -2.0 0) (+ (* 0 1) (* 0 0))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 1) (* 0 0))) into 1
* [misc]backup-simplify:  Simplify (+ (* 0.5 1) (+ (* 0 0) (* 0 0))) into 0.5
* [misc]backup-simplify:  Simplify (+ 0 0.5) into 0.5
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]backup-simplify:  Simplify (+ (* 0.5 (pow x 2)) (+ (* (- 2.0) x) 1.0)) into (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* [misc]approximate:  Taking taylor expansion of (+ (+ 1.0 (* -2.0 (/ 1 x))) (* 0.5 (* (/ 1 x) (/ 1 x)))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (+ 1.0 (* -2.0 (/ 1 x))) (* 0.5 (* (/ 1 x) (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (+ 1.0 (* -2.0 (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* -2.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* 0.5 (* (/ 1 x) (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (* (/ 1 x) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (+ (+ 1.0 (* -2.0 (/ 1 x))) (* 0.5 (* (/ 1 x) (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (+ 1.0 (* -2.0 (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* -2.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* 0.5 (* (/ 1 x) (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (* (/ 1 x) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (* 1 1) into 1
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0 0.5) into 0.5
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]backup-simplify:  Simplify (* -2.0 1) into -2.0
* [misc]backup-simplify:  Simplify (+ 0 -2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ (- 2.0) 0) into (- 2.0)
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -2.0 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ 1.0 0) into 1.0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ 1.0 0) into 1.0
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 1.0 (+ (* (- 2.0) (/ 1 (/ 1 x))) (* 0.5 (pow (/ 1 (/ 1 x)) 2)))) into (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* [misc]approximate:  Taking taylor expansion of (+ (+ 1.0 (* -2.0 (/ 1 (- x)))) (* 0.5 (* (/ 1 (- x)) (/ 1 (- x))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (+ 1.0 (* -2.0 (/ 1 (- x)))) (* 0.5 (* (/ 1 (- x)) (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (+ 1.0 (* -2.0 (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* -2.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* 0.5 (* (/ 1 (- x)) (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (* (/ 1 (- x)) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (+ (+ 1.0 (* -2.0 (/ 1 (- x)))) (* 0.5 (* (/ 1 (- x)) (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (+ 1.0 (* -2.0 (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* -2.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* 0.5 (* (/ 1 (- x)) (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (* (/ 1 (- x)) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (* -1 -1) into 1
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0 0.5) into 0.5
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]backup-simplify:  Simplify (* -2.0 -1) into 2.0
* [misc]backup-simplify:  Simplify (+ 0 2.0) into 2.0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ 2.0 0) into 2.0
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -2.0 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (+ 1.0 0) into 1.0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ 1.0 0) into 1.0
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 1.0 (+ (* 2.0 (/ 1 (/ 1 (- x)))) (* 0.5 (pow (/ 1 (/ 1 (- x))) 2)))) into (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * * [misc]progress:  simplifying candidates
* * * * [misc]progress:  [ 1 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (log (* (exp (+ 1.0 (* -2.0 x))) (exp (* 0.5 (* x x))))))>
* [enter]simplify:  Simplifying (* (exp (+ 1.0 (* -2.0 x))) (exp (* 0.5 (* x x))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (24 enodes)
* * [misc]simplify:  iters left: 4 (41 enodes)
* * [misc]simplify:  iters left: 3 (54 enodes)
* * [misc]simplify:  iters left: 2 (69 enodes)
* * [misc]simplify:  iters left: 1 (71 enodes)
* [exit]simplify:  Simplified to (exp (+ (+ (* x -2.0) 1.0) (* (* x x) 0.5)))
* [exit]simplify:  Simplified to (exp (+ (+ (* x -2.0) 1.0) (* (* x x) 0.5)))
* * * * [misc]progress:  [ 2 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (pow (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))) 1))>
* * * * [misc]progress:  [ 3 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (exp (log (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))))>
* [enter]simplify:  Simplifying (log (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (28 enodes)
* * [misc]simplify:  iters left: 3 (34 enodes)
* [exit]simplify:  Simplified to (log (+ (* x (* x 0.5)) (+ (* x -2.0) 1.0)))
* [exit]simplify:  Simplified to (log (+ (* x (* x 0.5)) (+ (* x -2.0) 1.0)))
* * * * [misc]progress:  [ 4 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (log (exp (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))))>
* [enter]simplify:  Simplifying (exp (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (42 enodes)
* * [misc]simplify:  iters left: 3 (71 enodes)
* * [misc]simplify:  iters left: 2 (79 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (exp (+ (* (* x 0.5) x) (+ (* x -2.0) 1.0)))
* [exit]simplify:  Simplified to (exp (+ (* (* x 0.5) x) (+ (* x -2.0) 1.0)))
* * * * [misc]progress:  [ 5 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (* (* (cbrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))) (cbrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))) (cbrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))))>
* [enter]simplify:  Simplifying (* (cbrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))) (cbrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (19 enodes)
* * [misc]simplify:  iters left: 4 (29 enodes)
* * [misc]simplify:  iters left: 3 (35 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x 0.5) x) (+ (* x -2.0) 1.0))) (cbrt (+ (* (* x 0.5) x) (+ (* x -2.0) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x 0.5) x) (+ (* x -2.0) 1.0))) (cbrt (+ (* (* x 0.5) x) (+ (* x -2.0) 1.0))))
* [enter]simplify:  Simplifying (cbrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (28 enodes)
* * [misc]simplify:  iters left: 3 (34 enodes)
* [exit]simplify:  Simplified to (cbrt (+ (* x (* x 0.5)) (+ (* x -2.0) 1.0)))
* [exit]simplify:  Simplified to (cbrt (+ (* x (* x 0.5)) (+ (* x -2.0) 1.0)))
* * * * [misc]progress:  [ 6 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (cbrt (* (* (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))) (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))) (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))))>
* [enter]simplify:  Simplifying (* (* (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))) (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))) (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (32 enodes)
* * [misc]simplify:  iters left: 4 (154 enodes)
* [exit]simplify:  Simplified to (pow (+ (* (* x 0.5) x) (+ (* x -2.0) 1.0)) 3)
* [exit]simplify:  Simplified to (pow (+ (* (* x 0.5) x) (+ (* x -2.0) 1.0)) 3)
* * * * [misc]progress:  [ 7 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (* (sqrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))) (sqrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))))>
* [enter]simplify:  Simplifying (sqrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (28 enodes)
* * [misc]simplify:  iters left: 3 (34 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* x (* x 0.5)) (+ (* x -2.0) 1.0)))
* [exit]simplify:  Simplified to (sqrt (+ (* x (* x 0.5)) (+ (* x -2.0) 1.0)))
* [enter]simplify:  Simplifying (sqrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (28 enodes)
* * [misc]simplify:  iters left: 3 (34 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* x (* x 0.5)) (+ (* x -2.0) 1.0)))
* [exit]simplify:  Simplified to (sqrt (+ (* x (* x 0.5)) (+ (* x -2.0) 1.0)))
* * * * [misc]progress:  [ 8 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (/ (+ (pow (+ 1.0 (* -2.0 x)) 3) (pow (* 0.5 (* x x)) 3)) (+ (* (+ 1.0 (* -2.0 x)) (+ 1.0 (* -2.0 x))) (- (* (* 0.5 (* x x)) (* 0.5 (* x x))) (* (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))))))>
* [enter]simplify:  Simplifying (+ (pow (+ 1.0 (* -2.0 x)) 3) (pow (* 0.5 (* x x)) 3))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (27 enodes)
* * [misc]simplify:  iters left: 4 (80 enodes)
* * [misc]simplify:  iters left: 3 (272 enodes)
* [exit]simplify:  Simplified to (+ (pow (+ (* x -2.0) 1.0) 3) (pow (* (* 0.5 x) x) 3))
* [exit]simplify:  Simplified to (+ (pow (+ (* x -2.0) 1.0) 3) (pow (* (* 0.5 x) x) 3))
* [enter]simplify:  Simplifying (+ (* (+ 1.0 (* -2.0 x)) (+ 1.0 (* -2.0 x))) (- (* (* 0.5 (* x x)) (* 0.5 (* x x))) (* (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (38 enodes)
* * [misc]simplify:  iters left: 4 (140 enodes)
* * [misc]simplify:  iters left: 3 (482 enodes)
* [exit]simplify:  Simplified to (+ (* (- (* (* x x) 0.5) (+ (* x -2.0) 1.0)) (* (* x x) 0.5)) (* (+ (* x -2.0) 1.0) (+ (* x -2.0) 1.0)))
* [exit]simplify:  Simplified to (+ (* (- (* (* x x) 0.5) (+ (* x -2.0) 1.0)) (* (* x x) 0.5)) (* (+ (* x -2.0) 1.0) (+ (* x -2.0) 1.0)))
* * * * [misc]progress:  [ 9 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (* 1 (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))))>
* * * * [misc]progress:  [ 10 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (/ (- (* (+ 1.0 (* -2.0 x)) (+ 1.0 (* -2.0 x))) (* (* 0.5 (* x x)) (* 0.5 (* x x)))) (- (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))))>
* [enter]simplify:  Simplifying (- (* (+ 1.0 (* -2.0 x)) (+ 1.0 (* -2.0 x))) (* (* 0.5 (* x x)) (* 0.5 (* x x))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (31 enodes)
* * [misc]simplify:  iters left: 4 (102 enodes)
* * [misc]simplify:  iters left: 3 (336 enodes)
* [exit]simplify:  Simplified to (* (+ (+ (* x -2.0) 1.0) (* (* x x) 0.5)) (- (+ (* x -2.0) 1.0) (* (* x x) 0.5)))
* [exit]simplify:  Simplified to (* (+ (+ (* x -2.0) 1.0) (* (* x x) 0.5)) (- (+ (* x -2.0) 1.0) (* (* x x) 0.5)))
* [enter]simplify:  Simplifying (- (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (40 enodes)
* * [misc]simplify:  iters left: 3 (60 enodes)
* * [misc]simplify:  iters left: 2 (64 enodes)
* * [misc]simplify:  iters left: 1 (66 enodes)
* [exit]simplify:  Simplified to (- (+ (* x -2.0) 1.0) (* (* x 0.5) x))
* [exit]simplify:  Simplified to (- (+ (* x -2.0) 1.0) (* (* x 0.5) x))
* * * * [misc]progress:  [ 11 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (+ (* -2.0 x) (* 0.5 (* x x)))))>
* [enter]simplify:  Simplifying (+ (* -2.0 x) (* 0.5 (* x x)))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (23 enodes)
* [exit]simplify:  Simplified to (* (+ -2.0 (* 0.5 x)) x)
* [exit]simplify:  Simplified to (* (+ -2.0 (* 0.5 x)) x)
* * * * [misc]progress:  [ 12 / 15 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* 0.5 (* x x)) (+ 1.0 (* -2.0 x))))>
* * * * [misc]progress:  [ 13 / 15 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x)))
* * * * [misc]progress:  [ 14 / 15 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x)))
* * * * [misc]progress:  [ 15 / 15 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x)))
* * * [misc]progress:  adding candidates to table
* * [misc]progress:  iteration 2 / 4
* * * [misc]progress:  picking best candidate
* * * * [misc]pick:  Picked  #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* * * [misc]progress:  localizing error
* * * [misc]progress:  generating rewritten candidates
* * * * [misc]progress:  [ 1 / 3 ] rewriting at (2)
* * * * [misc]progress:  [ 2 / 3 ] rewriting at (2 1)
* * * * [misc]progress:  [ 3 / 3 ] rewriting at (2 1 1 2)
* * * [misc]progress:  generating series expansions
* * * * [misc]progress:  [ 1 / 3 ] generating series at (2)
* [misc]approximate:  Taking taylor expansion of (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* 2.0 x) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* 2.0 x) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (* 2.0 0) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 1.0 0) into 1.0
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 1) (* 0 0)) into 2.0
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (+ 0 (- 2.0)) into (- 2.0)
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 1) (* 0 0))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]backup-simplify:  Simplify (+ (* 0.5 (pow x 2)) (+ (* (- 2.0) x) 1.0)) into (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* [misc]approximate:  Taking taylor expansion of (- (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) (* 2.0 (/ 1 x))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (- (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) (* 2.0 (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* 2.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (- (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) (* 2.0 (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* 2.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (* 2.0 1) into 2.0
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (+ 0 (- 2.0)) into (- 2.0)
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (pow x -2))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (pow x -2)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (+ 1.0 (* 0.5 (/ 1 (pow (/ 1 x) 2)))) (* (- 2.0) (/ 1 (/ 1 x)))) into (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* [misc]approximate:  Taking taylor expansion of (- (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) (* 2.0 (/ 1 (- x)))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (- (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) (* 2.0 (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* 2.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (- (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) (* 2.0 (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (* 2.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (* 2.0 -1) into -2.0
* [misc]backup-simplify:  Simplify (- -2.0) into 2.0
* [misc]backup-simplify:  Simplify (+ 0 2.0) into 2.0
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (exp (* 2 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ 1 (- x)))))))) (* 2.0 (/ 1 (/ 1 (- x))))) into (- (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) (* 2.0 x))
* * * * [misc]progress:  [ 2 / 3 ] generating series at (2 1)
* [misc]approximate:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 (pow x 2)) 1.0) into (+ (* 0.5 (pow x 2)) 1.0)
* [misc]approximate:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (pow x -2))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (pow x -2)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (/ 1 (pow (/ 1 x) 2)))) into (+ (* 0.5 (pow x 2)) 1.0)
* [misc]approximate:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (exp (* 2 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ 1 (- x)))))))) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x)))))))
* * * * [misc]progress:  [ 3 / 3 ] generating series at (2 1 1 2)
* [misc]approximate:  Taking taylor expansion of (pow x 2) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* 1 (pow x 2)) into (pow x 2)
* [misc]approximate:  Taking taylor expansion of (pow (/ 1 x) 2) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]backup-simplify:  Simplify (pow x -2) into (pow x -2)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (pow (/ 1 x) -2) into (pow (/ 1 x) -2)
* [misc]approximate:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log (/ 1 (- x)))))) into (exp (* 2 (- (log -1) (log (/ -1 x)))))
* * * [misc]progress:  simplifying candidates
* * * * [misc]progress:  [ 1 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (log (/ (exp (+ (* 0.5 (pow x 2)) 1.0)) (exp (* 2.0 x)))))>
* [enter]simplify:  Simplifying (/ (exp (+ (* 0.5 (pow x 2)) 1.0)) (exp (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (23 enodes)
* * [misc]simplify:  iters left: 4 (40 enodes)
* * [misc]simplify:  iters left: 3 (70 enodes)
* * [misc]simplify:  iters left: 2 (102 enodes)
* * [misc]simplify:  iters left: 1 (131 enodes)
* [exit]simplify:  Simplified to (exp (- (* (* 0.5 x) x) (- (* x 2.0) 1.0)))
* [exit]simplify:  Simplified to (exp (- (* (* 0.5 x) x) (- (* x 2.0) 1.0)))
* * * * [misc]progress:  [ 2 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (pow (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)) 1))>
* * * * [misc]progress:  [ 3 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (exp (log (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))))>
* [enter]simplify:  Simplifying (log (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (19 enodes)
* * [misc]simplify:  iters left: 4 (37 enodes)
* * [misc]simplify:  iters left: 3 (53 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (log (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* [exit]simplify:  Simplified to (log (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* * * * [misc]progress:  [ 4 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (log (exp (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))))>
* [enter]simplify:  Simplifying (exp (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (52 enodes)
* * [misc]simplify:  iters left: 3 (93 enodes)
* * [misc]simplify:  iters left: 2 (132 enodes)
* * [misc]simplify:  iters left: 1 (192 enodes)
* [exit]simplify:  Simplified to (exp (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x))))
* [exit]simplify:  Simplified to (exp (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x))))
* * * * [misc]progress:  [ 5 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (* (* (cbrt (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))) (cbrt (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))) (cbrt (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))))>
* [enter]simplify:  Simplifying (* (cbrt (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))) (cbrt (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (38 enodes)
* * [misc]simplify:  iters left: 3 (54 enodes)
* * [misc]simplify:  iters left: 2 (67 enodes)
* * [misc]simplify:  iters left: 1 (82 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x)))) (cbrt (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x)))) (cbrt (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x)))))
* [enter]simplify:  Simplifying (cbrt (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (19 enodes)
* * [misc]simplify:  iters left: 4 (37 enodes)
* * [misc]simplify:  iters left: 3 (53 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (cbrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* [exit]simplify:  Simplified to (cbrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* * * * [misc]progress:  [ 6 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (cbrt (* (* (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))))>
* [enter]simplify:  Simplifying (* (* (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (65 enodes)
* * [misc]simplify:  iters left: 3 (382 enodes)
* [exit]simplify:  Simplified to (pow (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x))) 3)
* [exit]simplify:  Simplified to (pow (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x))) 3)
* * * * [misc]progress:  [ 7 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (* (sqrt (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))) (sqrt (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))))>
* [enter]simplify:  Simplifying (sqrt (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (19 enodes)
* * [misc]simplify:  iters left: 4 (37 enodes)
* * [misc]simplify:  iters left: 3 (53 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* [exit]simplify:  Simplified to (sqrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* [enter]simplify:  Simplifying (sqrt (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (19 enodes)
* * [misc]simplify:  iters left: 4 (37 enodes)
* * [misc]simplify:  iters left: 3 (53 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* [exit]simplify:  Simplified to (sqrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* * * * [misc]progress:  [ 8 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (/ (- (pow (+ (* 0.5 (pow x 2)) 1.0) 3) (pow (* 2.0 x) 3)) (+ (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (+ (* (* 2.0 x) (* 2.0 x)) (* (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))))))>
* [enter]simplify:  Simplifying (- (pow (+ (* 0.5 (pow x 2)) 1.0) 3) (pow (* 2.0 x) 3))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (81 enodes)
* * [misc]simplify:  iters left: 3 (291 enodes)
* [exit]simplify:  Simplified to (+ (* (* (* 2.0 x) (* 2.0 x)) (* (- 2.0) x)) (pow (+ (* (* 0.5 x) x) 1.0) 3))
* [exit]simplify:  Simplified to (+ (* (* (* 2.0 x) (* 2.0 x)) (* (- 2.0) x)) (pow (+ (* (* 0.5 x) x) 1.0) 3))
* [enter]simplify:  Simplifying (+ (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (+ (* (* 2.0 x) (* 2.0 x)) (* (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (37 enodes)
* * [misc]simplify:  iters left: 4 (116 enodes)
* * [misc]simplify:  iters left: 3 (386 enodes)
* [exit]simplify:  Simplified to (+ (* (+ (* x (* 0.5 x)) (+ (* x 2.0) 1.0)) (* x 2.0)) (* (+ (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0)))
* [exit]simplify:  Simplified to (+ (* (+ (* x (* 0.5 x)) (+ (* x 2.0) 1.0)) (* x 2.0)) (* (+ (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0)))
* * * * [misc]progress:  [ 9 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (+ (+ (* 0.5 (pow x 2)) 1.0) (- (* 2.0 x))))>
* [enter]simplify:  Simplifying (- (* 2.0 x))
* * [misc]simplify:  iters left: 4 (4 enodes)
* * [misc]simplify:  iters left: 3 (9 enodes)
* * [misc]simplify:  iters left: 2 (11 enodes)
* [exit]simplify:  Simplified to (* 2.0 (- x))
* [exit]simplify:  Simplified to (* 2.0 (- x))
* * * * [misc]progress:  [ 10 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (* 1 (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))))>
* * * * [misc]progress:  [ 11 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (/ (- (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (* (* 2.0 x) (* 2.0 x))) (+ (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))))>
* [enter]simplify:  Simplifying (- (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (* (* 2.0 x) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (31 enodes)
* * [misc]simplify:  iters left: 4 (94 enodes)
* * [misc]simplify:  iters left: 3 (307 enodes)
* [exit]simplify:  Simplified to (* (+ (+ (* x 2.0) 1.0) (* (* x x) 0.5)) (+ (- 1.0 (* x 2.0)) (* (* x x) 0.5)))
* [exit]simplify:  Simplified to (* (+ (+ (* x 2.0) 1.0) (* (* x x) 0.5)) (+ (- 1.0 (* x 2.0)) (* (* x x) 0.5)))
* [enter]simplify:  Simplifying (+ (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (27 enodes)
* * [misc]simplify:  iters left: 3 (37 enodes)
* * [misc]simplify:  iters left: 2 (49 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (+ 1.0 (* 2.0 x)))
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (+ 1.0 (* 2.0 x)))
* * * * [misc]progress:  [ 12 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* 0.5 (pow x 2)) (- 1.0 (* 2.0 x))))>
* [enter]simplify:  Simplifying (- 1.0 (* 2.0 x))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (8 enodes)
* * [misc]simplify:  iters left: 2 (15 enodes)
* [exit]simplify:  Simplified to (- 1.0 (* x 2.0))
* [exit]simplify:  Simplified to (- 1.0 (* x 2.0))
* * * * [misc]progress:  [ 13 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (+ (+ (* 0.5 (pow x 2)) 1.0) (- (* 2.0 x))))>
* [enter]simplify:  Simplifying (- (* 2.0 x))
* * [misc]simplify:  iters left: 4 (4 enodes)
* * [misc]simplify:  iters left: 3 (9 enodes)
* * [misc]simplify:  iters left: 2 (11 enodes)
* [exit]simplify:  Simplified to (* 2.0 (- x))
* [exit]simplify:  Simplified to (* 2.0 (- x))
* * * * [misc]progress:  [ 14 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (+ (* 0.5 (pow x 2)) 1.0) 1) (* 2.0 x)))>
* * * * [misc]progress:  [ 15 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (exp (log (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (log (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* [exit]simplify:  Simplified to (log (+ (* (* x x) 0.5) 1.0))
* [exit]simplify:  Simplified to (log (+ (* (* x x) 0.5) 1.0))
* * * * [misc]progress:  [ 16 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (log (exp (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (exp (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (23 enodes)
* * [misc]simplify:  iters left: 3 (27 enodes)
* [exit]simplify:  Simplified to (* (exp 1.0) (pow (exp 0.5) (* x x)))
* [exit]simplify:  Simplified to (* (exp 1.0) (pow (exp 0.5) (* x x)))
* * * * [misc]progress:  [ 17 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (16 enodes)
* * [misc]simplify:  iters left: 3 (18 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [enter]simplify:  Simplifying (cbrt (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* [exit]simplify:  Simplified to (cbrt (+ (* (* x x) 0.5) 1.0))
* [exit]simplify:  Simplified to (cbrt (+ (* (* x x) 0.5) 1.0))
* * * * [misc]progress:  [ 18 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (cbrt (* (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (25 enodes)
* * [misc]simplify:  iters left: 4 (99 enodes)
* * [misc]simplify:  iters left: 3 (383 enodes)
* [exit]simplify:  Simplified to (pow (+ (* x (* 0.5 x)) 1.0) 3)
* [exit]simplify:  Simplified to (pow (+ (* x (* 0.5 x)) 1.0) 3)
* * * * [misc]progress:  [ 19 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (sqrt (+ (* 0.5 (pow x 2)) 1.0)) (sqrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (sqrt (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) 0.5) 1.0))
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) 0.5) 1.0))
* [enter]simplify:  Simplifying (sqrt (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) 0.5) 1.0))
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) 0.5) 1.0))
* * * * [misc]progress:  [ 20 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)) (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (51 enodes)
* * [misc]simplify:  iters left: 3 (131 enodes)
* * [misc]simplify:  iters left: 2 (321 enodes)
* * [misc]simplify:  iters left: 1 (485 enodes)
* [exit]simplify:  Simplified to (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3))
* [exit]simplify:  Simplified to (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3))
* [enter]simplify:  Simplifying (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (27 enodes)
* * [misc]simplify:  iters left: 4 (69 enodes)
* * [misc]simplify:  iters left: 3 (172 enodes)
* * [misc]simplify:  iters left: 2 (364 enodes)
* [exit]simplify:  Simplified to (+ (- (* 1.0 1.0) (* (* x x) (* 0.5 1.0))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))
* [exit]simplify:  Simplified to (+ (- (* 1.0 1.0) (* (* x x) (* 0.5 1.0))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))
* * * * [misc]progress:  [ 21 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (* 1 (+ (* 0.5 (pow x 2)) 1.0)) (* 2.0 x)))>
* * * * [misc]progress:  [ 22 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)) (- (* 0.5 (pow x 2)) 1.0)) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (42 enodes)
* * [misc]simplify:  iters left: 3 (89 enodes)
* * [misc]simplify:  iters left: 2 (184 enodes)
* * [misc]simplify:  iters left: 1 (356 enodes)
* [exit]simplify:  Simplified to (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))
* [exit]simplify:  Simplified to (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))
* [enter]simplify:  Simplifying (- (* 0.5 (pow x 2)) 1.0)
* * [misc]simplify:  iters left: 5 (7 enodes)
* * [misc]simplify:  iters left: 4 (11 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* * [misc]simplify:  iters left: 2 (17 enodes)
* [exit]simplify:  Simplified to (- (* (* x x) 0.5) 1.0)
* [exit]simplify:  Simplified to (- (* (* x x) 0.5) 1.0)
* * * * [misc]progress:  [ 23 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (+ 1.0 (* 0.5 (pow x 2))) (* 2.0 x)))>
* * * * [misc]progress:  [ 24 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (+ (* 0.5 (exp (* (log x) 2))) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (log x) 2)
* * [misc]simplify:  iters left: 3 (4 enodes)
* * [misc]simplify:  iters left: 2 (5 enodes)
* [exit]simplify:  Simplified to (* 2 (log x))
* [exit]simplify:  Simplified to (* 2 (log x))
* * * * [misc]progress:  [ 25 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (+ (* 0.5 (* x x)) 1.0) (* 2.0 x)))>
* * * * [misc]progress:  [ 26 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (+ (* 0.5 (pow (pow x 2) 1)) 1.0) (* 2.0 x)))>
* * * * [misc]progress:  [ 27 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (+ (* 0.5 (exp (log (pow x 2)))) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (log (pow x 2))
* * [misc]simplify:  iters left: 2 (4 enodes)
* * [misc]simplify:  iters left: 1 (7 enodes)
* [exit]simplify:  Simplified to (+ (log x) (log x))
* [exit]simplify:  Simplified to (+ (log x) (log x))
* * * * [misc]progress:  [ 28 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (+ (* 0.5 (log (exp (pow x 2)))) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (exp (pow x 2))
* * [misc]simplify:  iters left: 2 (4 enodes)
* * [misc]simplify:  iters left: 1 (5 enodes)
* [exit]simplify:  Simplified to (exp (* x x))
* [exit]simplify:  Simplified to (exp (* x x))
* * * * [misc]progress:  [ 29 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (+ (* 0.5 (* (* (cbrt (pow x 2)) (cbrt (pow x 2))) (cbrt (pow x 2)))) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (pow x 2)) (cbrt (pow x 2)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* x x)) (cbrt (* x x)))
* [exit]simplify:  Simplified to (* (cbrt (* x x)) (cbrt (* x x)))
* [enter]simplify:  Simplifying (cbrt (pow x 2))
* * [misc]simplify:  iters left: 2 (4 enodes)
* * [misc]simplify:  iters left: 1 (5 enodes)
* [exit]simplify:  Simplified to (cbrt (* x x))
* [exit]simplify:  Simplified to (cbrt (* x x))
* * * * [misc]progress:  [ 30 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (+ (* 0.5 (cbrt (* (* (pow x 2) (pow x 2)) (pow x 2)))) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (pow x 2) (pow x 2)) (pow x 2))
* * [misc]simplify:  iters left: 5 (5 enodes)
* * [misc]simplify:  iters left: 4 (7 enodes)
* * [misc]simplify:  iters left: 3 (15 enodes)
* * [misc]simplify:  iters left: 2 (25 enodes)
* * [misc]simplify:  iters left: 1 (32 enodes)
* [exit]simplify:  Simplified to (* (pow x 3) (pow x 3))
* [exit]simplify:  Simplified to (* (pow x 3) (pow x 3))
* * * * [misc]progress:  [ 31 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (+ (* 0.5 (* (sqrt (pow x 2)) (sqrt (pow x 2)))) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (sqrt (pow x 2))
* * [misc]simplify:  iters left: 2 (4 enodes)
* * [misc]simplify:  iters left: 1 (5 enodes)
* [exit]simplify:  Simplified to (fabs x)
* [exit]simplify:  Simplified to (fabs x)
* [enter]simplify:  Simplifying (sqrt (pow x 2))
* * [misc]simplify:  iters left: 2 (4 enodes)
* * [misc]simplify:  iters left: 1 (5 enodes)
* [exit]simplify:  Simplified to (fabs x)
* [exit]simplify:  Simplified to (fabs x)
* * * * [misc]progress:  [ 32 / 41 ] simplifiying candidate #<alt-delta (Î» (x) (- (+ (* 0.5 (* 1 (pow x 2))) 1.0) (* 2.0 x)))>
* * * * [misc]progress:  [ 33 / 41 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x)))
* * * * [misc]progress:  [ 34 / 41 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x)))
* * * * [misc]progress:  [ 35 / 41 ] simplifiying candidate #<alt-event (Î» (x) (- (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (30 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (101 enodes)
* * [misc]simplify:  iters left: 2 (205 enodes)
* [exit]simplify:  Simplified to (+ (- 1.0 (* 2.0 x)) (* (* x x) 0.5))
* * * * [misc]progress:  [ 36 / 41 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x)))
* * * * [misc]progress:  [ 37 / 41 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x)))
* * * * [misc]progress:  [ 38 / 41 ] simplifiying candidate #<alt-event (Î» (x) (- (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (30 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (101 enodes)
* * [misc]simplify:  iters left: 2 (205 enodes)
* [exit]simplify:  Simplified to (+ (- 1.0 (* 2.0 x)) (* (* x x) 0.5))
* * * * [misc]progress:  [ 39 / 41 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x)))
* * * * [misc]progress:  [ 40 / 41 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow (/ 1 x) -2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow (/ 1 x) -2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (35 enodes)
* * [misc]simplify:  iters left: 3 (42 enodes)
* * [misc]simplify:  iters left: 2 (44 enodes)
* * [misc]simplify:  iters left: 1 (52 enodes)
* [exit]simplify:  Simplified to (+ (- 1.0 (* 2.0 x)) (* (pow (/ 1 x) -2) 0.5))
* * * * [misc]progress:  [ 41 / 41 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x)))))) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x)))))) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (30 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (101 enodes)
* * [misc]simplify:  iters left: 2 (206 enodes)
* [exit]simplify:  Simplified to (+ (- 1.0 (* x 2.0)) (* (* x x) 0.5))
* * * [misc]progress:  adding candidates to table
* * [misc]progress:  iteration 3 / 4
* * * [misc]progress:  picking best candidate
* * * * [misc]pick:  Picked  #<alt-delta (Î» (x) (+ 1.0 (* (+ -2.0 (* 0.5 x)) x)))>
* * * [misc]progress:  localizing error
* * * [misc]progress:  generating rewritten candidates
* * * * [misc]progress:  [ 1 / 1 ] rewriting at (2 2)
* * * [misc]progress:  generating series expansions
* * * * [misc]progress:  [ 1 / 1 ] generating series at (2 2)
* [misc]approximate:  Taking taylor expansion of (* (+ -2.0 (* 0.5 x)) x) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (+ -2.0 (* 0.5 x)) x) in x
* [misc]taylor:  Taking taylor expansion of (+ -2.0 (* 0.5 x)) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of (* 0.5 x) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* (+ -2.0 (* 0.5 x)) x) in x
* [misc]taylor:  Taking taylor expansion of (+ -2.0 (* 0.5 x)) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of (* 0.5 x) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (* 0.5 0) into 0
* [misc]backup-simplify:  Simplify (+ -2.0 0) into (- 2.0)
* [misc]backup-simplify:  Simplify (* (- 2.0) 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 1) (* 0 0)) into 0.5
* [misc]backup-simplify:  Simplify (+ 0 0.5) into 0.5
* [misc]backup-simplify:  Simplify (+ (* (- 2.0) 1) (* 0.5 0)) into (- 2.0)
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 1) (* 0 0))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 2.0) 0) (+ (* 0.5 1) (* 0 0))) into 0.5
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 2.0) 0) (+ (* 0.5 0) (+ (* 0 1) (* 0 0)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 2.0) 0) (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 2.0) 0) (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 2.0) 0) (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 2.0) 0) (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 2.0) 0) (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 (pow x 2)) (* (- 2.0) x)) into (- (* 0.5 (pow x 2)) (* 2.0 x))
* [misc]approximate:  Taking taylor expansion of (* (+ -2.0 (* 0.5 (/ 1 x))) (/ 1 x)) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (+ -2.0 (* 0.5 (/ 1 x))) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (+ -2.0 (* 0.5 (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of (* 0.5 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* (+ -2.0 (* 0.5 (/ 1 x))) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (+ -2.0 (* 0.5 (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of (* 0.5 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0 0.5) into 0.5
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ -2.0 0) into (- 2.0)
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* (- 2.0) 1)) into (- 2.0)
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* (- 2.0) 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* (- 2.0) 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* (- 2.0) 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* (- 2.0) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* (- 2.0) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* (- 2.0) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* (- 2.0) (/ 1 (/ 1 x))) (* 0.5 (pow (/ 1 (/ 1 x)) 2))) into (- (* 0.5 (pow x 2)) (* 2.0 x))
* [misc]approximate:  Taking taylor expansion of (* (+ -2.0 (* 0.5 (/ 1 (- x)))) (/ 1 (- x))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (+ -2.0 (* 0.5 (/ 1 (- x)))) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (+ -2.0 (* 0.5 (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of (* 0.5 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* (+ -2.0 (* 0.5 (/ 1 (- x)))) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (+ -2.0 (* 0.5 (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of -2.0 in x
* [misc]backup-simplify:  Simplify -2.0 into -2.0
* [misc]taylor:  Taking taylor expansion of (* 0.5 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (* 0.5 -1) into -0.5
* [misc]backup-simplify:  Simplify (+ 0 -0.5) into (- 0.5)
* [misc]backup-simplify:  Simplify (* (- 0.5) -1) into 0.5
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (+ -2.0 0) into (- 2.0)
* [misc]backup-simplify:  Simplify (+ (* (- 0.5) 0) (* (- 2.0) -1)) into 2.0
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 0.5) 0) (+ (* (- 2.0) 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 0.5) 0) (+ (* (- 2.0) 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 0.5) 0) (+ (* (- 2.0) 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 0.5) 0) (+ (* (- 2.0) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 0.5) 0) (+ (* (- 2.0) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 0.5) 0) (+ (* (- 2.0) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 (/ 1 (/ 1 (- x)))) (* 0.5 (pow (/ 1 (/ 1 (- x))) 2))) into (- (* 0.5 (pow x 2)) (* 2.0 x))
* * * [misc]progress:  simplifying candidates
* * * * [misc]progress:  [ 1 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (pow (* (+ -2.0 (* 0.5 x)) x) 1)))>
* * * * [misc]progress:  [ 2 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (exp (log (* (+ -2.0 (* 0.5 x)) x)))))>
* [enter]simplify:  Simplifying (log (* (+ -2.0 (* 0.5 x)) x))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (22 enodes)
* * [misc]simplify:  iters left: 3 (27 enodes)
* [exit]simplify:  Simplified to (log (* (+ (* x 0.5) -2.0) x))
* [exit]simplify:  Simplified to (log (* (+ (* x 0.5) -2.0) x))
* * * * [misc]progress:  [ 3 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (log (exp (* (+ -2.0 (* 0.5 x)) x)))))>
* [enter]simplify:  Simplifying (exp (* (+ -2.0 (* 0.5 x)) x))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (24 enodes)
* * [misc]simplify:  iters left: 3 (41 enodes)
* * [misc]simplify:  iters left: 2 (61 enodes)
* * [misc]simplify:  iters left: 1 (62 enodes)
* [exit]simplify:  Simplified to (pow (exp x) (+ (* x 0.5) -2.0))
* [exit]simplify:  Simplified to (pow (exp x) (+ (* x 0.5) -2.0))
* * * * [misc]progress:  [ 4 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (* (* (cbrt (* (+ -2.0 (* 0.5 x)) x)) (cbrt (* (+ -2.0 (* 0.5 x)) x))) (cbrt (* (+ -2.0 (* 0.5 x)) x)))))>
* [enter]simplify:  Simplifying (* (cbrt (* (+ -2.0 (* 0.5 x)) x)) (cbrt (* (+ -2.0 (* 0.5 x)) x)))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* * [misc]simplify:  iters left: 4 (19 enodes)
* * [misc]simplify:  iters left: 3 (24 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* (+ (* x 0.5) -2.0) x)) (cbrt (* (+ (* x 0.5) -2.0) x)))
* [exit]simplify:  Simplified to (* (cbrt (* (+ (* x 0.5) -2.0) x)) (cbrt (* (+ (* x 0.5) -2.0) x)))
* [enter]simplify:  Simplifying (cbrt (* (+ -2.0 (* 0.5 x)) x))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (23 enodes)
* [exit]simplify:  Simplified to (cbrt (* (+ (* x 0.5) -2.0) x))
* [exit]simplify:  Simplified to (cbrt (* (+ (* x 0.5) -2.0) x))
* * * * [misc]progress:  [ 5 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (cbrt (* (* (* (+ -2.0 (* 0.5 x)) x) (* (+ -2.0 (* 0.5 x)) x)) (* (+ -2.0 (* 0.5 x)) x)))))>
* [enter]simplify:  Simplifying (* (* (* (+ -2.0 (* 0.5 x)) x) (* (+ -2.0 (* 0.5 x)) x)) (* (+ -2.0 (* 0.5 x)) x))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (58 enodes)
* * [misc]simplify:  iters left: 3 (280 enodes)
* [exit]simplify:  Simplified to (pow (* (+ (* x 0.5) -2.0) x) 3)
* [exit]simplify:  Simplified to (pow (* (+ (* x 0.5) -2.0) x) 3)
* * * * [misc]progress:  [ 6 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (* (sqrt (* (+ -2.0 (* 0.5 x)) x)) (sqrt (* (+ -2.0 (* 0.5 x)) x)))))>
* [enter]simplify:  Simplifying (sqrt (* (+ -2.0 (* 0.5 x)) x))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (23 enodes)
* [exit]simplify:  Simplified to (sqrt (* (+ (* x 0.5) -2.0) x))
* [exit]simplify:  Simplified to (sqrt (* (+ (* x 0.5) -2.0) x))
* [enter]simplify:  Simplifying (sqrt (* (+ -2.0 (* 0.5 x)) x))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (23 enodes)
* [exit]simplify:  Simplified to (sqrt (* (+ (* x 0.5) -2.0) x))
* [exit]simplify:  Simplified to (sqrt (* (+ (* x 0.5) -2.0) x))
* * * * [misc]progress:  [ 7 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (* 1 (* (+ -2.0 (* 0.5 x)) x))))>
* * * * [misc]progress:  [ 8 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (* (* (cbrt (+ -2.0 (* 0.5 x))) (cbrt (+ -2.0 (* 0.5 x)))) (* (cbrt (+ -2.0 (* 0.5 x))) x))))>
* [enter]simplify:  Simplifying (* (cbrt (+ -2.0 (* 0.5 x))) x)
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (* x (cbrt (+ (* x 0.5) -2.0)))
* [exit]simplify:  Simplified to (* x (cbrt (+ (* x 0.5) -2.0)))
* * * * [misc]progress:  [ 9 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (* (sqrt (+ -2.0 (* 0.5 x))) (* (sqrt (+ -2.0 (* 0.5 x))) x))))>
* [enter]simplify:  Simplifying (* (sqrt (+ -2.0 (* 0.5 x))) x)
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (* x (sqrt (+ (* x 0.5) -2.0)))
* [exit]simplify:  Simplified to (* x (sqrt (+ (* x 0.5) -2.0)))
* * * * [misc]progress:  [ 10 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (* 1 (* (+ -2.0 (* 0.5 x)) x))))>
* [enter]simplify:  Simplifying (* (+ -2.0 (* 0.5 x)) x)
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* * [misc]simplify:  iters left: 4 (17 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* [exit]simplify:  Simplified to (* (+ (* x 0.5) -2.0) x)
* [exit]simplify:  Simplified to (* (+ (* x 0.5) -2.0) x)
* * * * [misc]progress:  [ 11 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (/ (* (+ (pow -2.0 3) (pow (* 0.5 x) 3)) x) (+ (* -2.0 -2.0) (- (* (* 0.5 x) (* 0.5 x)) (* -2.0 (* 0.5 x)))))))>
* [enter]simplify:  Simplifying (* (+ (pow -2.0 3) (pow (* 0.5 x) 3)) x)
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (52 enodes)
* * [misc]simplify:  iters left: 3 (114 enodes)
* * [misc]simplify:  iters left: 2 (190 enodes)
* * [misc]simplify:  iters left: 1 (209 enodes)
* [exit]simplify:  Simplified to (+ (* (* (* 0.5 x) (* x x)) (* 0.5 (* 0.5 x))) (* (* -2.0 x) (* -2.0 -2.0)))
* [exit]simplify:  Simplified to (+ (* (* (* 0.5 x) (* x x)) (* 0.5 (* 0.5 x))) (* (* -2.0 x) (* -2.0 -2.0)))
* * * * [misc]progress:  [ 12 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (/ (* (- (* -2.0 -2.0) (* (* 0.5 x) (* 0.5 x))) x) (- -2.0 (* 0.5 x)))))>
* [enter]simplify:  Simplifying (* (- (* -2.0 -2.0) (* (* 0.5 x) (* 0.5 x))) x)
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (19 enodes)
* * [misc]simplify:  iters left: 4 (51 enodes)
* * [misc]simplify:  iters left: 3 (135 enodes)
* * [misc]simplify:  iters left: 2 (328 enodes)
* [exit]simplify:  Simplified to (- (* x (* -2.0 -2.0)) (* (pow x 3) (* 0.5 0.5)))
* [exit]simplify:  Simplified to (- (* x (* -2.0 -2.0)) (* (pow x 3) (* 0.5 0.5)))
* * * * [misc]progress:  [ 13 / 16 ] simplifiying candidate #<alt-delta (Î» (x) (+ 1.0 (* x (+ -2.0 (* 0.5 x)))))>
* * * * [misc]progress:  [ 14 / 16 ] simplifiying candidate #<alt-event (Î» (x) (+ 1.0 (- (* 0.5 (pow x 2)) (* 2.0 x))))>
* [enter]simplify:  Simplifying (+ 1.0 (- (* 0.5 (pow x 2)) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (35 enodes)
* * [misc]simplify:  iters left: 3 (54 enodes)
* * [misc]simplify:  iters left: 2 (74 enodes)
* * [misc]simplify:  iters left: 1 (107 enodes)
* [exit]simplify:  Simplified to (+ (* 0.5 (* x x)) (- 1.0 (* x 2.0)))
* * * * [misc]progress:  [ 15 / 16 ] simplifiying candidate #<alt-event (Î» (x) (+ 1.0 (- (* 0.5 (pow x 2)) (* 2.0 x))))>
* [enter]simplify:  Simplifying (+ 1.0 (- (* 0.5 (pow x 2)) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (35 enodes)
* * [misc]simplify:  iters left: 3 (54 enodes)
* * [misc]simplify:  iters left: 2 (74 enodes)
* * [misc]simplify:  iters left: 1 (107 enodes)
* [exit]simplify:  Simplified to (+ (* 0.5 (* x x)) (- 1.0 (* x 2.0)))
* * * * [misc]progress:  [ 16 / 16 ] simplifiying candidate #<alt-event (Î» (x) (+ 1.0 (- (* 0.5 (pow x 2)) (* 2.0 x))))>
* [enter]simplify:  Simplifying (+ 1.0 (- (* 0.5 (pow x 2)) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (35 enodes)
* * [misc]simplify:  iters left: 3 (54 enodes)
* * [misc]simplify:  iters left: 2 (74 enodes)
* * [misc]simplify:  iters left: 1 (107 enodes)
* [exit]simplify:  Simplified to (+ (* 0.5 (* x x)) (- 1.0 (* x 2.0)))
* * * [misc]progress:  adding candidates to table
* * [misc]progress:  iteration 4 / 4
* * * [misc]progress:  picking best candidate
* * * * [misc]pick:  Picked  #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* * * [misc]progress:  localizing error
* * * [misc]progress:  generating rewritten candidates
* * * * [misc]progress:  [ 1 / 4 ] rewriting at (2 1 1)
* * * * [misc]progress:  [ 2 / 4 ] rewriting at (2 1)
* * * * [misc]progress:  [ 3 / 4 ] rewriting at (2)
* * * * [misc]progress:  [ 4 / 4 ] rewriting at (2 1 2 1)
* * * [misc]progress:  generating series expansions
* * * * [misc]progress:  [ 1 / 4 ] generating series at (2 1 1)
* [misc]approximate:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]backup-simplify:  Simplify (* (pow 1.0 1/3) (pow 1.0 1/3)) into (pow (pow 1.0 2) 1/3)
* [misc]backup-simplify:  Simplify (pow (pow 1.0 2) 1/3) into (pow (pow 1.0 2) 1/3)
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1.0 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log 1.0))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1.0 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log 1.0))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) 0) (* 0 (pow 1.0 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1.0 2))) (* 1 (/ (* 1 (pow (* 2 0.5) 1)) (pow 1.0 1)))) 2) into 0.5
* [misc]backup-simplify:  Simplify (+ (* 1/3 0.5) (+ (* 0 0) (* 0 (log 1.0)))) into 0.16666666666666666
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0.16666666666666666 1) 1)))) into (* 0.16666666666666666 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1.0 2))) (* 1 (/ (* 1 (pow (* 2 0.5) 1)) (pow 1.0 1)))) 2) into 0.5
* [misc]backup-simplify:  Simplify (+ (* 1/3 0.5) (+ (* 0 0) (* 0 (log 1.0)))) into 0.16666666666666666
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0.16666666666666666 1) 1)))) into (* 0.16666666666666666 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (* 0.16666666666666666 (pow 1.0 1/3)) (pow 1.0 1/3)))) into (* 0.3333333333333333 (pow (pow 1.0 2) 1/3))
* [misc]backup-simplify:  Simplify (* 0.3333333333333333 (pow (pow 1.0 2) 1/3)) into (* 0.3333333333333333 (pow (pow 1.0 2) 1/3))
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1.0 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1.0 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1.0 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1.0 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) 0) (+ (* 0 (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* (* 0.16666666666666666 (pow 1.0 1/3)) 0) (* 0 (pow 1.0 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1.0 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 1)) (pow 1.0 3))) (* -3 (/ (* 1 (pow (* 2 0.5) 2)) (pow 1.0 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1.0 1)))) 24) into -1/8
* [misc]backup-simplify:  Simplify (+ (* 1/3 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0)))))) into -1/24
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow -1/24 1) 1)))) into (* -0.027777777777777776 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1.0 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 1)) (pow 1.0 3))) (* -3 (/ (* 1 (pow (* 2 0.5) 2)) (pow 1.0 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1.0 1)))) 24) into -1/8
* [misc]backup-simplify:  Simplify (+ (* 1/3 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0)))))) into -1/24
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow -1/24 1) 1)))) into (* -0.027777777777777776 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) (* -0.027777777777777776 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (* 0.16666666666666666 (pow 1.0 1/3)) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (* -0.027777777777777776 (pow 1.0 1/3)) (pow 1.0 1/3)))))) into (- (* 0.027777777777777776 (pow (pow 1.0 2) 1/3)))
* [misc]backup-simplify:  Simplify (- (* 0.027777777777777776 (pow (pow 1.0 2) 1/3))) into (- (* 0.027777777777777776 (pow (pow 1.0 2) 1/3)))
* [misc]backup-simplify:  Simplify (+ (* (- (* 0.027777777777777776 (pow (pow 1.0 2) 1/3))) (pow x 4)) (+ (* (* 0.3333333333333333 (pow (pow 1.0 2) 1/3)) (pow x 2)) (pow (pow 1.0 2) 1/3))) into (- (+ (* 0.3333333333333333 (* (pow (pow 1.0 2) 1/3) (pow x 2))) (pow (pow 1.0 2) 1/3)) (* 0.027777777777777776 (* (pow (pow 1.0 2) 1/3) (pow x 4))))
* [misc]approximate:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)) into (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3)
* [misc]backup-simplify:  Simplify (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) into (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (pow x -2))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (pow x -2))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (pow x -2)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (pow x -2)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow (/ 1 x) 2)))) 2) 1/3) into (pow (pow (+ (* 0.5 (pow x 2)) 1.0) 2) 1/3)
* [misc]approximate:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)) into (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3)
* [misc]backup-simplify:  Simplify (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) into (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3)
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (exp (* 2 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (exp (* 2 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ 1 (- x)))))))) 2) 1/3) into (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) 2) 1/3)
* * * * [misc]progress:  [ 2 / 4 ] generating series at (2 1)
* [misc]approximate:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]backup-simplify:  Simplify (* (pow 1.0 1/3) (pow 1.0 1/3)) into (pow (pow 1.0 2) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow 1.0 2) 1/3) (pow 1.0 1/3)) into 1.0
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1.0 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log 1.0))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1.0 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log 1.0))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1.0 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log 1.0))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) 0) (* 0 (pow 1.0 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow 1.0 2) 1/3) 0) (* 0 (pow 1.0 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1.0 2))) (* 1 (/ (* 1 (pow (* 2 0.5) 1)) (pow 1.0 1)))) 2) into 0.5
* [misc]backup-simplify:  Simplify (+ (* 1/3 0.5) (+ (* 0 0) (* 0 (log 1.0)))) into 0.16666666666666666
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0.16666666666666666 1) 1)))) into (* 0.16666666666666666 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1.0 2))) (* 1 (/ (* 1 (pow (* 2 0.5) 1)) (pow 1.0 1)))) 2) into 0.5
* [misc]backup-simplify:  Simplify (+ (* 1/3 0.5) (+ (* 0 0) (* 0 (log 1.0)))) into 0.16666666666666666
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0.16666666666666666 1) 1)))) into (* 0.16666666666666666 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1.0 2))) (* 1 (/ (* 1 (pow (* 2 0.5) 1)) (pow 1.0 1)))) 2) into 0.5
* [misc]backup-simplify:  Simplify (+ (* 1/3 0.5) (+ (* 0 0) (* 0 (log 1.0)))) into 0.16666666666666666
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0.16666666666666666 1) 1)))) into (* 0.16666666666666666 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (* 0.16666666666666666 (pow 1.0 1/3)) (pow 1.0 1/3)))) into (* 0.3333333333333333 (pow (pow 1.0 2) 1/3))
* [misc]backup-simplify:  Simplify (+ (* (pow (pow 1.0 2) 1/3) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (* 0.3333333333333333 (pow (pow 1.0 2) 1/3)) (pow 1.0 1/3)))) into 0.5
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1.0 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1.0 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1.0 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1.0 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1.0 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1.0 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) 0) (+ (* 0 (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* (* 0.16666666666666666 (pow 1.0 1/3)) 0) (* 0 (pow 1.0 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow 1.0 2) 1/3) 0) (+ (* 0 (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* (* 0.3333333333333333 (pow (pow 1.0 2) 1/3)) 0) (* 0 (pow 1.0 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1.0 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 1)) (pow 1.0 3))) (* -3 (/ (* 1 (pow (* 2 0.5) 2)) (pow 1.0 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1.0 1)))) 24) into -1/8
* [misc]backup-simplify:  Simplify (+ (* 1/3 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0)))))) into -1/24
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow -1/24 1) 1)))) into (* -0.027777777777777776 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1.0 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 1)) (pow 1.0 3))) (* -3 (/ (* 1 (pow (* 2 0.5) 2)) (pow 1.0 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1.0 1)))) 24) into -1/8
* [misc]backup-simplify:  Simplify (+ (* 1/3 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0)))))) into -1/24
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow -1/24 1) 1)))) into (* -0.027777777777777776 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1.0 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 1)) (pow 1.0 3))) (* -3 (/ (* 1 (pow (* 2 0.5) 2)) (pow 1.0 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1.0 1)))) 24) into -1/8
* [misc]backup-simplify:  Simplify (+ (* 1/3 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0)))))) into -1/24
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow -1/24 1) 1)))) into (* -0.027777777777777776 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) (* -0.027777777777777776 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (* 0.16666666666666666 (pow 1.0 1/3)) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (* -0.027777777777777776 (pow 1.0 1/3)) (pow 1.0 1/3)))))) into (- (* 0.027777777777777776 (pow (pow 1.0 2) 1/3)))
* [misc]backup-simplify:  Simplify (+ (* (pow (pow 1.0 2) 1/3) (* -0.027777777777777776 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (* 0.3333333333333333 (pow (pow 1.0 2) 1/3)) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (- (* 0.027777777777777776 (pow (pow 1.0 2) 1/3))) (pow 1.0 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1.0 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0.5) 1)) (pow 1.0 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 2)) (pow 1.0 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1.0 3))) (* -10 (/ (* 1 (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1.0 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1.0 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0.5) 1)) (pow 1.0 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 2)) (pow 1.0 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1.0 3))) (* -10 (/ (* 1 (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1.0 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1.0 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0.5) 1)) (pow 1.0 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 2)) (pow 1.0 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1.0 3))) (* -10 (/ (* 1 (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1.0 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) 0) (+ (* 0 (* -0.027777777777777776 (pow 1.0 1/3))) (+ (* (* 0.16666666666666666 (pow 1.0 1/3)) 0) (+ (* 0 (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* (* -0.027777777777777776 (pow 1.0 1/3)) 0) (* 0 (pow 1.0 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow 1.0 2) 1/3) 0) (+ (* 0 (* -0.027777777777777776 (pow 1.0 1/3))) (+ (* (* 0.3333333333333333 (pow (pow 1.0 2) 1/3)) 0) (+ (* 0 (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* (- (* 0.027777777777777776 (pow (pow 1.0 2) 1/3))) 0) (* 0 (pow 1.0 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1.0 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0.5) 1)) (pow 1.0 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 2)) (pow 1.0 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1.0 4))) (* 30 (/ (* 1 (pow (* 2 0.5) 3)) (pow 1.0 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1.0 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1.0 2))) (* -15 (/ (* 1 (pow (* 2 0.5) 1) 1 (pow (* 24 0) 1)) (pow 1.0 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1.0 1)))) 720) into 1/24
* [misc]backup-simplify:  Simplify (+ (* 1/3 1/24) (+ (* 0 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0)))))))) into 1/72
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 2) 2) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 3) 6)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 1/72 1) 1)))) into (* 0.007716049382716049 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1.0 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0.5) 1)) (pow 1.0 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 2)) (pow 1.0 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1.0 4))) (* 30 (/ (* 1 (pow (* 2 0.5) 3)) (pow 1.0 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1.0 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1.0 2))) (* -15 (/ (* 1 (pow (* 2 0.5) 1) 1 (pow (* 24 0) 1)) (pow 1.0 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1.0 1)))) 720) into 1/24
* [misc]backup-simplify:  Simplify (+ (* 1/3 1/24) (+ (* 0 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0)))))))) into 1/72
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 2) 2) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 3) 6)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 1/72 1) 1)))) into (* 0.007716049382716049 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1.0 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0.5) 1)) (pow 1.0 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 2)) (pow 1.0 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1.0 4))) (* 30 (/ (* 1 (pow (* 2 0.5) 3)) (pow 1.0 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1.0 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1.0 2))) (* -15 (/ (* 1 (pow (* 2 0.5) 1) 1 (pow (* 24 0) 1)) (pow 1.0 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1.0 1)))) 720) into 1/24
* [misc]backup-simplify:  Simplify (+ (* 1/3 1/24) (+ (* 0 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0)))))))) into 1/72
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 2) 2) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 3) 6)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 1/72 1) 1)))) into (* 0.007716049382716049 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) (* 0.007716049382716049 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (* 0.16666666666666666 (pow 1.0 1/3)) (* -0.027777777777777776 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (* -0.027777777777777776 (pow 1.0 1/3)) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (* 0.007716049382716049 (pow 1.0 1/3)) (pow 1.0 1/3)))))))) into (* 0.006172839506172839 (pow (pow 1.0 2) 1/3))
* [misc]backup-simplify:  Simplify (+ (* (pow (pow 1.0 2) 1/3) (* 0.007716049382716049 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (* 0.3333333333333333 (pow (pow 1.0 2) 1/3)) (* -0.027777777777777776 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (- (* 0.027777777777777776 (pow (pow 1.0 2) 1/3))) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (* 0.006172839506172839 (pow (pow 1.0 2) 1/3)) (pow 1.0 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1.0 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0.5) 1)) (pow 1.0 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0.5) 2)) (pow 1.0 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1.0 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 3)) (pow 1.0 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1.0 4))) (* 210 (/ (* 1 (pow (* 2 0.5) 2) (pow (* 6 0) 1)) (pow 1.0 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1.0 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1) 1 (pow (* 24 0) 1)) (pow 1.0 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1.0 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1.0 2))) (* -21 (/ (* 1 (pow (* 2 0.5) 1) 1 1 (pow (* 120 0) 1)) (pow 1.0 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1.0 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 1/24) (+ (* 0 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 3) 6) (/ (pow -1/24 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 1/72 1) 1)) (* (/ (pow 0.16666666666666666 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1.0 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0.5) 1)) (pow 1.0 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0.5) 2)) (pow 1.0 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1.0 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 3)) (pow 1.0 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1.0 4))) (* 210 (/ (* 1 (pow (* 2 0.5) 2) (pow (* 6 0) 1)) (pow 1.0 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1.0 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1) 1 (pow (* 24 0) 1)) (pow 1.0 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1.0 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1.0 2))) (* -21 (/ (* 1 (pow (* 2 0.5) 1) 1 1 (pow (* 120 0) 1)) (pow 1.0 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1.0 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 1/24) (+ (* 0 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 3) 6) (/ (pow -1/24 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 1/72 1) 1)) (* (/ (pow 0.16666666666666666 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1.0 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0.5) 1)) (pow 1.0 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0.5) 2)) (pow 1.0 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1.0 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 3)) (pow 1.0 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1.0 4))) (* 210 (/ (* 1 (pow (* 2 0.5) 2) (pow (* 6 0) 1)) (pow 1.0 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1.0 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1) 1 (pow (* 24 0) 1)) (pow 1.0 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1.0 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1.0 2))) (* -21 (/ (* 1 (pow (* 2 0.5) 1) 1 1 (pow (* 120 0) 1)) (pow 1.0 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1.0 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 1/24) (+ (* 0 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 3) 6) (/ (pow -1/24 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 1/72 1) 1)) (* (/ (pow 0.16666666666666666 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) 0) (+ (* 0 (* 0.007716049382716049 (pow 1.0 1/3))) (+ (* (* 0.16666666666666666 (pow 1.0 1/3)) 0) (+ (* 0 (* -0.027777777777777776 (pow 1.0 1/3))) (+ (* (* -0.027777777777777776 (pow 1.0 1/3)) 0) (+ (* 0 (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* (* 0.007716049382716049 (pow 1.0 1/3)) 0) (* 0 (pow 1.0 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow 1.0 2) 1/3) 0) (+ (* 0 (* 0.007716049382716049 (pow 1.0 1/3))) (+ (* (* 0.3333333333333333 (pow (pow 1.0 2) 1/3)) 0) (+ (* 0 (* -0.027777777777777776 (pow 1.0 1/3))) (+ (* (- (* 0.027777777777777776 (pow (pow 1.0 2) 1/3))) 0) (+ (* 0 (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* (* 0.006172839506172839 (pow (pow 1.0 2) 1/3)) 0) (* 0 (pow 1.0 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -5040 (/ (* (pow (* 1 0) 8)) (pow 1.0 8))) (* 20160 (/ (* (pow (* 1 0) 6) (pow (* 2 0.5) 1)) (pow 1.0 7))) (* -25200 (/ (* (pow (* 1 0) 4) (pow (* 2 0.5) 2)) (pow 1.0 6))) (* -6720 (/ (* (pow (* 1 0) 5) 1 (pow (* 6 0) 1)) (pow 1.0 6))) (* 10080 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 3)) (pow 1.0 5))) (* 13440 (/ (* (pow (* 1 0) 3) (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 5))) (* 1680 (/ (* (pow (* 1 0) 4) 1 1 (pow (* 24 0) 1)) (pow 1.0 5))) (* -630 (/ (* 1 (pow (* 2 0.5) 4)) (pow 1.0 4))) (* -5040 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 2) (pow (* 6 0) 1)) (pow 1.0 4))) (* -1680 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 2)) (pow 1.0 4))) (* -2520 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 1) 1 (pow (* 24 0) 1)) (pow 1.0 4))) (* -336 (/ (* (pow (* 1 0) 3) 1 1 1 (pow (* 120 0) 1)) (pow 1.0 4))) (* 560 (/ (* 1 (pow (* 2 0.5) 1) (pow (* 6 0) 2)) (pow 1.0 3))) (* 420 (/ (* 1 (pow (* 2 0.5) 2) 1 (pow (* 24 0) 1)) (pow 1.0 3))) (* 560 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1.0 3))) (* 336 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1) 1 1 (pow (* 120 0) 1)) (pow 1.0 3))) (* 56 (/ (* (pow (* 1 0) 2) 1 1 1 1 (pow (* 720 0) 1)) (pow 1.0 3))) (* -35 (/ (* 1 1 1 (pow (* 24 0) 2)) (pow 1.0 2))) (* -56 (/ (* 1 1 (pow (* 6 0) 1) 1 (pow (* 120 0) 1)) (pow 1.0 2))) (* -28 (/ (* 1 (pow (* 2 0.5) 1) 1 1 1 (pow (* 720 0) 1)) (pow 1.0 2))) (* -8 (/ (* (pow (* 1 0) 1) 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 1 1 1 (pow (* 40320 0) 1)) (pow 1.0 1)))) 40320) into -1/64
* [misc]backup-simplify:  Simplify (+ (* 1/3 -1/64) (+ (* 0 0) (+ (* 0 1/24) (+ (* 0 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0)))))))))) into -1/192
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 8) 40320)) (* (/ (pow 0 6) 720) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 4) 24) (/ (pow -1/24 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 3) 6)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 1/72 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 4) 24)) (* (/ (pow 0.16666666666666666 2) 2) (/ (pow -1/24 1) 1)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 1/72 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow -1/24 2) 2)) (* (/ (pow -1/192 1) 1)))) into (* -0.00257201646090535 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -5040 (/ (* (pow (* 1 0) 8)) (pow 1.0 8))) (* 20160 (/ (* (pow (* 1 0) 6) (pow (* 2 0.5) 1)) (pow 1.0 7))) (* -25200 (/ (* (pow (* 1 0) 4) (pow (* 2 0.5) 2)) (pow 1.0 6))) (* -6720 (/ (* (pow (* 1 0) 5) 1 (pow (* 6 0) 1)) (pow 1.0 6))) (* 10080 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 3)) (pow 1.0 5))) (* 13440 (/ (* (pow (* 1 0) 3) (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 5))) (* 1680 (/ (* (pow (* 1 0) 4) 1 1 (pow (* 24 0) 1)) (pow 1.0 5))) (* -630 (/ (* 1 (pow (* 2 0.5) 4)) (pow 1.0 4))) (* -5040 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 2) (pow (* 6 0) 1)) (pow 1.0 4))) (* -1680 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 2)) (pow 1.0 4))) (* -2520 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 1) 1 (pow (* 24 0) 1)) (pow 1.0 4))) (* -336 (/ (* (pow (* 1 0) 3) 1 1 1 (pow (* 120 0) 1)) (pow 1.0 4))) (* 560 (/ (* 1 (pow (* 2 0.5) 1) (pow (* 6 0) 2)) (pow 1.0 3))) (* 420 (/ (* 1 (pow (* 2 0.5) 2) 1 (pow (* 24 0) 1)) (pow 1.0 3))) (* 560 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1.0 3))) (* 336 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1) 1 1 (pow (* 120 0) 1)) (pow 1.0 3))) (* 56 (/ (* (pow (* 1 0) 2) 1 1 1 1 (pow (* 720 0) 1)) (pow 1.0 3))) (* -35 (/ (* 1 1 1 (pow (* 24 0) 2)) (pow 1.0 2))) (* -56 (/ (* 1 1 (pow (* 6 0) 1) 1 (pow (* 120 0) 1)) (pow 1.0 2))) (* -28 (/ (* 1 (pow (* 2 0.5) 1) 1 1 1 (pow (* 720 0) 1)) (pow 1.0 2))) (* -8 (/ (* (pow (* 1 0) 1) 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 1 1 1 (pow (* 40320 0) 1)) (pow 1.0 1)))) 40320) into -1/64
* [misc]backup-simplify:  Simplify (+ (* 1/3 -1/64) (+ (* 0 0) (+ (* 0 1/24) (+ (* 0 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0)))))))))) into -1/192
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 8) 40320)) (* (/ (pow 0 6) 720) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 4) 24) (/ (pow -1/24 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 3) 6)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 1/72 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 4) 24)) (* (/ (pow 0.16666666666666666 2) 2) (/ (pow -1/24 1) 1)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 1/72 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow -1/24 2) 2)) (* (/ (pow -1/192 1) 1)))) into (* -0.00257201646090535 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -5040 (/ (* (pow (* 1 0) 8)) (pow 1.0 8))) (* 20160 (/ (* (pow (* 1 0) 6) (pow (* 2 0.5) 1)) (pow 1.0 7))) (* -25200 (/ (* (pow (* 1 0) 4) (pow (* 2 0.5) 2)) (pow 1.0 6))) (* -6720 (/ (* (pow (* 1 0) 5) 1 (pow (* 6 0) 1)) (pow 1.0 6))) (* 10080 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 3)) (pow 1.0 5))) (* 13440 (/ (* (pow (* 1 0) 3) (pow (* 2 0.5) 1) (pow (* 6 0) 1)) (pow 1.0 5))) (* 1680 (/ (* (pow (* 1 0) 4) 1 1 (pow (* 24 0) 1)) (pow 1.0 5))) (* -630 (/ (* 1 (pow (* 2 0.5) 4)) (pow 1.0 4))) (* -5040 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 2) (pow (* 6 0) 1)) (pow 1.0 4))) (* -1680 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 2)) (pow 1.0 4))) (* -2520 (/ (* (pow (* 1 0) 2) (pow (* 2 0.5) 1) 1 (pow (* 24 0) 1)) (pow 1.0 4))) (* -336 (/ (* (pow (* 1 0) 3) 1 1 1 (pow (* 120 0) 1)) (pow 1.0 4))) (* 560 (/ (* 1 (pow (* 2 0.5) 1) (pow (* 6 0) 2)) (pow 1.0 3))) (* 420 (/ (* 1 (pow (* 2 0.5) 2) 1 (pow (* 24 0) 1)) (pow 1.0 3))) (* 560 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1.0 3))) (* 336 (/ (* (pow (* 1 0) 1) (pow (* 2 0.5) 1) 1 1 (pow (* 120 0) 1)) (pow 1.0 3))) (* 56 (/ (* (pow (* 1 0) 2) 1 1 1 1 (pow (* 720 0) 1)) (pow 1.0 3))) (* -35 (/ (* 1 1 1 (pow (* 24 0) 2)) (pow 1.0 2))) (* -56 (/ (* 1 1 (pow (* 6 0) 1) 1 (pow (* 120 0) 1)) (pow 1.0 2))) (* -28 (/ (* 1 (pow (* 2 0.5) 1) 1 1 1 (pow (* 720 0) 1)) (pow 1.0 2))) (* -8 (/ (* (pow (* 1 0) 1) 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1.0 2))) (* 1 (/ (* 1 1 1 1 1 1 1 (pow (* 40320 0) 1)) (pow 1.0 1)))) 40320) into -1/64
* [misc]backup-simplify:  Simplify (+ (* 1/3 -1/64) (+ (* 0 0) (+ (* 0 1/24) (+ (* 0 0) (+ (* 0 -1/8) (+ (* 0 0) (+ (* 0 0.5) (+ (* 0 0) (* 0 (log 1.0)))))))))) into -1/192
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 8) 40320)) (* (/ (pow 0 6) 720) (/ (pow 0.16666666666666666 1) 1)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0.16666666666666666 2) 2)) (* (/ (pow 0 4) 24) (/ (pow -1/24 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 3) 6)) (* (/ (pow 0 2) 2) (/ (pow 0.16666666666666666 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 1/72 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow -1/24 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0.16666666666666666 4) 24)) (* (/ (pow 0.16666666666666666 2) 2) (/ (pow -1/24 1) 1)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0.16666666666666666 1) 1) (/ (pow 1/72 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow -1/24 2) 2)) (* (/ (pow -1/192 1) 1)))) into (* -0.00257201646090535 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) (* -0.00257201646090535 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (* 0.16666666666666666 (pow 1.0 1/3)) (* 0.007716049382716049 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (* -0.027777777777777776 (pow 1.0 1/3)) (* -0.027777777777777776 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (* 0.007716049382716049 (pow 1.0 1/3)) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (* -0.00257201646090535 (pow 1.0 1/3)) (pow 1.0 1/3)))))))))) into (- (* 0.0018004115226337453 (pow (pow 1.0 2) 1/3)))
* [misc]backup-simplify:  Simplify (+ (* (pow (pow 1.0 2) 1/3) (* -0.00257201646090535 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (* 0.3333333333333333 (pow (pow 1.0 2) 1/3)) (* 0.007716049382716049 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (- (* 0.027777777777777776 (pow (pow 1.0 2) 1/3))) (* -0.027777777777777776 (pow 1.0 1/3))) (+ (* 0 0) (+ (* (* 0.006172839506172839 (pow (pow 1.0 2) 1/3)) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (- (* 0.0018004115226337453 (pow (pow 1.0 2) 1/3))) (pow 1.0 1/3)))))))))) into (- 1.3010426069826053e-18)
* [misc]backup-simplify:  Simplify (- 1.3010426069826053e-18) into (- 1.3010426069826053e-18)
* [misc]backup-simplify:  Simplify (+ (* (- 1.3010426069826053e-18) (pow x 8)) (+ (* 0.5 (pow x 2)) 1.0)) into (- (+ (* 0.5 (pow x 2)) 1.0) (* 1.3010426069826053e-18 (pow x 8)))
* [misc]approximate:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)) into (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (pow x -2))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (pow x -2))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (pow x -2))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (pow x -2)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (pow x -2)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (pow x -2)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (/ 1 (pow (/ 1 x) 2)))) into (+ (* 0.5 (pow x 2)) 1.0)
* [misc]approximate:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)) into (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (exp (* 2 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (exp (* 2 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (exp (* 2 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ 1 (- x)))))))) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x)))))))
* * * * [misc]progress:  [ 3 / 4 ] generating series at (2)
* [misc]approximate:  Taking taylor expansion of (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (* 2.0 x) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow x 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow x 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow x 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify (log 1.0) into (log 1.0)
* [misc]backup-simplify:  Simplify (* 1/3 (log 1.0)) into (* 1/3 (log 1.0))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log 1.0))) into (pow 1.0 1/3)
* [misc]taylor:  Taking taylor expansion of (* 2.0 x) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (* (pow 1.0 1/3) (pow 1.0 1/3)) into (pow (pow 1.0 2) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow 1.0 2) 1/3) (pow 1.0 1/3)) into 1.0
* [misc]backup-simplify:  Simplify (* 2.0 0) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 1.0 0) into 1.0
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1.0 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log 1.0))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1.0 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log 1.0))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1.0 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log 1.0))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) 0) (* 0 (pow 1.0 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow 1.0 2) 1/3) 0) (* 0 (pow 1.0 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 1) (* 0 0)) into 2.0
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (+ 0 (- 2.0)) into (- 2.0)
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1.0 2))) (* 1 (/ (* 1 (pow (* 2 0.5) 1)) (pow 1.0 1)))) 2) into 0.5
* [misc]backup-simplify:  Simplify (+ (* 1/3 0.5) (+ (* 0 0) (* 0 (log 1.0)))) into 0.16666666666666666
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0.16666666666666666 1) 1)))) into (* 0.16666666666666666 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1.0 2))) (* 1 (/ (* 1 (pow (* 2 0.5) 1)) (pow 1.0 1)))) 2) into 0.5
* [misc]backup-simplify:  Simplify (+ (* 1/3 0.5) (+ (* 0 0) (* 0 (log 1.0)))) into 0.16666666666666666
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0.16666666666666666 1) 1)))) into (* 0.16666666666666666 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1.0 2))) (* 1 (/ (* 1 (pow (* 2 0.5) 1)) (pow 1.0 1)))) 2) into 0.5
* [misc]backup-simplify:  Simplify (+ (* 1/3 0.5) (+ (* 0 0) (* 0 (log 1.0)))) into 0.16666666666666666
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log 1.0))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0.16666666666666666 1) 1)))) into (* 0.16666666666666666 (pow 1.0 1/3))
* [misc]backup-simplify:  Simplify (+ (* (pow 1.0 1/3) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (* 0.16666666666666666 (pow 1.0 1/3)) (pow 1.0 1/3)))) into (* 0.3333333333333333 (pow (pow 1.0 2) 1/3))
* [misc]backup-simplify:  Simplify (+ (* (pow (pow 1.0 2) 1/3) (* 0.16666666666666666 (pow 1.0 1/3))) (+ (* 0 0) (* (* 0.3333333333333333 (pow (pow 1.0 2) 1/3)) (pow 1.0 1/3)))) into 0.5
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 1) (* 0 0))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]backup-simplify:  Simplify (+ (* 0.5 (pow x 2)) (+ (* (- 2.0) x) 1.0)) into (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* [misc]approximate:  Taking taylor expansion of (- (* (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) (* 2.0 (/ 1 x))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (- (* (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) (* 2.0 (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* 2.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (- (* (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) (* 2.0 (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 x) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))) into (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))) into (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* 2.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (* 2.0 1) into 2.0
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (+ 0 (- 2.0)) into (- 2.0)
* [misc]backup-simplify:  Simplify (- 2.0) into (- 2.0)
* [misc]backup-simplify:  Simplify (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)) into (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (pow x -2))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (pow x -2))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (pow x -2))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (pow x -2)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (pow x -2)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (pow x -2)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (/ 1 (pow x 2))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (+ 1.0 (* 0.5 (/ 1 (pow (/ 1 x) 2)))) (* (- 2.0) (/ 1 (/ 1 x)))) into (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* [misc]approximate:  Taking taylor expansion of (- (* (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) (* 2.0 (/ 1 (- x)))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (- (* (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) (* 2.0 (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* 2.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (- (* (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) (* 2.0 (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Rewrote expression to (pow (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0)) in x
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))) into (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))) into (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* 2.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of 2.0 in x
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (* 2.0 -1) into -2.0
* [misc]backup-simplify:  Simplify (- -2.0) into 2.0
* [misc]backup-simplify:  Simplify (+ 0 2.0) into 2.0
* [misc]backup-simplify:  Simplify 2.0 into 2.0
* [misc]backup-simplify:  Simplify (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)) into (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (exp (* 2 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (exp (* 2 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (exp (* 2 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 2) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 2.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ 1 (- x)))))))) (* 2.0 (/ 1 (/ 1 (- x))))) into (- (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) (* 2.0 x))
* * * * [misc]progress:  [ 4 / 4 ] generating series at (2 1 2 1)
* [misc]approximate:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow x 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow x 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow x 2) in x
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 1.0) into 1.0
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* 0.5 1) into 0.5
* [misc]backup-simplify:  Simplify (+ 0.5 0) into 0.5
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 (pow x 2)) 1.0) into (+ (* 0.5 (pow x 2)) 1.0)
* [misc]approximate:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 x) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 x) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 x) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log x))) into (* -2 (log x))
* [misc]backup-simplify:  Simplify (exp (* -2 (log x))) into (pow x -2)
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (pow x -2)) into (/ 0.5 (pow x 2))
* [misc]backup-simplify:  Simplify (+ (/ 0.5 (pow x 2)) 1.0) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (/ 1 (pow x 2)))) into (+ 1.0 (* 0.5 (/ 1 (pow x 2))))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (pow x -2))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (pow x -2)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -2 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -2)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (/ 1 (pow (/ 1 x) 2)))) into (+ (* 0.5 (pow x 2)) 1.0)
* [misc]approximate:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]taylor:  Taking taylor expansion of (+ (* 0.5 (pow (/ 1 (- x)) 2)) 1.0) in x
* [misc]taylor:  Taking taylor expansion of (* 0.5 (pow (/ 1 (- x)) 2)) in x
* [misc]taylor:  Taking taylor expansion of 0.5 in x
* [misc]backup-simplify:  Simplify 0.5 into 0.5
* [misc]taylor:  Taking taylor expansion of (pow (/ 1 (- x)) 2) in x
* [misc]taylor:  Taking taylor expansion of (exp (* 2 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 2 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 2 in x
* [misc]backup-simplify:  Simplify 2 into 2
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 2 (- (log -1) (log x))) into (* 2 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 2 (- (log -1) (log x)))) into (exp (* 2 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of 1.0 in x
* [misc]backup-simplify:  Simplify 1.0 into 1.0
* [misc]backup-simplify:  Simplify (* 0.5 (exp (* 2 (- (log -1) (log x))))) into (* 0.5 (exp (* 2 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* 0.5 (exp (* 2 (- (log -1) (log x))))) 1.0) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x)))))) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log x))))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (* 0 (exp (* 2 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 2 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 2 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0.5 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 2 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ 1 (- x)))))))) into (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x)))))))
* * * [misc]progress:  simplifying candidates
* * * * [misc]progress:  [ 1 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (pow (+ (* 0.5 (pow x 2)) 1.0) (+ 1/3 1/3)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ 1/3 1/3)
* * [misc]simplify:  iters left: 2 (2 enodes)
* [exit]simplify:  Simplified to (+ 1/3 1/3)
* [exit]simplify:  Simplified to (+ 1/3 1/3)
* * * * [misc]progress:  [ 2 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (pow (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (+ 1 1)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ 1 1)
* * [misc]simplify:  iters left: 2 (2 enodes)
* * [misc]simplify:  iters left: 1 (4 enodes)
* [exit]simplify:  Simplified to (+ 1 1)
* [exit]simplify:  Simplified to (+ 1 1)
* * * * [misc]progress:  [ 3 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (pow (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) 1/3) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (43 enodes)
* * [misc]simplify:  iters left: 3 (126 enodes)
* * [misc]simplify:  iters left: 2 (270 enodes)
* [exit]simplify:  Simplified to (* (+ (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))
* [exit]simplify:  Simplified to (* (+ (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))
* * * * [misc]progress:  [ 4 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (pow (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) 1) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (16 enodes)
* * [misc]simplify:  iters left: 3 (18 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 5 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (pow (cbrt (+ (* 0.5 (pow x 2)) 1.0)) 2) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* * * * [misc]progress:  [ 6 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (pow (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (+ 1 1)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ 1 1)
* * [misc]simplify:  iters left: 2 (2 enodes)
* * [misc]simplify:  iters left: 1 (4 enodes)
* [exit]simplify:  Simplified to (+ 1 1)
* [exit]simplify:  Simplified to (+ 1 1)
* * * * [misc]progress:  [ 7 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (pow (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) 1) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* * * * [misc]progress:  [ 8 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (exp (+ (log (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (log (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ (log (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (log (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (17 enodes)
* * [misc]simplify:  iters left: 3 (18 enodes)
* [exit]simplify:  Simplified to (+ (log (cbrt (+ (* (* 0.5 x) x) 1.0))) (log (cbrt (+ (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (+ (log (cbrt (+ (* (* 0.5 x) x) 1.0))) (log (cbrt (+ (* (* 0.5 x) x) 1.0))))
* * * * [misc]progress:  [ 9 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (exp (log (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (log (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (19 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (log (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (+ (* (* x x) 0.5) 1.0))))
* [exit]simplify:  Simplified to (log (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (+ (* (* x x) 0.5) 1.0))))
* * * * [misc]progress:  [ 10 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (log (exp (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (exp (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (19 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (exp (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (+ (* (* x x) 0.5) 1.0))))
* [exit]simplify:  Simplified to (exp (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (+ (* (* x x) 0.5) 1.0))))
* * * * [misc]progress:  [ 11 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (cbrt (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (43 enodes)
* * [misc]simplify:  iters left: 3 (126 enodes)
* * [misc]simplify:  iters left: 2 (270 enodes)
* [exit]simplify:  Simplified to (* (+ (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))
* [exit]simplify:  Simplified to (* (+ (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))
* * * * [misc]progress:  [ 12 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (+ (* (* x x) 0.5) 1.0)))) (cbrt (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (+ (* (* x x) 0.5) 1.0)))))
* [exit]simplify:  Simplified to (* (cbrt (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (+ (* (* x x) 0.5) 1.0)))) (cbrt (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (+ (* (* x x) 0.5) 1.0)))))
* [enter]simplify:  Simplifying (cbrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (17 enodes)
* * [misc]simplify:  iters left: 3 (18 enodes)
* [exit]simplify:  Simplified to (cbrt (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (cbrt (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))))
* * * * [misc]progress:  [ 13 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (cbrt (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (32 enodes)
* * [misc]simplify:  iters left: 3 (39 enodes)
* * [misc]simplify:  iters left: 2 (68 enodes)
* * [misc]simplify:  iters left: 1 (163 enodes)
* [exit]simplify:  Simplified to (* (+ (* (* x x) 0.5) 1.0) (+ (* (* x x) 0.5) 1.0))
* [exit]simplify:  Simplified to (* (+ (* (* x x) 0.5) 1.0) (+ (* (* x x) 0.5) 1.0))
* * * * [misc]progress:  [ 14 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (sqrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (sqrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (sqrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (fabs (cbrt (+ (* (* x x) 0.5) 1.0)))
* [exit]simplify:  Simplified to (fabs (cbrt (+ (* (* x x) 0.5) 1.0)))
* [enter]simplify:  Simplifying (sqrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (fabs (cbrt (+ (* (* x x) 0.5) 1.0)))
* [exit]simplify:  Simplified to (fabs (cbrt (+ (* (* x x) 0.5) 1.0)))
* * * * [misc]progress:  [ 15 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (/ (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (24 enodes)
* * [misc]simplify:  iters left: 4 (53 enodes)
* * [misc]simplify:  iters left: 3 (129 enodes)
* * [misc]simplify:  iters left: 2 (290 enodes)
* * [misc]simplify:  iters left: 1 (387 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))) (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))) (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))))
* [enter]simplify:  Simplifying (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (29 enodes)
* * [misc]simplify:  iters left: 4 (71 enodes)
* * [misc]simplify:  iters left: 3 (173 enodes)
* * [misc]simplify:  iters left: 2 (368 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))))
* * * * [misc]progress:  [ 16 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (/ (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (36 enodes)
* * [misc]simplify:  iters left: 4 (78 enodes)
* * [misc]simplify:  iters left: 3 (195 enodes)
* * [misc]simplify:  iters left: 2 (414 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* x (* 0.5 x)) 3))) (cbrt (- (* (* x (* 0.5 x)) (* x (* 0.5 x))) (* 1.0 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* x (* 0.5 x)) 3))) (cbrt (- (* (* x (* 0.5 x)) (* x (* 0.5 x))) (* 1.0 1.0))))
* [enter]simplify:  Simplifying (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (34 enodes)
* * [misc]simplify:  iters left: 4 (76 enodes)
* * [misc]simplify:  iters left: 3 (178 enodes)
* * [misc]simplify:  iters left: 2 (371 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 1.0) (* x x))) (* (* x (* 0.5 x)) (* x (* 0.5 x))))) (cbrt (- (* x (* 0.5 x)) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 1.0) (* x x))) (* (* x (* 0.5 x)) (* x (* 0.5 x))))) (cbrt (- (* x (* 0.5 x)) 1.0)))
* * * * [misc]progress:  [ 17 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (/ (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (36 enodes)
* * [misc]simplify:  iters left: 4 (78 enodes)
* * [misc]simplify:  iters left: 3 (190 enodes)
* * [misc]simplify:  iters left: 2 (431 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* x (* 0.5 x)) 3) (pow 1.0 3))) (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* x (* 0.5 x)) 3) (pow 1.0 3))) (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))))
* [enter]simplify:  Simplifying (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (34 enodes)
* * [misc]simplify:  iters left: 4 (76 enodes)
* * [misc]simplify:  iters left: 3 (179 enodes)
* * [misc]simplify:  iters left: 2 (371 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 0.5) (* x x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (- (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 0.5) (* x x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (- (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 18 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (/ (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (44 enodes)
* * [misc]simplify:  iters left: 3 (91 enodes)
* * [misc]simplify:  iters left: 2 (204 enodes)
* * [misc]simplify:  iters left: 1 (391 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))) (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))) (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))))
* [enter]simplify:  Simplifying (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (19 enodes)
* [exit]simplify:  Simplified to (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 19 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* 1 (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* * * * [misc]progress:  [ 20 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (19 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (+ (* (* x x) 0.5) 1.0)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (+ (* (* x x) 0.5) 1.0)))))
* * * * [misc]progress:  [ 21 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (sqrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (sqrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (sqrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (19 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (sqrt (+ (* (* x x) 0.5) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (sqrt (+ (* (* x x) 0.5) 1.0))))
* * * * [misc]progress:  [ 22 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt 1)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt 1))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (21 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt 1))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt 1))
* * * * [misc]progress:  [ 23 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (* (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (* (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (23 enodes)
* * [misc]simplify:  iters left: 3 (24 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (+ (* (* 0.5 x) x) 1.0))) (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (cbrt (+ (* (* 0.5 x) x) 1.0)))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (+ (* (* 0.5 x) x) 1.0))) (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (cbrt (+ (* (* 0.5 x) x) 1.0)))))
* * * * [misc]progress:  [ 24 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (sqrt (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (sqrt (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (sqrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (sqrt (cbrt (+ (* (* x x) 0.5) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (sqrt (cbrt (+ (* (* x x) 0.5) 1.0))))
* * * * [misc]progress:  [ 25 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) 1) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) 1)
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (16 enodes)
* * [misc]simplify:  iters left: 4 (22 enodes)
* * [misc]simplify:  iters left: 3 (24 enodes)
* [exit]simplify:  Simplified to (cbrt (+ (* (* 0.5 x) x) 1.0))
* [exit]simplify:  Simplified to (cbrt (+ (* (* 0.5 x) x) 1.0))
* * * * [misc]progress:  [ 26 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (cbrt (+ (* (* x x) 0.5) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (cbrt (+ (* (* x x) 0.5) 1.0))))
* * * * [misc]progress:  [ 27 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (sqrt (+ (* 0.5 (pow x 2)) 1.0))) (* (cbrt (sqrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (sqrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (19 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (* (cbrt (sqrt (+ (* (* x x) 0.5) 1.0))) (cbrt (+ (* (* x x) 0.5) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (sqrt (+ (* (* x x) 0.5) 1.0))) (cbrt (+ (* (* x x) 0.5) 1.0)))
* * * * [misc]progress:  [ 28 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt 1) (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (16 enodes)
* * [misc]simplify:  iters left: 3 (18 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 29 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (cbrt (+ (* (* x x) 0.5) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (cbrt (+ (* (* x x) 0.5) 1.0))))
* * * * [misc]progress:  [ 30 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (sqrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (sqrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (sqrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (sqrt (cbrt (+ (* (* x x) 0.5) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (sqrt (cbrt (+ (* (* x x) 0.5) 1.0))))
* * * * [misc]progress:  [ 31 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* 1 (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (16 enodes)
* * [misc]simplify:  iters left: 3 (18 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 32 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (/ (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (133 enodes)
* * [misc]simplify:  iters left: 2 (289 enodes)
* * [misc]simplify:  iters left: 1 (376 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 33 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (/ (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (25 enodes)
* * [misc]simplify:  iters left: 4 (46 enodes)
* * [misc]simplify:  iters left: 3 (93 enodes)
* * [misc]simplify:  iters left: 2 (186 enodes)
* * [misc]simplify:  iters left: 1 (378 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ 1.0 (* (* 0.5 x) x)))) (cbrt (+ 1.0 (* (* 0.5 x) x))))
* [exit]simplify:  Simplified to (* (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ 1.0 (* (* 0.5 x) x)))) (cbrt (+ 1.0 (* (* 0.5 x) x))))
* * * * [misc]progress:  [ 34 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (/ (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (140 enodes)
* * [misc]simplify:  iters left: 2 (310 enodes)
* * [misc]simplify:  iters left: 1 (439 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ 1.0 (* (* 0.5 x) x))) (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))))
* [exit]simplify:  Simplified to (* (cbrt (+ 1.0 (* (* 0.5 x) x))) (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))))
* * * * [misc]progress:  [ 35 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (/ (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (25 enodes)
* * [misc]simplify:  iters left: 4 (46 enodes)
* * [misc]simplify:  iters left: 3 (93 enodes)
* * [misc]simplify:  iters left: 2 (193 enodes)
* * [misc]simplify:  iters left: 1 (365 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0))))
* * * * [misc]progress:  [ 36 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* * * * [misc]progress:  [ 37 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (+ (* 0.5 (pow x 2)) 1.0) (+ (+ 1/3 1/3) 1/3)) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ (+ 1/3 1/3) 1/3)
* * [misc]simplify:  iters left: 4 (3 enodes)
* * [misc]simplify:  iters left: 3 (4 enodes)
* [exit]simplify:  Simplified to (+ (+ 1/3 1/3) 1/3)
* [exit]simplify:  Simplified to (+ (+ 1/3 1/3) 1/3)
* * * * [misc]progress:  [ 38 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (+ (+ 1 1) 1)) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ (+ 1 1) 1)
* * [misc]simplify:  iters left: 4 (3 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* * * * [misc]progress:  [ 39 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (+ 2 1)) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ 2 1)
* * [misc]simplify:  iters left: 2 (3 enodes)
* * [misc]simplify:  iters left: 1 (6 enodes)
* [exit]simplify:  Simplified to (+ 1 2)
* [exit]simplify:  Simplified to (+ 1 2)
* * * * [misc]progress:  [ 40 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (+ (+ 1 1) 1)) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ (+ 1 1) 1)
* * [misc]simplify:  iters left: 4 (3 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* * * * [misc]progress:  [ 41 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (* (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (+ (* 0.5 (pow x 2)) 1.0)) 1/3) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (25 enodes)
* * [misc]simplify:  iters left: 4 (99 enodes)
* * [misc]simplify:  iters left: 3 (383 enodes)
* [exit]simplify:  Simplified to (pow (+ (* x (* 0.5 x)) 1.0) 3)
* [exit]simplify:  Simplified to (pow (+ (* x (* 0.5 x)) 1.0) 3)
* * * * [misc]progress:  [ 42 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) 1) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (20 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* [exit]simplify:  Simplified to (+ (* (* 0.5 x) x) 1.0)
* [exit]simplify:  Simplified to (+ (* (* 0.5 x) x) 1.0)
* * * * [misc]progress:  [ 43 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) 1) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (20 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* [exit]simplify:  Simplified to (+ (* (* 0.5 x) x) 1.0)
* [exit]simplify:  Simplified to (+ (* (* 0.5 x) x) 1.0)
* * * * [misc]progress:  [ 44 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (cbrt (+ (* 0.5 (pow x 2)) 1.0)) 3) (* 2.0 x)))>
* * * * [misc]progress:  [ 45 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (+ (+ 1 1) 1)) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ (+ 1 1) 1)
* * [misc]simplify:  iters left: 4 (3 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* * * * [misc]progress:  [ 46 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (+ 2 1)) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ 2 1)
* * [misc]simplify:  iters left: 2 (3 enodes)
* * [misc]simplify:  iters left: 1 (6 enodes)
* [exit]simplify:  Simplified to (+ 1 2)
* [exit]simplify:  Simplified to (+ 1 2)
* * * * [misc]progress:  [ 47 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (+ (+ 1 1) 1)) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ (+ 1 1) 1)
* * [misc]simplify:  iters left: 4 (3 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* * * * [misc]progress:  [ 48 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (pow (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) 1) (* 2.0 x)))>
* * * * [misc]progress:  [ 49 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (exp (+ (+ (log (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (log (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (log (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ (+ (log (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (log (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (log (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (19 enodes)
* * [misc]simplify:  iters left: 3 (20 enodes)
* [exit]simplify:  Simplified to (+ (log (cbrt (+ (* (* x x) 0.5) 1.0))) (+ (log (cbrt (+ (* (* x x) 0.5) 1.0))) (log (cbrt (+ (* (* x x) 0.5) 1.0)))))
* [exit]simplify:  Simplified to (+ (log (cbrt (+ (* (* x x) 0.5) 1.0))) (+ (log (cbrt (+ (* (* x x) 0.5) 1.0))) (log (cbrt (+ (* (* x x) 0.5) 1.0)))))
* * * * [misc]progress:  [ 50 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (exp (+ (log (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (log (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ (log (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (log (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (21 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* [exit]simplify:  Simplified to (+ (log (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))) (log (cbrt (+ (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (+ (log (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))) (log (cbrt (+ (* (* 0.5 x) x) 1.0))))
* * * * [misc]progress:  [ 51 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (exp (log (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (log (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (26 enodes)
* * [misc]simplify:  iters left: 3 (28 enodes)
* * [misc]simplify:  iters left: 2 (29 enodes)
* [exit]simplify:  Simplified to (log (+ (* x (* 0.5 x)) 1.0))
* [exit]simplify:  Simplified to (log (+ (* x (* 0.5 x)) 1.0))
* * * * [misc]progress:  [ 52 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (log (exp (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (exp (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (25 enodes)
* * [misc]simplify:  iters left: 3 (26 enodes)
* * [misc]simplify:  iters left: 2 (30 enodes)
* * [misc]simplify:  iters left: 1 (39 enodes)
* [exit]simplify:  Simplified to (* (pow (exp 0.5) (* x x)) (exp 1.0))
* [exit]simplify:  Simplified to (* (pow (exp 0.5) (* x x)) (exp 1.0))
* * * * [misc]progress:  [ 53 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (cbrt (* (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (25 enodes)
* * [misc]simplify:  iters left: 4 (99 enodes)
* * [misc]simplify:  iters left: 3 (383 enodes)
* [exit]simplify:  Simplified to (pow (+ (* x (* 0.5 x)) 1.0) 3)
* [exit]simplify:  Simplified to (pow (+ (* x (* 0.5 x)) 1.0) 3)
* * * * [misc]progress:  [ 54 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (cbrt (* (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (31 enodes)
* * [misc]simplify:  iters left: 4 (95 enodes)
* * [misc]simplify:  iters left: 3 (300 enodes)
* [exit]simplify:  Simplified to (pow (+ (* (* 0.5 x) x) 1.0) 3)
* [exit]simplify:  Simplified to (pow (+ (* (* 0.5 x) x) 1.0) 3)
* * * * [misc]progress:  [ 55 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (16 enodes)
* * [misc]simplify:  iters left: 4 (22 enodes)
* * [misc]simplify:  iters left: 3 (28 enodes)
* * [misc]simplify:  iters left: 2 (36 enodes)
* * [misc]simplify:  iters left: 1 (39 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [enter]simplify:  Simplifying (cbrt (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (21 enodes)
* * [misc]simplify:  iters left: 3 (26 enodes)
* * [misc]simplify:  iters left: 2 (33 enodes)
* * [misc]simplify:  iters left: 1 (37 enodes)
* [exit]simplify:  Simplified to (cbrt (+ (* (* 0.5 x) x) 1.0))
* [exit]simplify:  Simplified to (cbrt (+ (* (* 0.5 x) x) 1.0))
* * * * [misc]progress:  [ 56 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (cbrt (* (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (23 enodes)
* * [misc]simplify:  iters left: 4 (44 enodes)
* * [misc]simplify:  iters left: 3 (64 enodes)
* * [misc]simplify:  iters left: 2 (120 enodes)
* [exit]simplify:  Simplified to (pow (+ (* (* x x) 0.5) 1.0) 3)
* [exit]simplify:  Simplified to (pow (+ (* (* x x) 0.5) 1.0) 3)
* * * * [misc]progress:  [ 57 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (sqrt (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (sqrt (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (sqrt (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (21 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* (* 0.5 x) x) 1.0))
* [exit]simplify:  Simplified to (sqrt (+ (* (* 0.5 x) x) 1.0))
* [enter]simplify:  Simplifying (sqrt (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (21 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* (* 0.5 x) x) 1.0))
* [exit]simplify:  Simplified to (sqrt (+ (* (* 0.5 x) x) 1.0))
* * * * [misc]progress:  [ 58 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (* (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (26 enodes)
* * [misc]simplify:  iters left: 4 (56 enodes)
* * [misc]simplify:  iters left: 3 (141 enodes)
* * [misc]simplify:  iters left: 2 (323 enodes)
* * [misc]simplify:  iters left: 1 (479 enodes)
* [exit]simplify:  Simplified to (+ (pow 1.0 3) (pow (* x (* 0.5 x)) 3))
* [exit]simplify:  Simplified to (+ (pow 1.0 3) (pow (* x (* 0.5 x)) 3))
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (31 enodes)
* * [misc]simplify:  iters left: 4 (75 enodes)
* * [misc]simplify:  iters left: 3 (178 enodes)
* * [misc]simplify:  iters left: 2 (376 enodes)
* [exit]simplify:  Simplified to (+ (- (* 1.0 1.0) (* (* x x) (* 0.5 1.0))) (* (* x (* 0.5 x)) (* x (* 0.5 x))))
* [exit]simplify:  Simplified to (+ (- (* 1.0 1.0) (* (* x x) (* 0.5 1.0))) (* (* x (* 0.5 x)) (* x (* 0.5 x))))
* * * * [misc]progress:  [ 59 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (* (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (39 enodes)
* * [misc]simplify:  iters left: 4 (83 enodes)
* * [misc]simplify:  iters left: 3 (195 enodes)
* * [misc]simplify:  iters left: 2 (436 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3))) (cbrt (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3)))) (cbrt (* (- (* (* x x) 0.5) 1.0) (+ 1.0 (* (* x x) 0.5)))))
* [exit]simplify:  Simplified to (* (* (cbrt (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3))) (cbrt (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3)))) (cbrt (* (- (* (* x x) 0.5) 1.0) (+ 1.0 (* (* x x) 0.5)))))
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (37 enodes)
* * [misc]simplify:  iters left: 4 (81 enodes)
* * [misc]simplify:  iters left: 3 (184 enodes)
* * [misc]simplify:  iters left: 2 (376 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* (* 0.5 x) x) (* (* 0.5 x) x)) (- (* (* 0.5 1.0) (* x x)) (* 1.0 1.0))))) (cbrt (- (* (* (* 0.5 x) x) (* (* 0.5 x) x)) (- (* (* 0.5 1.0) (* x x)) (* 1.0 1.0)))))
* [exit]simplify:  Simplified to (* (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* (* 0.5 x) x) (* (* 0.5 x) x)) (- (* (* 0.5 1.0) (* x x)) (* 1.0 1.0))))) (cbrt (- (* (* (* 0.5 x) x) (* (* 0.5 x) x)) (- (* (* 0.5 1.0) (* x x)) (* 1.0 1.0)))))
* * * * [misc]progress:  [ 60 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (* (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (38 enodes)
* * [misc]simplify:  iters left: 4 (82 enodes)
* * [misc]simplify:  iters left: 3 (196 enodes)
* * [misc]simplify:  iters left: 2 (430 enodes)
* [exit]simplify:  Simplified to (* (cbrt (- (* (* (* x x) 0.5) (* (* x x) 0.5)) (* 1.0 1.0))) (* (cbrt (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3))) (cbrt (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3)))))
* [exit]simplify:  Simplified to (* (cbrt (- (* (* (* x x) 0.5) (* (* x x) 0.5)) (* 1.0 1.0))) (* (cbrt (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3))) (cbrt (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3)))))
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (37 enodes)
* * [misc]simplify:  iters left: 4 (82 enodes)
* * [misc]simplify:  iters left: 3 (184 enodes)
* * [misc]simplify:  iters left: 2 (375 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (- (* (* (* 0.5 x) x) (* (* 0.5 x) x)) (- (* (* 0.5 1.0) (* x x)) (* 1.0 1.0)))) (cbrt (- (* (* 0.5 x) x) 1.0))) (cbrt (- (* (* (* 0.5 x) x) (* (* 0.5 x) x)) (- (* (* 0.5 1.0) (* x x)) (* 1.0 1.0)))))
* [exit]simplify:  Simplified to (* (* (cbrt (- (* (* (* 0.5 x) x) (* (* 0.5 x) x)) (- (* (* 0.5 1.0) (* x x)) (* 1.0 1.0)))) (cbrt (- (* (* 0.5 x) x) 1.0))) (cbrt (- (* (* (* 0.5 x) x) (* (* 0.5 x) x)) (- (* (* 0.5 1.0) (* x x)) (* 1.0 1.0)))))
* * * * [misc]progress:  [ 61 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (* (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (40 enodes)
* * [misc]simplify:  iters left: 4 (83 enodes)
* * [misc]simplify:  iters left: 3 (195 enodes)
* * [misc]simplify:  iters left: 2 (434 enodes)
* [exit]simplify:  Simplified to (* (cbrt (- (* (* (* x x) 0.5) (* (* x x) 0.5)) (* 1.0 1.0))) (* (cbrt (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3))) (cbrt (- (* (* (* x x) 0.5) (* (* x x) 0.5)) (* 1.0 1.0)))))
* [exit]simplify:  Simplified to (* (cbrt (- (* (* (* x x) 0.5) (* (* x x) 0.5)) (* 1.0 1.0))) (* (cbrt (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3))) (cbrt (- (* (* (* x x) 0.5) (* (* x x) 0.5)) (* 1.0 1.0)))))
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (38 enodes)
* * [misc]simplify:  iters left: 4 (81 enodes)
* * [misc]simplify:  iters left: 3 (183 enodes)
* * [misc]simplify:  iters left: 2 (374 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* 0.5 x) x) 1.0))) (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 1.0) (* x x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))))
* [exit]simplify:  Simplified to (* (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* 0.5 x) x) 1.0))) (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 1.0) (* x x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))))
* * * * [misc]progress:  [ 62 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (* (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (40 enodes)
* * [misc]simplify:  iters left: 4 (83 enodes)
* * [misc]simplify:  iters left: 3 (195 enodes)
* * [misc]simplify:  iters left: 2 (418 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* (* x x) 0.5) 3) (pow 1.0 3))) (* (cbrt (+ (pow (* (* x x) 0.5) 3) (pow 1.0 3))) (cbrt (* (- (* (* x x) 0.5) 1.0) (+ (* (* x x) 0.5) 1.0)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* (* x x) 0.5) 3) (pow 1.0 3))) (* (cbrt (+ (pow (* (* x x) 0.5) 3) (pow 1.0 3))) (cbrt (* (- (* (* x x) 0.5) 1.0) (+ (* (* x x) 0.5) 1.0)))))
* [enter]simplify:  Simplifying (* (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (38 enodes)
* * [misc]simplify:  iters left: 4 (81 enodes)
* * [misc]simplify:  iters left: 3 (183 enodes)
* * [misc]simplify:  iters left: 2 (388 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 x) (* 0.5 x))) (* (* (* x x) 0.5) (* (* x x) 0.5)))) (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 x) (* 0.5 x))) (* (* (* x x) 0.5) (* (* x x) 0.5)))) (cbrt (- (* (* x x) 0.5) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 x) (* 0.5 x))) (* (* (* x x) 0.5) (* (* x x) 0.5)))) (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 x) (* 0.5 x))) (* (* (* x x) 0.5) (* (* x x) 0.5)))) (cbrt (- (* (* x x) 0.5) 1.0))))
* * * * [misc]progress:  [ 63 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (* (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (38 enodes)
* * [misc]simplify:  iters left: 4 (82 enodes)
* * [misc]simplify:  iters left: 3 (193 enodes)
* * [misc]simplify:  iters left: 2 (456 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))) (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0)))) (cbrt (+ (pow (* x (* 0.5 x)) 3) (pow 1.0 3))))
* [exit]simplify:  Simplified to (* (* (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))) (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0)))) (cbrt (+ (pow (* x (* 0.5 x)) 3) (pow 1.0 3))))
* [enter]simplify:  Simplifying (* (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (37 enodes)
* * [misc]simplify:  iters left: 4 (82 enodes)
* * [misc]simplify:  iters left: 3 (185 enodes)
* * [misc]simplify:  iters left: 2 (383 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 x) (* 0.5 x))) (* (* x (* 0.5 x)) (* x (* 0.5 x))))) (* (cbrt (- (* x (* 0.5 x)) 1.0)) (cbrt (- (* x (* 0.5 x)) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 x) (* 0.5 x))) (* (* x (* 0.5 x)) (* x (* 0.5 x))))) (* (cbrt (- (* x (* 0.5 x)) 1.0)) (cbrt (- (* x (* 0.5 x)) 1.0))))
* * * * [misc]progress:  [ 64 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (* (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (39 enodes)
* * [misc]simplify:  iters left: 4 (83 enodes)
* * [misc]simplify:  iters left: 3 (196 enodes)
* * [misc]simplify:  iters left: 2 (436 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))) (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0)))) (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (* (* (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))) (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0)))) (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0))))
* [enter]simplify:  Simplifying (* (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (37 enodes)
* * [misc]simplify:  iters left: 4 (81 enodes)
* * [misc]simplify:  iters left: 3 (184 enodes)
* * [misc]simplify:  iters left: 2 (378 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* 0.5 x) x) 1.0))))
* * * * [misc]progress:  [ 65 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (* (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (24 enodes)
* * [misc]simplify:  iters left: 4 (48 enodes)
* * [misc]simplify:  iters left: 3 (95 enodes)
* * [misc]simplify:  iters left: 2 (207 enodes)
* * [misc]simplify:  iters left: 1 (380 enodes)
* [exit]simplify:  Simplified to (* (+ (* x (* 0.5 x)) 1.0) (- (* x (* 0.5 x)) 1.0))
* [exit]simplify:  Simplified to (* (+ (* x (* 0.5 x)) 1.0) (- (* x (* 0.5 x)) 1.0))
* [enter]simplify:  Simplifying (* (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (22 enodes)
* * [misc]simplify:  iters left: 3 (23 enodes)
* [exit]simplify:  Simplified to (- (* (* 0.5 x) x) 1.0)
* [exit]simplify:  Simplified to (- (* (* 0.5 x) x) 1.0)
* * * * [misc]progress:  [ 66 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (32 enodes)
* * [misc]simplify:  iters left: 4 (62 enodes)
* * [misc]simplify:  iters left: 3 (145 enodes)
* * [misc]simplify:  iters left: 2 (320 enodes)
* * [misc]simplify:  iters left: 1 (494 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))) (cbrt (+ (* (* 0.5 x) x) 1.0))) (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))))
* [exit]simplify:  Simplified to (* (* (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))) (cbrt (+ (* (* 0.5 x) x) 1.0))) (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))))
* [enter]simplify:  Simplifying (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (29 enodes)
* * [misc]simplify:  iters left: 4 (71 enodes)
* * [misc]simplify:  iters left: 3 (173 enodes)
* * [misc]simplify:  iters left: 2 (368 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))))
* * * * [misc]progress:  [ 67 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (19 enodes)
* * [misc]simplify:  iters left: 5 (42 enodes)
* * [misc]simplify:  iters left: 4 (89 enodes)
* * [misc]simplify:  iters left: 3 (204 enodes)
* * [misc]simplify:  iters left: 2 (440 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* (* x x) 0.5) 3) (pow 1.0 3))) (* (cbrt (* (+ 1.0 (* (* x x) 0.5)) (- (* (* x x) 0.5) 1.0))) (cbrt (+ 1.0 (* (* x x) 0.5)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* (* x x) 0.5) 3) (pow 1.0 3))) (* (cbrt (* (+ 1.0 (* (* x x) 0.5)) (- (* (* x x) 0.5) 1.0))) (cbrt (+ 1.0 (* (* x x) 0.5)))))
* [enter]simplify:  Simplifying (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (34 enodes)
* * [misc]simplify:  iters left: 4 (76 enodes)
* * [misc]simplify:  iters left: 3 (178 enodes)
* * [misc]simplify:  iters left: 2 (371 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 1.0) (* x x))) (* (* x (* 0.5 x)) (* x (* 0.5 x))))) (cbrt (- (* x (* 0.5 x)) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 1.0) (* x x))) (* (* x (* 0.5 x)) (* x (* 0.5 x))))) (cbrt (- (* x (* 0.5 x)) 1.0)))
* * * * [misc]progress:  [ 68 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (19 enodes)
* * [misc]simplify:  iters left: 5 (42 enodes)
* * [misc]simplify:  iters left: 4 (89 enodes)
* * [misc]simplify:  iters left: 3 (202 enodes)
* * [misc]simplify:  iters left: 2 (437 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))) (* (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0))) (cbrt (+ (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))) (* (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0))) (cbrt (+ (* (* 0.5 x) x) 1.0))))
* [enter]simplify:  Simplifying (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (34 enodes)
* * [misc]simplify:  iters left: 4 (76 enodes)
* * [misc]simplify:  iters left: 3 (179 enodes)
* * [misc]simplify:  iters left: 2 (371 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 0.5) (* x x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (- (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 0.5) (* x x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (- (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 69 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (29 enodes)
* * [misc]simplify:  iters left: 4 (51 enodes)
* * [misc]simplify:  iters left: 3 (98 enodes)
* * [misc]simplify:  iters left: 2 (187 enodes)
* * [misc]simplify:  iters left: 1 (349 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (* (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0))) (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (* (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0))) (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0)))))
* [enter]simplify:  Simplifying (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (19 enodes)
* [exit]simplify:  Simplified to (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 70 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (30 enodes)
* * [misc]simplify:  iters left: 4 (61 enodes)
* * [misc]simplify:  iters left: 3 (142 enodes)
* * [misc]simplify:  iters left: 2 (313 enodes)
* * [misc]simplify:  iters left: 1 (424 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (+ 1.0 (* (* 0.5 x) x))) (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3)))) (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))))
* [exit]simplify:  Simplified to (* (* (cbrt (+ 1.0 (* (* 0.5 x) x))) (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3)))) (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))))
* [enter]simplify:  Simplifying (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (29 enodes)
* * [misc]simplify:  iters left: 4 (71 enodes)
* * [misc]simplify:  iters left: 3 (173 enodes)
* * [misc]simplify:  iters left: 2 (368 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 x) (* 1.0 x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))))
* * * * [misc]progress:  [ 71 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (19 enodes)
* * [misc]simplify:  iters left: 5 (42 enodes)
* * [misc]simplify:  iters left: 4 (89 enodes)
* * [misc]simplify:  iters left: 3 (207 enodes)
* * [misc]simplify:  iters left: 2 (435 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* x (* 0.5 x)) 3))) (* (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ 1.0 (* x (* 0.5 x))))) (cbrt (+ 1.0 (* x (* 0.5 x))))))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* x (* 0.5 x)) 3))) (* (cbrt (* (- (* x (* 0.5 x)) 1.0) (+ 1.0 (* x (* 0.5 x))))) (cbrt (+ 1.0 (* x (* 0.5 x))))))
* [enter]simplify:  Simplifying (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (34 enodes)
* * [misc]simplify:  iters left: 4 (76 enodes)
* * [misc]simplify:  iters left: 3 (178 enodes)
* * [misc]simplify:  iters left: 2 (371 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 1.0) (* x x))) (* (* x (* 0.5 x)) (* x (* 0.5 x))))) (cbrt (- (* x (* 0.5 x)) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 0.5 1.0) (* x x))) (* (* x (* 0.5 x)) (* x (* 0.5 x))))) (cbrt (- (* x (* 0.5 x)) 1.0)))
* * * * [misc]progress:  [ 72 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (19 enodes)
* * [misc]simplify:  iters left: 5 (42 enodes)
* * [misc]simplify:  iters left: 4 (89 enodes)
* * [misc]simplify:  iters left: 3 (202 enodes)
* * [misc]simplify:  iters left: 2 (451 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))) (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))) (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0)))))
* [enter]simplify:  Simplifying (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (34 enodes)
* * [misc]simplify:  iters left: 4 (76 enodes)
* * [misc]simplify:  iters left: 3 (179 enodes)
* * [misc]simplify:  iters left: 2 (371 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 0.5) (* x x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (- (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (- (* 1.0 1.0) (* (* 1.0 0.5) (* x x))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))) (cbrt (- (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 73 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (52 enodes)
* * [misc]simplify:  iters left: 3 (99 enodes)
* * [misc]simplify:  iters left: 2 (198 enodes)
* * [misc]simplify:  iters left: 1 (369 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (* (cbrt (* (+ (* (* x x) 0.5) 1.0) (- (* (* x x) 0.5) 1.0))) (cbrt (* (+ (* (* x x) 0.5) 1.0) (- (* (* x x) 0.5) 1.0)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* x x) 0.5) 1.0)) (* (cbrt (* (+ (* (* x x) 0.5) 1.0) (- (* (* x x) 0.5) 1.0))) (cbrt (* (+ (* (* x x) 0.5) 1.0) (- (* (* x x) 0.5) 1.0)))))
* [enter]simplify:  Simplifying (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (19 enodes)
* [exit]simplify:  Simplified to (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (- (* (* 0.5 x) x) 1.0)) (cbrt (- (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 74 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* 1 (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* * * * [misc]progress:  [ 75 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (23 enodes)
* * [misc]simplify:  iters left: 3 (25 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))) (cbrt (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))))
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))) (cbrt (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))))
* * * * [misc]progress:  [ 76 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (sqrt (+ (* 0.5 (pow x 2)) 1.0)))) (cbrt (sqrt (+ (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (sqrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (24 enodes)
* * [misc]simplify:  iters left: 3 (26 enodes)
* [exit]simplify:  Simplified to (* (cbrt (sqrt (+ (* (* 0.5 x) x) 1.0))) (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (sqrt (+ (* (* 0.5 x) x) 1.0))) (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))))
* * * * [misc]progress:  [ 77 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt 1)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt 1))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (26 enodes)
* * [misc]simplify:  iters left: 3 (28 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (* (cbrt 1) (cbrt (+ (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (* (cbrt 1) (cbrt (+ (* (* 0.5 x) x) 1.0))))
* * * * [misc]progress:  [ 78 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (cbrt (+ (* 0.5 (pow x 2)) 1.0)))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (31 enodes)
* * [misc]simplify:  iters left: 3 (37 enodes)
* * [misc]simplify:  iters left: 2 (39 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (cbrt (+ (* (* x x) 0.5) 1.0)))) (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (cbrt (+ (* (* x x) 0.5) 1.0)))))
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (cbrt (+ (* (* x x) 0.5) 1.0)))) (* (cbrt (+ (* (* x x) 0.5) 1.0)) (cbrt (cbrt (+ (* (* x x) 0.5) 1.0)))))
* * * * [misc]progress:  [ 79 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (sqrt (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (sqrt (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (sqrt (cbrt (+ (* 0.5 (pow x 2)) 1.0))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (23 enodes)
* * [misc]simplify:  iters left: 3 (25 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))) (sqrt (cbrt (+ (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))) (sqrt (cbrt (+ (* (* 0.5 x) x) 1.0))))
* * * * [misc]progress:  [ 80 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) 1) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) 1)
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (25 enodes)
* * [misc]simplify:  iters left: 3 (30 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 81 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (16 enodes)
* * [misc]simplify:  iters left: 3 (18 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 82 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (31 enodes)
* * [misc]simplify:  iters left: 4 (62 enodes)
* * [misc]simplify:  iters left: 3 (147 enodes)
* * [misc]simplify:  iters left: 2 (348 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))) (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))) (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))))
* * * * [misc]progress:  [ 83 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (51 enodes)
* * [misc]simplify:  iters left: 3 (99 enodes)
* * [misc]simplify:  iters left: 2 (190 enodes)
* * [misc]simplify:  iters left: 1 (356 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))) (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))) (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0))))
* * * * [misc]progress:  [ 84 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (31 enodes)
* * [misc]simplify:  iters left: 4 (62 enodes)
* * [misc]simplify:  iters left: 3 (145 enodes)
* * [misc]simplify:  iters left: 2 (328 enodes)
* * [misc]simplify:  iters left: 1 (466 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))) (* (cbrt (+ 1.0 (* (* 0.5 x) x))) (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))) (* (cbrt (+ 1.0 (* (* 0.5 x) x))) (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3)))))
* * * * [misc]progress:  [ 85 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (19 enodes)
* * [misc]simplify:  iters left: 5 (42 enodes)
* * [misc]simplify:  iters left: 4 (89 enodes)
* * [misc]simplify:  iters left: 3 (203 enodes)
* * [misc]simplify:  iters left: 2 (461 enodes)
* [exit]simplify:  Simplified to (* (cbrt (- (* (* x (* 0.5 x)) (* x (* 0.5 x))) (* 1.0 1.0))) (* (cbrt (+ 1.0 (* x (* 0.5 x)))) (cbrt (+ (pow 1.0 3) (pow (* x (* 0.5 x)) 3)))))
* [exit]simplify:  Simplified to (* (cbrt (- (* (* x (* 0.5 x)) (* x (* 0.5 x))) (* 1.0 1.0))) (* (cbrt (+ 1.0 (* x (* 0.5 x)))) (cbrt (+ (pow 1.0 3) (pow (* x (* 0.5 x)) 3)))))
* * * * [misc]progress:  [ 86 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (19 enodes)
* * [misc]simplify:  iters left: 5 (42 enodes)
* * [misc]simplify:  iters left: 4 (89 enodes)
* * [misc]simplify:  iters left: 3 (203 enodes)
* * [misc]simplify:  iters left: 2 (433 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))) (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0)))) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (* (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))) (cbrt (* (- (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0)))) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* * * * [misc]progress:  [ 87 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (cbrt (- (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (51 enodes)
* * [misc]simplify:  iters left: 3 (99 enodes)
* * [misc]simplify:  iters left: 2 (192 enodes)
* * [misc]simplify:  iters left: 1 (354 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (* (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0))) (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (* (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0))) (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0)))))
* * * * [misc]progress:  [ 88 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (30 enodes)
* * [misc]simplify:  iters left: 4 (61 enodes)
* * [misc]simplify:  iters left: 3 (147 enodes)
* * [misc]simplify:  iters left: 2 (325 enodes)
* * [misc]simplify:  iters left: 1 (451 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))) (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))))
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))) (cbrt (+ (pow (* (* 0.5 x) x) 3) (pow 1.0 3))))
* * * * [misc]progress:  [ 89 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (52 enodes)
* * [misc]simplify:  iters left: 3 (99 enodes)
* * [misc]simplify:  iters left: 2 (207 enodes)
* * [misc]simplify:  iters left: 1 (410 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* (- (* (* x x) 0.5) 1.0) (+ 1.0 (* (* x x) 0.5)))) (* (cbrt (+ 1.0 (* (* x x) 0.5))) (cbrt (+ 1.0 (* (* x x) 0.5)))))
* [exit]simplify:  Simplified to (* (cbrt (* (- (* (* x x) 0.5) 1.0) (+ 1.0 (* (* x x) 0.5)))) (* (cbrt (+ 1.0 (* (* x x) 0.5))) (cbrt (+ 1.0 (* (* x x) 0.5)))))
* * * * [misc]progress:  [ 90 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (32 enodes)
* * [misc]simplify:  iters left: 4 (62 enodes)
* * [misc]simplify:  iters left: 3 (144 enodes)
* * [misc]simplify:  iters left: 2 (331 enodes)
* * [misc]simplify:  iters left: 1 (478 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))) (* (cbrt (+ 1.0 (* (* 0.5 x) x))) (cbrt (+ 1.0 (* (* 0.5 x) x)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (pow 1.0 3) (pow (* (* 0.5 x) x) 3))) (* (cbrt (+ 1.0 (* (* 0.5 x) x))) (cbrt (+ 1.0 (* (* 0.5 x) x)))))
* * * * [misc]progress:  [ 91 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (/ (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (- (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (cbrt (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (29 enodes)
* * [misc]simplify:  iters left: 4 (51 enodes)
* * [misc]simplify:  iters left: 3 (98 enodes)
* * [misc]simplify:  iters left: 2 (191 enodes)
* * [misc]simplify:  iters left: 1 (353 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))) (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0))))
* [exit]simplify:  Simplified to (* (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0))) (cbrt (* (+ (* (* 0.5 x) x) 1.0) (- (* (* 0.5 x) x) 1.0))))
* * * * [misc]progress:  [ 92 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* * * * [misc]progress:  [ 93 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (log (/ (exp (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (exp (* 2.0 x)))))>
* [enter]simplify:  Simplifying (/ (exp (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (exp (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (26 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (46 enodes)
* * [misc]simplify:  iters left: 2 (72 enodes)
* * [misc]simplify:  iters left: 1 (120 enodes)
* [exit]simplify:  Simplified to (exp (+ (- 1.0 (* x 2.0)) (* x (* 0.5 x))))
* [exit]simplify:  Simplified to (exp (+ (- 1.0 (* x 2.0)) (* x (* 0.5 x))))
* * * * [misc]progress:  [ 94 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (pow (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)) 1))>
* * * * [misc]progress:  [ 95 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (exp (log (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))))>
* [enter]simplify:  Simplifying (log (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (34 enodes)
* * [misc]simplify:  iters left: 3 (35 enodes)
* * [misc]simplify:  iters left: 2 (47 enodes)
* * [misc]simplify:  iters left: 1 (55 enodes)
* [exit]simplify:  Simplified to (log (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* [exit]simplify:  Simplified to (log (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* * * * [misc]progress:  [ 96 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (log (exp (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))))>
* [enter]simplify:  Simplifying (exp (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (24 enodes)
* * [misc]simplify:  iters left: 4 (47 enodes)
* * [misc]simplify:  iters left: 3 (58 enodes)
* * [misc]simplify:  iters left: 2 (82 enodes)
* * [misc]simplify:  iters left: 1 (133 enodes)
* [exit]simplify:  Simplified to (exp (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* [exit]simplify:  Simplified to (exp (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* * * * [misc]progress:  [ 97 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (* (* (cbrt (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))) (cbrt (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))) (cbrt (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))))>
* [enter]simplify:  Simplifying (* (cbrt (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))) (cbrt (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (35 enodes)
* * [misc]simplify:  iters left: 3 (36 enodes)
* * [misc]simplify:  iters left: 2 (48 enodes)
* * [misc]simplify:  iters left: 1 (56 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x)))) (cbrt (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x)))) (cbrt (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x)))))
* [enter]simplify:  Simplifying (cbrt (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (34 enodes)
* * [misc]simplify:  iters left: 3 (35 enodes)
* * [misc]simplify:  iters left: 2 (47 enodes)
* * [misc]simplify:  iters left: 1 (55 enodes)
* [exit]simplify:  Simplified to (cbrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* [exit]simplify:  Simplified to (cbrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* * * * [misc]progress:  [ 98 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (cbrt (* (* (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))))>
* [enter]simplify:  Simplifying (* (* (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (23 enodes)
* * [misc]simplify:  iters left: 4 (49 enodes)
* * [misc]simplify:  iters left: 3 (154 enodes)
* [exit]simplify:  Simplified to (pow (+ (* (* 0.5 x) x) (- 1.0 (* 2.0 x))) 3)
* [exit]simplify:  Simplified to (pow (+ (* (* 0.5 x) x) (- 1.0 (* 2.0 x))) 3)
* * * * [misc]progress:  [ 99 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (* (sqrt (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))) (sqrt (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))))>
* [enter]simplify:  Simplifying (sqrt (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (34 enodes)
* * [misc]simplify:  iters left: 3 (35 enodes)
* * [misc]simplify:  iters left: 2 (47 enodes)
* * [misc]simplify:  iters left: 1 (55 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* [exit]simplify:  Simplified to (sqrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* [enter]simplify:  Simplifying (sqrt (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (34 enodes)
* * [misc]simplify:  iters left: 3 (35 enodes)
* * [misc]simplify:  iters left: 2 (47 enodes)
* * [misc]simplify:  iters left: 1 (55 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* [exit]simplify:  Simplified to (sqrt (+ (- 1.0 (* 2.0 x)) (* (* 0.5 x) x)))
* * * * [misc]progress:  [ 100 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (/ (- (pow (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) 3) (pow (* 2.0 x) 3)) (+ (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (+ (* (* 2.0 x) (* 2.0 x)) (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))))))>
* [enter]simplify:  Simplifying (- (pow (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) 3) (pow (* 2.0 x) 3))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (35 enodes)
* * [misc]simplify:  iters left: 4 (84 enodes)
* * [misc]simplify:  iters left: 3 (233 enodes)
* [exit]simplify:  Simplified to (+ (* (* (* 2.0 x) (* 2.0 x)) (* (- x) 2.0)) (pow (+ (* x (* 0.5 x)) 1.0) 3))
* [exit]simplify:  Simplified to (+ (* (* (* 2.0 x) (* 2.0 x)) (* (- x) 2.0)) (pow (+ (* x (* 0.5 x)) 1.0) 3))
* [enter]simplify:  Simplifying (+ (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (+ (* (* 2.0 x) (* 2.0 x)) (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (41 enodes)
* * [misc]simplify:  iters left: 4 (97 enodes)
* * [misc]simplify:  iters left: 3 (158 enodes)
* * [misc]simplify:  iters left: 2 (243 enodes)
* [exit]simplify:  Simplified to (+ (* (+ (+ (* x 2.0) 1.0) (* x (* 0.5 x))) (+ (* x (* 0.5 x)) 1.0)) (* (* x 2.0) (* x 2.0)))
* [exit]simplify:  Simplified to (+ (* (+ (+ (* x 2.0) 1.0) (* x (* 0.5 x))) (+ (* x (* 0.5 x)) 1.0)) (* (* x 2.0) (* x 2.0)))
* * * * [misc]progress:  [ 101 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (- (* 2.0 x))))>
* [enter]simplify:  Simplifying (- (* 2.0 x))
* * [misc]simplify:  iters left: 4 (4 enodes)
* * [misc]simplify:  iters left: 3 (9 enodes)
* * [misc]simplify:  iters left: 2 (11 enodes)
* [exit]simplify:  Simplified to (* 2.0 (- x))
* [exit]simplify:  Simplified to (* 2.0 (- x))
* * * * [misc]progress:  [ 102 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (* 1 (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))))>
* * * * [misc]progress:  [ 103 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (/ (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* (* 2.0 x) (* 2.0 x))) (+ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))))>
* [enter]simplify:  Simplifying (- (* (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))) (* (* 2.0 x) (* 2.0 x)))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (33 enodes)
* * [misc]simplify:  iters left: 4 (66 enodes)
* * [misc]simplify:  iters left: 3 (120 enodes)
* * [misc]simplify:  iters left: 2 (261 enodes)
* [exit]simplify:  Simplified to (* (+ (+ (* x 2.0) 1.0) (* (* x x) 0.5)) (+ (- 1.0 (* x 2.0)) (* (* x x) 0.5)))
* [exit]simplify:  Simplified to (* (+ (+ (* x 2.0) 1.0) (* (* x x) 0.5)) (+ (- 1.0 (* x 2.0)) (* (* x x) 0.5)))
* [enter]simplify:  Simplifying (+ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (19 enodes)
* * [misc]simplify:  iters left: 4 (25 enodes)
* * [misc]simplify:  iters left: 3 (26 enodes)
* * [misc]simplify:  iters left: 2 (34 enodes)
* * [misc]simplify:  iters left: 1 (40 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (+ (* 2.0 x) 1.0))
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (+ (* 2.0 x) 1.0))
* * * * [misc]progress:  [ 104 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (- (* 2.0 x))))>
* [enter]simplify:  Simplifying (- (* 2.0 x))
* * [misc]simplify:  iters left: 4 (4 enodes)
* * [misc]simplify:  iters left: 3 (9 enodes)
* * [misc]simplify:  iters left: 2 (11 enodes)
* [exit]simplify:  Simplified to (* 2.0 (- x))
* [exit]simplify:  Simplified to (* 2.0 (- x))
* * * * [misc]progress:  [ 105 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (pow (+ (* 0.5 (pow x 2)) 1.0) 1))) (* 2.0 x)))>
* * * * [misc]progress:  [ 106 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (exp (log (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (log (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* [exit]simplify:  Simplified to (log (+ (* (* x x) 0.5) 1.0))
* [exit]simplify:  Simplified to (log (+ (* (* x x) 0.5) 1.0))
* * * * [misc]progress:  [ 107 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (log (exp (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (exp (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (23 enodes)
* * [misc]simplify:  iters left: 3 (27 enodes)
* [exit]simplify:  Simplified to (* (exp 1.0) (pow (exp 0.5) (* x x)))
* [exit]simplify:  Simplified to (* (exp 1.0) (pow (exp 0.5) (* x x)))
* * * * [misc]progress:  [ 108 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (16 enodes)
* * [misc]simplify:  iters left: 3 (18 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (+ (* (* 0.5 x) x) 1.0)))
* [enter]simplify:  Simplifying (cbrt (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* [exit]simplify:  Simplified to (cbrt (+ (* (* x x) 0.5) 1.0))
* [exit]simplify:  Simplified to (cbrt (+ (* (* x x) 0.5) 1.0))
* * * * [misc]progress:  [ 109 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (cbrt (* (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (* (* (+ (* 0.5 (pow x 2)) 1.0) (+ (* 0.5 (pow x 2)) 1.0)) (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (25 enodes)
* * [misc]simplify:  iters left: 4 (99 enodes)
* * [misc]simplify:  iters left: 3 (383 enodes)
* [exit]simplify:  Simplified to (pow (+ (* x (* 0.5 x)) 1.0) 3)
* [exit]simplify:  Simplified to (pow (+ (* x (* 0.5 x)) 1.0) 3)
* * * * [misc]progress:  [ 110 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (* (sqrt (+ (* 0.5 (pow x 2)) 1.0)) (sqrt (+ (* 0.5 (pow x 2)) 1.0))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (sqrt (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) 0.5) 1.0))
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) 0.5) 1.0))
* [enter]simplify:  Simplifying (sqrt (+ (* 0.5 (pow x 2)) 1.0))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) 0.5) 1.0))
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) 0.5) 1.0))
* * * * [misc]progress:  [ 111 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (/ (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3)) (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (+ (pow (* 0.5 (pow x 2)) 3) (pow 1.0 3))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (51 enodes)
* * [misc]simplify:  iters left: 3 (131 enodes)
* * [misc]simplify:  iters left: 2 (321 enodes)
* * [misc]simplify:  iters left: 1 (485 enodes)
* [exit]simplify:  Simplified to (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3))
* [exit]simplify:  Simplified to (+ (pow 1.0 3) (pow (* (* x x) 0.5) 3))
* [enter]simplify:  Simplifying (+ (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (- (* 1.0 1.0) (* (* 0.5 (pow x 2)) 1.0)))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (27 enodes)
* * [misc]simplify:  iters left: 4 (69 enodes)
* * [misc]simplify:  iters left: 3 (172 enodes)
* * [misc]simplify:  iters left: 2 (364 enodes)
* [exit]simplify:  Simplified to (+ (- (* 1.0 1.0) (* (* x x) (* 0.5 1.0))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))
* [exit]simplify:  Simplified to (+ (- (* 1.0 1.0) (* (* x x) (* 0.5 1.0))) (* (* (* 0.5 x) x) (* (* 0.5 x) x)))
* * * * [misc]progress:  [ 112 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (* 1 (+ (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* * * * [misc]progress:  [ 113 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (/ (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0)) (- (* 0.5 (pow x 2)) 1.0)))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (* (* 0.5 (pow x 2)) (* 0.5 (pow x 2))) (* 1.0 1.0))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (42 enodes)
* * [misc]simplify:  iters left: 3 (89 enodes)
* * [misc]simplify:  iters left: 2 (184 enodes)
* * [misc]simplify:  iters left: 1 (356 enodes)
* [exit]simplify:  Simplified to (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))
* [exit]simplify:  Simplified to (* (- (* x (* 0.5 x)) 1.0) (+ (* x (* 0.5 x)) 1.0))
* [enter]simplify:  Simplifying (- (* 0.5 (pow x 2)) 1.0)
* * [misc]simplify:  iters left: 5 (7 enodes)
* * [misc]simplify:  iters left: 4 (11 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* * [misc]simplify:  iters left: 2 (17 enodes)
* [exit]simplify:  Simplified to (- (* (* x x) 0.5) 1.0)
* [exit]simplify:  Simplified to (- (* (* x x) 0.5) 1.0)
* * * * [misc]progress:  [ 114 / 126 ] simplifiying candidate #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ 1.0 (* 0.5 (pow x 2))))) (* 2.0 x)))>
* * * * [misc]progress:  [ 115 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (* (- (+ (* 0.3333333333333333 (* (pow (pow 1.0 2) 1/3) (pow x 2))) (pow (pow 1.0 2) 1/3)) (* 0.027777777777777776 (* (pow (pow 1.0 2) 1/3) (pow x 4)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (* (- (+ (* 0.3333333333333333 (* (pow (pow 1.0 2) 1/3) (pow x 2))) (pow (pow 1.0 2) 1/3)) (* 0.027777777777777776 (* (pow (pow 1.0 2) 1/3) (pow x 4)))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (25 enodes)
* * [misc]simplify:  iters left: 5 (47 enodes)
* * [misc]simplify:  iters left: 4 (106 enodes)
* * [misc]simplify:  iters left: 3 (247 enodes)
* [exit]simplify:  Simplified to (- (* (cbrt (+ 1.0 (* (* 0.5 x) x))) (+ (* (- (* (* x x) 0.3333333333333333) (* 0.027777777777777776 (pow x 4))) (cbrt (* 1.0 1.0))) (cbrt (* 1.0 1.0)))) (* 2.0 x))
* * * * [misc]progress:  [ 116 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (* (pow (pow (+ (* 0.5 (pow x 2)) 1.0) 2) 1/3) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (* (pow (pow (+ (* 0.5 (pow x 2)) 1.0) 2) 1/3) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (24 enodes)
* * [misc]simplify:  iters left: 4 (43 enodes)
* * [misc]simplify:  iters left: 3 (72 enodes)
* * [misc]simplify:  iters left: 2 (159 enodes)
* * [misc]simplify:  iters left: 1 (331 enodes)
* [exit]simplify:  Simplified to (- (* (cbrt (+ (* (* 0.5 x) x) 1.0)) (cbrt (* (+ (* (* 0.5 x) x) 1.0) (+ (* (* 0.5 x) x) 1.0)))) (* 2.0 x))
* * * * [misc]progress:  [ 117 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) 2) 1/3) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (* (pow (pow (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) 2) 1/3) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (24 enodes)
* * [misc]simplify:  iters left: 5 (42 enodes)
* * [misc]simplify:  iters left: 4 (74 enodes)
* * [misc]simplify:  iters left: 3 (132 enodes)
* * [misc]simplify:  iters left: 2 (318 enodes)
* [exit]simplify:  Simplified to (- (* (cbrt (* (+ 1.0 (* (* x x) 0.5)) (+ 1.0 (* (* x x) 0.5)))) (cbrt (+ 1.0 (* (* x x) 0.5)))) (* 2.0 x))
* * * * [misc]progress:  [ 118 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (- (+ (* 0.5 (pow x 2)) 1.0) (* 1.3010426069826053e-18 (pow x 8))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (- (+ (* 0.5 (pow x 2)) 1.0) (* 1.3010426069826053e-18 (pow x 8))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (68 enodes)
* * [misc]simplify:  iters left: 3 (124 enodes)
* * [misc]simplify:  iters left: 2 (206 enodes)
* * [misc]simplify:  iters left: 1 (287 enodes)
* [exit]simplify:  Simplified to (- (* x (- (* 0.5 x) 2.0)) (- (* 1.3010426069826053e-18 (pow x 8)) 1.0))
* * * * [misc]progress:  [ 119 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x)))
* * * * [misc]progress:  [ 120 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (30 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (101 enodes)
* * [misc]simplify:  iters left: 2 (205 enodes)
* [exit]simplify:  Simplified to (+ (- 1.0 (* 2.0 x)) (* (* x x) 0.5))
* * * * [misc]progress:  [ 121 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x)))
* * * * [misc]progress:  [ 122 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (66 enodes)
* * [misc]simplify:  iters left: 1 (81 enodes)
* [exit]simplify:  Simplified to (+ (* x (* 0.5 x)) (- 1.0 (* 2.0 x)))
* * * * [misc]progress:  [ 123 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (30 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (101 enodes)
* * [misc]simplify:  iters left: 2 (205 enodes)
* [exit]simplify:  Simplified to (+ (- 1.0 (* 2.0 x)) (* (* x x) 0.5))
* * * * [misc]progress:  [ 124 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (33 enodes)
* * [misc]simplify:  iters left: 3 (34 enodes)
* * [misc]simplify:  iters left: 2 (46 enodes)
* * [misc]simplify:  iters left: 1 (54 enodes)
* [exit]simplify:  Simplified to (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x)))
* * * * [misc]progress:  [ 125 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (33 enodes)
* * [misc]simplify:  iters left: 3 (34 enodes)
* * [misc]simplify:  iters left: 2 (46 enodes)
* * [misc]simplify:  iters left: 1 (54 enodes)
* [exit]simplify:  Simplified to (+ (- 1.0 (* 2.0 x)) (* x (* 0.5 x)))
* * * * [misc]progress:  [ 126 / 126 ] simplifiying candidate #<alt-event (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))))) (* 2.0 x)))>
* [enter]simplify:  Simplifying (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ 1.0 (* 0.5 (exp (* 2 (- (log -1) (log (/ -1 x))))))))) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (23 enodes)
* * [misc]simplify:  iters left: 5 (41 enodes)
* * [misc]simplify:  iters left: 4 (67 enodes)
* * [misc]simplify:  iters left: 3 (107 enodes)
* * [misc]simplify:  iters left: 2 (211 enodes)
* [exit]simplify:  Simplified to (- (pow (cbrt (+ 1.0 (* x (* 0.5 x)))) 3) (* x 2.0))
* * * [misc]progress:  adding candidates to table
* [misc]progress:  [Phase 3 of 3] Extracting.
* * [misc]regime-changes:  Finding splitpoints for: (#<alt-delta (Î» (x) (+ 1.0 (* (* (cbrt (+ -2.0 (* 0.5 x))) (cbrt (+ -2.0 (* 0.5 x)))) (* (cbrt (+ -2.0 (* 0.5 x))) x))))> #<alt-delta (Î» (x) (- (* (* (cbrt (+ (* 0.5 (pow x 2)) 1.0)) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (cbrt (+ (* 0.5 (pow x 2)) 1.0))) (* 2.0 x)))> #<alt-delta (Î» (x) (+ 1.0 (* (+ -2.0 (* 0.5 x)) x)))> #<alt-delta (Î» (x) (exp (log (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))))> #<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))> #<alt-delta (Î» (x) (* (sqrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x)))) (sqrt (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))))))>)
* [misc]regimes:  Found splitpoints: (#s(sp 0 (+ (+ 1.0 (* -2.0 x)) (* 0.5 (* x x))) +nan.0)) , with alts (#<alt-event (Î» (x) (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x)))>)
* [enter]simplify:  Simplifying (- (+ (* 0.5 (pow x 2)) 1.0) (* 2.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* [exit]simplify:  Simplified to (- (+ (* (pow x 2) 0.5) 1.0) (* 2.0 x))
* * * * [misc]points:  Sampling 8000 additional inputs, on iter 0 have 0 / 8000
* * * * [misc]points:  Computing exacts on every 500 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 250 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 125 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 62 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 31 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 15 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 7 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Setting MPFR precision to 576
* * * * [misc]points:  Computing exacts on every 3 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Setting MPFR precision to 576
* * * * [misc]points:  Computing exacts for 8000 points
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Setting MPFR precision to 576
* * * * [misc]points:  Filtering points with unrepresentable outputs
* * * * [exit]points:  Sampled 8000 points with exact outputs
