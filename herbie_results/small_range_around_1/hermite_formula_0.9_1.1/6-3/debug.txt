* [misc]progress:  [Phase 1 of 3] Setting up.
* * * [misc]progress:  [1/2] Preparing points
* * * * [misc]points:  Sampling 256 additional inputs, on iter 0 have 0 / 256
* * * * [misc]points:  Computing exacts on every 16 of 256 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 8 of 256 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 4 of 256 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 2 of 256 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts for 256 points
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Filtering points with unrepresentable outputs
* * * * [exit]points:  Sampled 256 points with exact outputs
* * * [misc]progress:  [2/2] Setting up program.
* [misc]progress:  [Phase 2 of 3] Improving.
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (* (* x x) x)))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (27 enodes)
* * [misc]simplify:  iters left: 3 (37 enodes)
* * [misc]simplify:  iters left: 2 (41 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (* (* 8.0 x) (* x x)))
* * [misc]progress:  iteration 1 / 4
* * * [misc]progress:  picking best candidate
* * * * [misc]pick:  Picked  #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (* (* x x) x))))>
* * * [misc]progress:  localizing error
* * * [misc]progress:  generating rewritten candidates
* * * * [misc]progress:  [ 1 / 2 ] rewriting at (2)
* * * * [misc]progress:  [ 2 / 2 ] rewriting at (2 2 2)
* * * [misc]progress:  generating series expansions
* * * * [misc]progress:  [ 1 / 2 ] generating series at (2)
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (* (* x x) x))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (* (* x x) x))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 x) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (* (* x x) x)) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (* (* x x) x) in x
* [misc]taylor:  Taking taylor expansion of (* x x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (* (* x x) x))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 x) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (* (* x x) x)) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (* (* x x) x) in x
* [misc]taylor:  Taking taylor expansion of (* x x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (* -12.0 0) into 0
* [misc]backup-simplify:  Simplify (* 0 0) into 0
* [misc]backup-simplify:  Simplify (* 0 0) into 0
* [misc]backup-simplify:  Simplify (* 8.0 0) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 1) (* 0 0)) into (- 12.0)
* [misc]backup-simplify:  Simplify (+ (* 0 1) (* 1 0)) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 1) (* 0 0)) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 0)) into 0
* [misc]backup-simplify:  Simplify (+ (- 12.0) 0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- 12.0) into (- 12.0)
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 1) (* 0 0))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 1) (* 0 0))) into 1
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 1) (* 1 0))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 0))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 1) (* 0 0)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 1) (* 0 0)))) into 1
* [misc]backup-simplify:  Simplify (+ (* 8.0 1) (+ (* 0 0) (+ (* 0 0) (* 0 0)))) into 8.0
* [misc]backup-simplify:  Simplify (+ 0 8.0) into 8.0
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 1) (* 0 0))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 1) (+ (* 0 0) (+ (* 0 0) (* 0 0))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 1) (+ (* 0 0) (+ (* 0 0) (* 0 0)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (+ (* 0 0) (+ (* 0 0) (* 0 0))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (+ (* 0 0) (+ (* 0 0) (* 0 0)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (+ (* 0 0) (+ (* 0 0) (* 0 0))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (+ (* 0 0) (+ (* 0 0) (* 0 0)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 (pow x 3)) (* (- 12.0) x)) into (- (* 8.0 (pow x 3)) (* 12.0 x))
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (* (* (/ 1 x) (/ 1 x)) (/ 1 x)))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (* (* (/ 1 x) (/ 1 x)) (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (* (* (/ 1 x) (/ 1 x)) (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (* (* (/ 1 x) (/ 1 x)) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (* (/ 1 x) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (* (* (/ 1 x) (/ 1 x)) (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (* (* (/ 1 x) (/ 1 x)) (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (* (* (/ 1 x) (/ 1 x)) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (* (/ 1 x) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (* 1 1) into 1
* [misc]backup-simplify:  Simplify (* 1 1) into 1
* [misc]backup-simplify:  Simplify (* 8.0 1) into 8.0
* [misc]backup-simplify:  Simplify (+ 0 8.0) into 8.0
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* -12.0 1) into -12.0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ -12.0 0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- 12.0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* (- 12.0) (/ 1 (/ 1 x))) (* 8.0 (pow (/ 1 (/ 1 x)) 3))) into (- (* 8.0 (pow x 3)) (* 12.0 x))
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (* (* (/ 1 (- x)) (/ 1 (- x))) (/ 1 (- x))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (* (* (/ 1 (- x)) (/ 1 (- x))) (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (* (* (/ 1 (- x)) (/ 1 (- x))) (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (* (* (/ 1 (- x)) (/ 1 (- x))) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (* (/ 1 (- x)) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (* (* (/ 1 (- x)) (/ 1 (- x))) (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (* (* (/ 1 (- x)) (/ 1 (- x))) (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (* (* (/ 1 (- x)) (/ 1 (- x))) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (* (/ 1 (- x)) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (* -1 -1) into 1
* [misc]backup-simplify:  Simplify (* 1 -1) into -1
* [misc]backup-simplify:  Simplify (* 8.0 -1) into -8.0
* [misc]backup-simplify:  Simplify (+ 0 -8.0) into (- 8.0)
* [misc]backup-simplify:  Simplify (- 8.0) into (- 8.0)
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* -12.0 -1) into 12.0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (+ 12.0 0) into 12.0
* [misc]backup-simplify:  Simplify 12.0 into 12.0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 12.0 (/ 1 (/ 1 (- x)))) (* (- 8.0) (pow (/ 1 (/ 1 (- x))) 3))) into (- (* 8.0 (pow x 3)) (* 12.0 x))
* * * * [misc]progress:  [ 2 / 2 ] generating series at (2 2 2)
* [misc]approximate:  Taking taylor expansion of (* (* x x) x) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* x x) x) in x
* [misc]taylor:  Taking taylor expansion of (* x x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* (* x x) x) in x
* [misc]taylor:  Taking taylor expansion of (* x x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (* 0 0) into 0
* [misc]backup-simplify:  Simplify (* 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0 1) (* 1 0)) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 1) (* 0 0)) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 1) (* 0 0))) into 1
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 1) (* 1 0))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 1) (* 0 0)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 1) (* 0 0)))) into 1
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 1) (* 0 0))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 0 0) (+ (* 0 0) (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* 1 (pow x 3)) into (pow x 3)
* [misc]approximate:  Taking taylor expansion of (* (* (/ 1 x) (/ 1 x)) (/ 1 x)) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* (/ 1 x) (/ 1 x)) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (* (/ 1 x) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* (* (/ 1 x) (/ 1 x)) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (* (/ 1 x) (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (* 1 1) into 1
* [misc]backup-simplify:  Simplify (* 1 1) into 1
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* 1 (pow (/ 1 (/ 1 x)) 3)) into (pow x 3)
* [misc]approximate:  Taking taylor expansion of (* (* (/ 1 (- x)) (/ 1 (- x))) (/ 1 (- x))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* (/ 1 (- x)) (/ 1 (- x))) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (* (/ 1 (- x)) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* (* (/ 1 (- x)) (/ 1 (- x))) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (* (/ 1 (- x)) (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (* -1 -1) into 1
* [misc]backup-simplify:  Simplify (* 1 -1) into -1
* [misc]backup-simplify:  Simplify -1 into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* 1 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* -1 (pow (/ 1 (/ 1 (- x))) 3)) into (pow x 3)
* * * [misc]progress:  simplifying candidates
* * * * [misc]progress:  [ 1 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (log (* (exp (* -12.0 x)) (exp (* 8.0 (* (* x x) x))))))>
* [enter]simplify:  Simplifying (* (exp (* -12.0 x)) (exp (* 8.0 (* (* x x) x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (35 enodes)
* * [misc]simplify:  iters left: 3 (46 enodes)
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (pow x 3)))
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (pow x 3)))
* * * * [misc]progress:  [ 2 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (pow (+ (* -12.0 x) (* 8.0 (* (* x x) x))) 1))>
* * * * [misc]progress:  [ 3 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (exp (log (+ (* -12.0 x) (* 8.0 (* (* x x) x))))))>
* [enter]simplify:  Simplifying (log (+ (* -12.0 x) (* 8.0 (* (* x x) x))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (28 enodes)
* * [misc]simplify:  iters left: 3 (43 enodes)
* * [misc]simplify:  iters left: 2 (48 enodes)
* [exit]simplify:  Simplified to (log (+ (* -12.0 x) (* (* x x) (* 8.0 x))))
* [exit]simplify:  Simplified to (log (+ (* -12.0 x) (* (* x x) (* 8.0 x))))
* * * * [misc]progress:  [ 4 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (log (exp (+ (* -12.0 x) (* 8.0 (* (* x x) x))))))>
* [enter]simplify:  Simplifying (exp (+ (* -12.0 x) (* 8.0 (* (* x x) x))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (42 enodes)
* * [misc]simplify:  iters left: 3 (61 enodes)
* * [misc]simplify:  iters left: 2 (64 enodes)
* [exit]simplify:  Simplified to (* (pow (exp 8.0) (pow x 3)) (exp (* -12.0 x)))
* [exit]simplify:  Simplified to (* (pow (exp 8.0) (pow x 3)) (exp (* -12.0 x)))
* * * * [misc]progress:  [ 5 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (* (* (cbrt (+ (* -12.0 x) (* 8.0 (* (* x x) x)))) (cbrt (+ (* -12.0 x) (* 8.0 (* (* x x) x))))) (cbrt (+ (* -12.0 x) (* 8.0 (* (* x x) x))))))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* -12.0 x) (* 8.0 (* (* x x) x)))) (cbrt (+ (* -12.0 x) (* 8.0 (* (* x x) x)))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (16 enodes)
* * [misc]simplify:  iters left: 4 (29 enodes)
* * [misc]simplify:  iters left: 3 (39 enodes)
* * [misc]simplify:  iters left: 2 (43 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* -12.0 x) (* (* 8.0 x) (* x x)))) (cbrt (+ (* -12.0 x) (* (* 8.0 x) (* x x)))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* -12.0 x) (* (* 8.0 x) (* x x)))) (cbrt (+ (* -12.0 x) (* (* 8.0 x) (* x x)))))
* [enter]simplify:  Simplifying (cbrt (+ (* -12.0 x) (* 8.0 (* (* x x) x))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (28 enodes)
* * [misc]simplify:  iters left: 3 (38 enodes)
* * [misc]simplify:  iters left: 2 (42 enodes)
* [exit]simplify:  Simplified to (cbrt (+ (* -12.0 x) (* (* x x) (* 8.0 x))))
* [exit]simplify:  Simplified to (cbrt (+ (* -12.0 x) (* (* x x) (* 8.0 x))))
* * * * [misc]progress:  [ 6 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (cbrt (* (* (+ (* -12.0 x) (* 8.0 (* (* x x) x))) (+ (* -12.0 x) (* 8.0 (* (* x x) x)))) (+ (* -12.0 x) (* 8.0 (* (* x x) x))))))>
* [enter]simplify:  Simplifying (* (* (+ (* -12.0 x) (* 8.0 (* (* x x) x))) (+ (* -12.0 x) (* 8.0 (* (* x x) x)))) (+ (* -12.0 x) (* 8.0 (* (* x x) x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (29 enodes)
* * [misc]simplify:  iters left: 4 (133 enodes)
* [exit]simplify:  Simplified to (pow (+ (* -12.0 x) (* (* 8.0 x) (* x x))) 3)
* [exit]simplify:  Simplified to (pow (+ (* -12.0 x) (* (* 8.0 x) (* x x))) 3)
* * * * [misc]progress:  [ 7 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (* (sqrt (+ (* -12.0 x) (* 8.0 (* (* x x) x)))) (sqrt (+ (* -12.0 x) (* 8.0 (* (* x x) x))))))>
* [enter]simplify:  Simplifying (sqrt (+ (* -12.0 x) (* 8.0 (* (* x x) x))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (28 enodes)
* * [misc]simplify:  iters left: 3 (38 enodes)
* * [misc]simplify:  iters left: 2 (42 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* -12.0 x) (* (* x x) (* 8.0 x))))
* [exit]simplify:  Simplified to (sqrt (+ (* -12.0 x) (* (* x x) (* 8.0 x))))
* [enter]simplify:  Simplifying (sqrt (+ (* -12.0 x) (* 8.0 (* (* x x) x))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (28 enodes)
* * [misc]simplify:  iters left: 3 (38 enodes)
* * [misc]simplify:  iters left: 2 (42 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* -12.0 x) (* (* x x) (* 8.0 x))))
* [exit]simplify:  Simplified to (sqrt (+ (* -12.0 x) (* (* x x) (* 8.0 x))))
* * * * [misc]progress:  [ 8 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (/ (+ (pow (* -12.0 x) 3) (pow (* 8.0 (* (* x x) x)) 3)) (+ (* (* -12.0 x) (* -12.0 x)) (- (* (* 8.0 (* (* x x) x)) (* 8.0 (* (* x x) x))) (* (* -12.0 x) (* 8.0 (* (* x x) x)))))))>
* [enter]simplify:  Simplifying (+ (pow (* -12.0 x) 3) (pow (* 8.0 (* (* x x) x)) 3))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (29 enodes)
* * [misc]simplify:  iters left: 4 (92 enodes)
* * [misc]simplify:  iters left: 3 (312 enodes)
* [exit]simplify:  Simplified to (+ (pow (* (* 8.0 x) (* x x)) 3) (pow (* -12.0 x) 3))
* [exit]simplify:  Simplified to (+ (pow (* (* 8.0 x) (* x x)) 3) (pow (* -12.0 x) 3))
* [enter]simplify:  Simplifying (+ (* (* -12.0 x) (* -12.0 x)) (- (* (* 8.0 (* (* x x) x)) (* 8.0 (* (* x x) x))) (* (* -12.0 x) (* 8.0 (* (* x x) x)))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (37 enodes)
* * [misc]simplify:  iters left: 4 (131 enodes)
* * [misc]simplify:  iters left: 3 (472 enodes)
* [exit]simplify:  Simplified to (+ (* (- (* (* x x) (* x 8.0)) (* -12.0 x)) (* (* x x) (* x 8.0))) (* (* -12.0 x) (* -12.0 x)))
* [exit]simplify:  Simplified to (+ (* (- (* (* x x) (* x 8.0)) (* -12.0 x)) (* (* x x) (* x 8.0))) (* (* -12.0 x) (* -12.0 x)))
* * * * [misc]progress:  [ 9 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (* 1 (+ (* -12.0 x) (* 8.0 (* (* x x) x)))))>
* * * * [misc]progress:  [ 10 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (/ (- (* (* -12.0 x) (* -12.0 x)) (* (* 8.0 (* (* x x) x)) (* 8.0 (* (* x x) x)))) (- (* -12.0 x) (* 8.0 (* (* x x) x)))))>
* [enter]simplify:  Simplifying (- (* (* -12.0 x) (* -12.0 x)) (* (* 8.0 (* (* x x) x)) (* 8.0 (* (* x x) x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (82 enodes)
* * [misc]simplify:  iters left: 3 (279 enodes)
* [exit]simplify:  Simplified to (- (* (* -12.0 x) (* -12.0 x)) (* (* (* x 8.0) (* x x)) (* (* x 8.0) (* x x))))
* [exit]simplify:  Simplified to (- (* (* -12.0 x) (* -12.0 x)) (* (* (* x 8.0) (* x x)) (* (* x 8.0) (* x x))))
* [enter]simplify:  Simplifying (- (* -12.0 x) (* 8.0 (* (* x x) x)))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (37 enodes)
* * [misc]simplify:  iters left: 3 (73 enodes)
* * [misc]simplify:  iters left: 2 (93 enodes)
* * [misc]simplify:  iters left: 1 (96 enodes)
* [exit]simplify:  Simplified to (- (* -12.0 x) (* (* 8.0 x) (* x x)))
* [exit]simplify:  Simplified to (- (* -12.0 x) (* (* 8.0 x) (* x x)))
* * * * [misc]progress:  [ 11 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* 8.0 (* (* x x) x)) (* -12.0 x)))>
* * * * [misc]progress:  [ 12 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (pow x 3))))>
* * * * [misc]progress:  [ 13 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (pow x (+ 2 1)))))>
* [enter]simplify:  Simplifying (+ 2 1)
* * [misc]simplify:  iters left: 2 (3 enodes)
* * [misc]simplify:  iters left: 1 (6 enodes)
* [exit]simplify:  Simplified to (+ 1 2)
* [exit]simplify:  Simplified to (+ 1 2)
* * * * [misc]progress:  [ 14 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (pow (* (* x x) x) 1))))>
* * * * [misc]progress:  [ 15 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (log (* (* x x) x))))))>
* [enter]simplify:  Simplifying (log (* (* x x) x))
* * [misc]simplify:  iters left: 5 (4 enodes)
* * [misc]simplify:  iters left: 4 (8 enodes)
* * [misc]simplify:  iters left: 3 (12 enodes)
* * [misc]simplify:  iters left: 2 (13 enodes)
* * [misc]simplify:  iters left: 1 (14 enodes)
* [exit]simplify:  Simplified to (* 3 (log x))
* [exit]simplify:  Simplified to (* 3 (log x))
* * * * [misc]progress:  [ 16 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (log (exp (* (* x x) x))))))>
* [enter]simplify:  Simplifying (exp (* (* x x) x))
* * [misc]simplify:  iters left: 5 (4 enodes)
* * [misc]simplify:  iters left: 4 (7 enodes)
* * [misc]simplify:  iters left: 3 (11 enodes)
* [exit]simplify:  Simplified to (exp (pow x 3))
* [exit]simplify:  Simplified to (exp (pow x 3))
* * * * [misc]progress:  [ 17 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (* (* (cbrt (* (* x x) x)) (cbrt (* (* x x) x))) (cbrt (* (* x x) x))))))>
* [enter]simplify:  Simplifying (* (cbrt (* (* x x) x)) (cbrt (* (* x x) x)))
* * [misc]simplify:  iters left: 6 (5 enodes)
* * [misc]simplify:  iters left: 5 (6 enodes)
* * [misc]simplify:  iters left: 4 (8 enodes)
* [exit]simplify:  Simplified to (* x x)
* [exit]simplify:  Simplified to (* x x)
* [enter]simplify:  Simplifying (cbrt (* (* x x) x))
* * [misc]simplify:  iters left: 5 (4 enodes)
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (7 enodes)
* [exit]simplify:  Simplified to x
* [exit]simplify:  Simplified to x
* * * * [misc]progress:  [ 18 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (cbrt (* (* (* (* x x) x) (* (* x x) x)) (* (* x x) x))))))>
* [enter]simplify:  Simplifying (* (* (* (* x x) x) (* (* x x) x)) (* (* x x) x))
* * [misc]simplify:  iters left: 6 (5 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (30 enodes)
* * [misc]simplify:  iters left: 3 (51 enodes)
* * [misc]simplify:  iters left: 2 (59 enodes)
* * [misc]simplify:  iters left: 1 (64 enodes)
* [exit]simplify:  Simplified to (pow (pow x 3) 3)
* [exit]simplify:  Simplified to (pow (pow x 3) 3)
* * * * [misc]progress:  [ 19 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (* (sqrt (* (* x x) x)) (sqrt (* (* x x) x))))))>
* [enter]simplify:  Simplifying (sqrt (* (* x x) x))
* * [misc]simplify:  iters left: 5 (4 enodes)
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (7 enodes)
* [exit]simplify:  Simplified to (sqrt (pow x 3))
* [exit]simplify:  Simplified to (sqrt (pow x 3))
* [enter]simplify:  Simplifying (sqrt (* (* x x) x))
* * [misc]simplify:  iters left: 5 (4 enodes)
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (7 enodes)
* [exit]simplify:  Simplified to (sqrt (pow x 3))
* [exit]simplify:  Simplified to (sqrt (pow x 3))
* * * * [misc]progress:  [ 20 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (* 1 (* (* x x) x)))))>
* * * * [misc]progress:  [ 21 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (* x (* x x)))))>
* [enter]simplify:  Simplifying (* x x)
* * [misc]simplify:  iters left: 2 (2 enodes)
* [exit]simplify:  Simplified to (* x x)
* [exit]simplify:  Simplified to (* x x)
* * * * [misc]progress:  [ 22 / 28 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (* x (* x x)))))>
* * * * [misc]progress:  [ 23 / 28 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (pow x 3)) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (pow x 3)) (* 12.0 x))
* * [misc]simplify:  iters left: 5 (8 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (30 enodes)
* * [misc]simplify:  iters left: 2 (46 enodes)
* * [misc]simplify:  iters left: 1 (61 enodes)
* [exit]simplify:  Simplified to (- (* (* 8.0 x) (* x x)) (* 12.0 x))
* * * * [misc]progress:  [ 24 / 28 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (pow x 3)) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (pow x 3)) (* 12.0 x))
* * [misc]simplify:  iters left: 5 (8 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (30 enodes)
* * [misc]simplify:  iters left: 2 (46 enodes)
* * [misc]simplify:  iters left: 1 (61 enodes)
* [exit]simplify:  Simplified to (- (* (* 8.0 x) (* x x)) (* 12.0 x))
* * * * [misc]progress:  [ 25 / 28 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (pow x 3)) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (pow x 3)) (* 12.0 x))
* * [misc]simplify:  iters left: 5 (8 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (30 enodes)
* * [misc]simplify:  iters left: 2 (46 enodes)
* * [misc]simplify:  iters left: 1 (61 enodes)
* [exit]simplify:  Simplified to (- (* (* 8.0 x) (* x x)) (* 12.0 x))
* * * * [misc]progress:  [ 26 / 28 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (pow x 3))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (pow x 3)))
* * [misc]simplify:  iters left: 5 (8 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* * [misc]simplify:  iters left: 2 (37 enodes)
* * [misc]simplify:  iters left: 1 (49 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (* (* 8.0 x) (* x x)))
* * * * [misc]progress:  [ 27 / 28 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (pow x 3))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (pow x 3)))
* * [misc]simplify:  iters left: 5 (8 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* * [misc]simplify:  iters left: 2 (37 enodes)
* * [misc]simplify:  iters left: 1 (49 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (* (* 8.0 x) (* x x)))
* * * * [misc]progress:  [ 28 / 28 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (pow x 3))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (pow x 3)))
* * [misc]simplify:  iters left: 5 (8 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* * [misc]simplify:  iters left: 2 (37 enodes)
* * [misc]simplify:  iters left: 1 (49 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (* (* 8.0 x) (* x x)))
* * * [misc]progress:  adding candidates to table
* * [misc]progress:  iteration 2 / 4
* * * [misc]progress:  picking best candidate
* * * * [misc]pick:  Picked  #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))>
* * * [misc]progress:  localizing error
* * * [misc]progress:  generating rewritten candidates
* * * * [misc]progress:  [ 1 / 3 ] rewriting at (2)
* * * * [misc]progress:  [ 2 / 3 ] rewriting at (2 2 2 1)
* * * * [misc]progress:  [ 3 / 3 ] rewriting at (2 2 2)
* * * [misc]progress:  generating series expansions
* * * * [misc]progress:  [ 1 / 3 ] generating series at (2)
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 x) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (exp (* 3 (log x))) into (pow x 3)
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 x) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (exp (* 3 (log x))) into (pow x 3)
* [misc]backup-simplify:  Simplify (* -12.0 0) into 0
* [misc]backup-simplify:  Simplify (* 8.0 (pow x 3)) into (* 8.0 (pow x 3))
* [misc]backup-simplify:  Simplify (+ 0 (* 8.0 (pow x 3))) into (* 8.0 (pow x 3))
* [misc]backup-simplify:  Simplify (* 8.0 (pow x 3)) into (* 8.0 (pow x 3))
* [misc]backup-simplify:  Simplify (+ (* -12.0 1) (* 0 0)) into (- 12.0)
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 (pow x 3))) into 0
* [misc]backup-simplify:  Simplify (+ (- 12.0) 0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- 12.0) into (- 12.0)
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 1) (* 0 0))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 (pow x 3)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x 3))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x 3)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x 3))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x 3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow 1 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow 1 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow 1 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow 1 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x 3))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* (- 12.0) x) (* 8.0 (pow x 3))) into (- (* 8.0 (pow x 3)) (* 12.0 x))
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (exp (* 3 (log (/ 1 x)))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (exp (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (exp (* -3 (log x))) into (pow x -3)
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (exp (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (exp (* -3 (log x))) into (pow x -3)
* [misc]backup-simplify:  Simplify (* -12.0 1) into -12.0
* [misc]backup-simplify:  Simplify (+ -12.0 0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- 12.0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (* 8.0 (pow x -3)) into (/ 8.0 (pow x 3))
* [misc]backup-simplify:  Simplify (+ 0 (/ 8.0 (pow x 3))) into (* 8.0 (/ 1 (pow x 3)))
* [misc]backup-simplify:  Simplify (* 8.0 (/ 1 (pow x 3))) into (/ 8.0 (pow x 3))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 (pow x -3))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 (pow x -3)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -3))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -3)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -3))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x -3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (/ 8.0 (pow (/ 1 x) 3)) (* (- 12.0) (/ 1 (/ 1 x)))) into (- (* 8.0 (pow x 3)) (* 12.0 x))
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (exp (* 3 (log (/ 1 (- x))))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (exp (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 3 (- (log -1) (log x)))) into (exp (* 3 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (exp (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 3 (- (log -1) (log x)))) into (exp (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* -12.0 -1) into 12.0
* [misc]backup-simplify:  Simplify (+ 12.0 0) into 12.0
* [misc]backup-simplify:  Simplify 12.0 into 12.0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (* 8.0 (exp (* 3 (- (log -1) (log x))))) into (* 8.0 (exp (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (+ 0 (* 8.0 (exp (* 3 (- (log -1) (log x)))))) into (* 8.0 (exp (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (* 8.0 (exp (* 3 (- (log -1) (log x))))) into (* 8.0 (exp (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 (exp (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 (exp (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 (exp (* 3 (- (log -1) (log (/ 1 (- x))))))) (* 12.0 (/ 1 (/ 1 (- x))))) into (- (* 8.0 (exp (* 3 (- (log -1) (log (/ -1 x)))))) (* 12.0 x))
* * * * [misc]progress:  [ 2 / 3 ] generating series at (2 2 2 1)
* [misc]approximate:  Taking taylor expansion of (* 3 (log x)) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]approximate:  Taking taylor expansion of (* 3 (log (/ 1 x))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (* -3 (log x)) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* -3 (log (/ 1 x))) into (* -3 (log (/ 1 x)))
* [misc]approximate:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log (/ 1 (- x))))) into (* 3 (- (log -1) (log (/ -1 x))))
* * * * [misc]progress:  [ 3 / 3 ] generating series at (2 2 2)
* [misc]approximate:  Taking taylor expansion of (exp (* 3 (log x))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (exp (* 3 (log x))) into (pow x 3)
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (exp (* 3 (log x))) into (pow x 3)
* [misc]backup-simplify:  Simplify (pow x 3) into (pow x 3)
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (pow x 3) into (pow x 3)
* [misc]approximate:  Taking taylor expansion of (exp (* 3 (log (/ 1 x)))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (exp (* -3 (log x))) into (pow x -3)
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (exp (* -3 (log x))) into (pow x -3)
* [misc]backup-simplify:  Simplify (pow x -3) into (pow x -3)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* -3 (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (pow (/ 1 x) -3) into (pow (/ 1 x) -3)
* [misc]approximate:  Taking taylor expansion of (exp (* 3 (log (/ 1 (- x))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 3 (- (log -1) (log x)))) into (exp (* 3 (- (log -1) (log x))))
* [misc]taylor:  Taking taylor expansion of (exp (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (exp (* 3 (- (log -1) (log x)))) into (exp (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (exp (* 3 (- (log -1) (log x)))) into (exp (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 3 (- (log -1) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (exp (* 3 (- (log -1) (log (/ 1 (- x)))))) into (exp (* 3 (- (log -1) (log (/ -1 x)))))
* * * [misc]progress:  simplifying candidates
* * * * [misc]progress:  [ 1 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (log (* (exp (* -12.0 x)) (exp (* 8.0 (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (exp (* -12.0 x)) (exp (* 8.0 (exp (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (24 enodes)
* * [misc]simplify:  iters left: 4 (29 enodes)
* * [misc]simplify:  iters left: 3 (35 enodes)
* * [misc]simplify:  iters left: 2 (41 enodes)
* * [misc]simplify:  iters left: 1 (55 enodes)
* [exit]simplify:  Simplified to (* (pow (exp 8.0) (pow x 3)) (exp (* -12.0 x)))
* [exit]simplify:  Simplified to (* (pow (exp 8.0) (pow x 3)) (exp (* -12.0 x)))
* * * * [misc]progress:  [ 2 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (pow (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))) 1))>
* * * * [misc]progress:  [ 3 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (exp (log (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (log (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (20 enodes)
* * [misc]simplify:  iters left: 3 (26 enodes)
* * [misc]simplify:  iters left: 2 (32 enodes)
* * [misc]simplify:  iters left: 1 (46 enodes)
* [exit]simplify:  Simplified to (log (+ (* (* x x) (* 8.0 x)) (* -12.0 x)))
* [exit]simplify:  Simplified to (log (+ (* (* x x) (* 8.0 x)) (* -12.0 x)))
* * * * [misc]progress:  [ 4 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (log (exp (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (exp (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (32 enodes)
* * [misc]simplify:  iters left: 3 (38 enodes)
* * [misc]simplify:  iters left: 2 (45 enodes)
* * [misc]simplify:  iters left: 1 (65 enodes)
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (pow x 3)))
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (pow x 3)))
* * * * [misc]progress:  [ 5 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (* (* (cbrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))) (cbrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))) (cbrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))) (cbrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (21 enodes)
* * [misc]simplify:  iters left: 3 (27 enodes)
* * [misc]simplify:  iters left: 2 (33 enodes)
* * [misc]simplify:  iters left: 1 (47 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 8.0 x) (* x x)) (* -12.0 x))) (cbrt (+ (* (* 8.0 x) (* x x)) (* -12.0 x))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* (* 8.0 x) (* x x)) (* -12.0 x))) (cbrt (+ (* (* 8.0 x) (* x x)) (* -12.0 x))))
* [enter]simplify:  Simplifying (cbrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (20 enodes)
* * [misc]simplify:  iters left: 3 (26 enodes)
* * [misc]simplify:  iters left: 2 (32 enodes)
* * [misc]simplify:  iters left: 1 (46 enodes)
* [exit]simplify:  Simplified to (cbrt (+ (* (* x x) (* 8.0 x)) (* -12.0 x)))
* [exit]simplify:  Simplified to (cbrt (+ (* (* x x) (* 8.0 x)) (* -12.0 x)))
* * * * [misc]progress:  [ 6 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (cbrt (* (* (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))) (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))) (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))) (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))) (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (31 enodes)
* * [misc]simplify:  iters left: 4 (119 enodes)
* * [misc]simplify:  iters left: 3 (427 enodes)
* [exit]simplify:  Simplified to (pow (+ (* (* 8.0 x) (* x x)) (* -12.0 x)) 3)
* [exit]simplify:  Simplified to (pow (+ (* (* 8.0 x) (* x x)) (* -12.0 x)) 3)
* * * * [misc]progress:  [ 7 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (* (sqrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))) (sqrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (sqrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (20 enodes)
* * [misc]simplify:  iters left: 3 (26 enodes)
* * [misc]simplify:  iters left: 2 (32 enodes)
* * [misc]simplify:  iters left: 1 (46 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) (* 8.0 x)) (* -12.0 x)))
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) (* 8.0 x)) (* -12.0 x)))
* [enter]simplify:  Simplifying (sqrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (20 enodes)
* * [misc]simplify:  iters left: 3 (26 enodes)
* * [misc]simplify:  iters left: 2 (32 enodes)
* * [misc]simplify:  iters left: 1 (46 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) (* 8.0 x)) (* -12.0 x)))
* [exit]simplify:  Simplified to (sqrt (+ (* (* x x) (* 8.0 x)) (* -12.0 x)))
* * * * [misc]progress:  [ 8 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (/ (+ (pow (* -12.0 x) 3) (pow (* 8.0 (exp (* 3 (log x)))) 3)) (+ (* (* -12.0 x) (* -12.0 x)) (- (* (* 8.0 (exp (* 3 (log x)))) (* 8.0 (exp (* 3 (log x))))) (* (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))))))>
* [enter]simplify:  Simplifying (+ (pow (* -12.0 x) 3) (pow (* 8.0 (exp (* 3 (log x)))) 3))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (30 enodes)
* * [misc]simplify:  iters left: 4 (78 enodes)
* * [misc]simplify:  iters left: 3 (164 enodes)
* * [misc]simplify:  iters left: 2 (235 enodes)
* * [misc]simplify:  iters left: 1 (322 enodes)
* [exit]simplify:  Simplified to (+ (pow (* -12.0 x) 3) (pow (* (* 8.0 x) (* x x)) 3))
* [exit]simplify:  Simplified to (+ (pow (* -12.0 x) 3) (pow (* (* 8.0 x) (* x x)) 3))
* [enter]simplify:  Simplifying (+ (* (* -12.0 x) (* -12.0 x)) (- (* (* 8.0 (exp (* 3 (log x)))) (* 8.0 (exp (* 3 (log x))))) (* (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (39 enodes)
* * [misc]simplify:  iters left: 4 (104 enodes)
* * [misc]simplify:  iters left: 3 (232 enodes)
* * [misc]simplify:  iters left: 2 (406 enodes)
* [exit]simplify:  Simplified to (+ (* (* -12.0 x) (- (* -12.0 x) (* (* x x) (* x 8.0)))) (* (* (* x x) (* x 8.0)) (* (* x x) (* x 8.0))))
* [exit]simplify:  Simplified to (+ (* (* -12.0 x) (- (* -12.0 x) (* (* x x) (* x 8.0)))) (* (* (* x x) (* x 8.0)) (* (* x x) (* x 8.0))))
* * * * [misc]progress:  [ 9 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (* 1 (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))))>
* * * * [misc]progress:  [ 10 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (/ (- (* (* -12.0 x) (* -12.0 x)) (* (* 8.0 (exp (* 3 (log x)))) (* 8.0 (exp (* 3 (log x)))))) (- (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))))>
* [enter]simplify:  Simplifying (- (* (* -12.0 x) (* -12.0 x)) (* (* 8.0 (exp (* 3 (log x)))) (* 8.0 (exp (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (30 enodes)
* * [misc]simplify:  iters left: 4 (62 enodes)
* * [misc]simplify:  iters left: 3 (118 enodes)
* * [misc]simplify:  iters left: 2 (205 enodes)
* * [misc]simplify:  iters left: 1 (494 enodes)
* [exit]simplify:  Simplified to (* (+ (* -12.0 x) (* (* x 8.0) (* x x))) (- (* -12.0 x) (* (* x 8.0) (* x x))))
* [exit]simplify:  Simplified to (* (+ (* -12.0 x) (* (* x 8.0) (* x x))) (- (* -12.0 x) (* (* x 8.0) (* x x))))
* [enter]simplify:  Simplifying (- (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (27 enodes)
* * [misc]simplify:  iters left: 3 (33 enodes)
* * [misc]simplify:  iters left: 2 (47 enodes)
* * [misc]simplify:  iters left: 1 (88 enodes)
* [exit]simplify:  Simplified to (- (* -12.0 x) (* (* 8.0 x) (* x x)))
* [exit]simplify:  Simplified to (- (* -12.0 x) (* (* 8.0 x) (* x x)))
* * * * [misc]progress:  [ 11 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* 8.0 (exp (* 3 (log x)))) (* -12.0 x)))>
* * * * [misc]progress:  [ 12 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* 3 (log x)) 1)))))>
* * * * [misc]progress:  [ 13 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (exp (log (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (log (* 3 (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (9 enodes)
* * [misc]simplify:  iters left: 2 (10 enodes)
* [exit]simplify:  Simplified to (log (* 3 (log x)))
* [exit]simplify:  Simplified to (log (* 3 (log x)))
* * * * [misc]progress:  [ 14 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (log (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (exp (* 3 (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (8 enodes)
* * [misc]simplify:  iters left: 2 (11 enodes)
* * [misc]simplify:  iters left: 1 (17 enodes)
* [exit]simplify:  Simplified to (pow x 3)
* [exit]simplify:  Simplified to (pow x 3)
* * * * [misc]progress:  [ 15 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (7 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [enter]simplify:  Simplifying (cbrt (* 3 (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* * * * [misc]progress:  [ 16 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (cbrt (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (29 enodes)
* * [misc]simplify:  iters left: 3 (55 enodes)
* * [misc]simplify:  iters left: 2 (86 enodes)
* * [misc]simplify:  iters left: 1 (89 enodes)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* * * * [misc]progress:  [ 17 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (sqrt (* 3 (log x))) (sqrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (sqrt (* 3 (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [enter]simplify:  Simplifying (sqrt (* 3 (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* * * * [misc]progress:  [ 18 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* 1 (* 3 (log x)))))))>
* * * * [misc]progress:  [ 19 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* 3 (* (cbrt (log x)) (cbrt (log x)))) (cbrt (log x)))))))>
* [enter]simplify:  Simplifying (* 3 (* (cbrt (log x)) (cbrt (log x))))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* * [misc]simplify:  iters left: 4 (11 enodes)
* [exit]simplify:  Simplified to (* 3 (* (cbrt (log x)) (cbrt (log x))))
* [exit]simplify:  Simplified to (* 3 (* (cbrt (log x)) (cbrt (log x))))
* * * * [misc]progress:  [ 20 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* 3 (sqrt (log x))) (sqrt (log x)))))))>
* [enter]simplify:  Simplifying (* 3 (sqrt (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (* (sqrt (log x)) 3)
* [exit]simplify:  Simplified to (* (sqrt (log x)) 3)
* * * * [misc]progress:  [ 21 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* 3 1) (log x))))))>
* [enter]simplify:  Simplifying (* 3 1)
* * [misc]simplify:  iters left: 2 (3 enodes)
* * [misc]simplify:  iters left: 1 (5 enodes)
* [exit]simplify:  Simplified to 3
* [exit]simplify:  Simplified to 3
* * * * [misc]progress:  [ 22 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (log x) 3)))))>
* * * * [misc]progress:  [ 23 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (pow (exp (* 3 (log x))) 1))))>
* * * * [misc]progress:  [ 24 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (pow (exp 3) (log x)))))>
* [enter]simplify:  Simplifying (exp 3)
* * [misc]simplify:  iters left: 1 (2 enodes)
* [exit]simplify:  Simplified to (exp 3)
* [exit]simplify:  Simplified to (exp 3)
* * * * [misc]progress:  [ 25 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))>
* * * * [misc]progress:  [ 26 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (log (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (log (exp (* 3 (log x))))
* * [misc]simplify:  iters left: 5 (6 enodes)
* * [misc]simplify:  iters left: 4 (9 enodes)
* * [misc]simplify:  iters left: 3 (14 enodes)
* * [misc]simplify:  iters left: 2 (22 enodes)
* * [misc]simplify:  iters left: 1 (31 enodes)
* [exit]simplify:  Simplified to (* 3 (log x))
* [exit]simplify:  Simplified to (* 3 (log x))
* * * * [misc]progress:  [ 27 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (log (exp (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (exp (exp (* 3 (log x))))
* * [misc]simplify:  iters left: 5 (6 enodes)
* * [misc]simplify:  iters left: 4 (9 enodes)
* * [misc]simplify:  iters left: 3 (12 enodes)
* * [misc]simplify:  iters left: 2 (18 enodes)
* * [misc]simplify:  iters left: 1 (22 enodes)
* [exit]simplify:  Simplified to (exp (pow x 3))
* [exit]simplify:  Simplified to (exp (pow x 3))
* * * * [misc]progress:  [ 28 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (* (* (cbrt (exp (* 3 (log x)))) (cbrt (exp (* 3 (log x))))) (cbrt (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (exp (* 3 (log x)))) (cbrt (exp (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* * [misc]simplify:  iters left: 4 (13 enodes)
* * [misc]simplify:  iters left: 3 (19 enodes)
* * [misc]simplify:  iters left: 2 (23 enodes)
* * [misc]simplify:  iters left: 1 (25 enodes)
* [exit]simplify:  Simplified to (* x x)
* [exit]simplify:  Simplified to (* x x)
* [enter]simplify:  Simplifying (cbrt (exp (* 3 (log x))))
* * [misc]simplify:  iters left: 5 (6 enodes)
* * [misc]simplify:  iters left: 4 (9 enodes)
* * [misc]simplify:  iters left: 3 (12 enodes)
* * [misc]simplify:  iters left: 2 (18 enodes)
* * [misc]simplify:  iters left: 1 (20 enodes)
* [exit]simplify:  Simplified to x
* [exit]simplify:  Simplified to x
* * * * [misc]progress:  [ 29 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (cbrt (* (* (exp (* 3 (log x))) (exp (* 3 (log x)))) (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (exp (* 3 (log x))) (exp (* 3 (log x)))) (exp (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (25 enodes)
* * [misc]simplify:  iters left: 3 (44 enodes)
* * [misc]simplify:  iters left: 2 (60 enodes)
* * [misc]simplify:  iters left: 1 (96 enodes)
* [exit]simplify:  Simplified to (pow (pow x 3) 3)
* [exit]simplify:  Simplified to (pow (pow x 3) 3)
* * * * [misc]progress:  [ 30 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (* (sqrt (exp (* 3 (log x)))) (sqrt (exp (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (sqrt (exp (* 3 (log x))))
* * [misc]simplify:  iters left: 5 (6 enodes)
* * [misc]simplify:  iters left: 4 (9 enodes)
* * [misc]simplify:  iters left: 3 (12 enodes)
* * [misc]simplify:  iters left: 2 (18 enodes)
* * [misc]simplify:  iters left: 1 (20 enodes)
* [exit]simplify:  Simplified to (sqrt (pow x 3))
* [exit]simplify:  Simplified to (sqrt (pow x 3))
* [enter]simplify:  Simplifying (sqrt (exp (* 3 (log x))))
* * [misc]simplify:  iters left: 5 (6 enodes)
* * [misc]simplify:  iters left: 4 (9 enodes)
* * [misc]simplify:  iters left: 3 (12 enodes)
* * [misc]simplify:  iters left: 2 (18 enodes)
* * [misc]simplify:  iters left: 1 (20 enodes)
* [exit]simplify:  Simplified to (sqrt (pow x 3))
* [exit]simplify:  Simplified to (sqrt (pow x 3))
* * * * [misc]progress:  [ 31 / 40 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (* 1 (exp (* 3 (log x)))))))>
* * * * [misc]progress:  [ 32 / 40 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (pow x 3)) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (pow x 3)) (* 12.0 x))
* * [misc]simplify:  iters left: 5 (8 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (30 enodes)
* * [misc]simplify:  iters left: 2 (46 enodes)
* * [misc]simplify:  iters left: 1 (61 enodes)
* [exit]simplify:  Simplified to (- (* (* 8.0 x) (* x x)) (* 12.0 x))
* * * * [misc]progress:  [ 33 / 40 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (pow x 3)) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (pow x 3)) (* 12.0 x))
* * [misc]simplify:  iters left: 5 (8 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* * [misc]simplify:  iters left: 3 (30 enodes)
* * [misc]simplify:  iters left: 2 (46 enodes)
* * [misc]simplify:  iters left: 1 (61 enodes)
* [exit]simplify:  Simplified to (- (* (* 8.0 x) (* x x)) (* 12.0 x))
* * * * [misc]progress:  [ 34 / 40 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (exp (* 3 (- (log -1) (log (/ -1 x)))))) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (exp (* 3 (- (log -1) (log (/ -1 x)))))) (* 12.0 x))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (25 enodes)
* * [misc]simplify:  iters left: 4 (45 enodes)
* * [misc]simplify:  iters left: 3 (78 enodes)
* * [misc]simplify:  iters left: 2 (180 enodes)
* [exit]simplify:  Simplified to (- (* (* 8.0 x) (* x x)) (* 12.0 x))
* * * * [misc]progress:  [ 35 / 40 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (16 enodes)
* * [misc]simplify:  iters left: 4 (19 enodes)
* * [misc]simplify:  iters left: 3 (25 enodes)
* * [misc]simplify:  iters left: 2 (31 enodes)
* * [misc]simplify:  iters left: 1 (45 enodes)
* [exit]simplify:  Simplified to (+ (* (* x x) (* 8.0 x)) (* -12.0 x))
* * * * [misc]progress:  [ 36 / 40 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* -3 (log (/ 1 x)))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* -3 (log (/ 1 x))))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (24 enodes)
* * [misc]simplify:  iters left: 4 (30 enodes)
* * [misc]simplify:  iters left: 3 (47 enodes)
* * [misc]simplify:  iters left: 2 (98 enodes)
* * [misc]simplify:  iters left: 1 (214 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (/ 8.0 (pow x -3)))
* * * * [misc]progress:  [ 37 / 40 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* 3 (- (log -1) (log (/ -1 x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* 3 (- (log -1) (log (/ -1 x)))))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (24 enodes)
* * [misc]simplify:  iters left: 4 (37 enodes)
* * [misc]simplify:  iters left: 3 (70 enodes)
* * [misc]simplify:  iters left: 2 (170 enodes)
* * [misc]simplify:  iters left: 1 (496 enodes)
* [exit]simplify:  Simplified to (+ (* (* x 8.0) (* x x)) (* -12.0 x))
* * * * [misc]progress:  [ 38 / 40 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (pow x 3))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (pow x 3)))
* * [misc]simplify:  iters left: 5 (8 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* * [misc]simplify:  iters left: 2 (37 enodes)
* * [misc]simplify:  iters left: 1 (49 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (* (* 8.0 x) (* x x)))
* * * * [misc]progress:  [ 39 / 40 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (pow (/ 1 x) -3))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (pow (/ 1 x) -3)))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* [exit]simplify:  Simplified to (+ (* 8.0 (pow (/ 1 x) -3)) (* -12.0 x))
* * * * [misc]progress:  [ 40 / 40 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* 3 (- (log -1) (log (/ -1 x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* 3 (- (log -1) (log (/ -1 x)))))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (24 enodes)
* * [misc]simplify:  iters left: 4 (37 enodes)
* * [misc]simplify:  iters left: 3 (70 enodes)
* * [misc]simplify:  iters left: 2 (170 enodes)
* * [misc]simplify:  iters left: 1 (496 enodes)
* [exit]simplify:  Simplified to (+ (* (* x 8.0) (* x x)) (* -12.0 x))
* * * [misc]progress:  adding candidates to table
* * [misc]progress:  iteration 3 / 4
* * * [misc]progress:  picking best candidate
* * * * [misc]pick:  Picked  #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))>
* * * [misc]progress:  localizing error
* * * [misc]progress:  generating rewritten candidates
* * * * [misc]progress:  [ 1 / 4 ] rewriting at (2)
* * * * [misc]progress:  [ 2 / 4 ] rewriting at (2 2 2 1 1)
* * * * [misc]progress:  [ 3 / 4 ] rewriting at (2 2 2 1)
* * * * [misc]progress:  [ 4 / 4 ] rewriting at (2 2 2 1 2 1)
* * * [misc]progress:  generating series expansions
* * * * [misc]progress:  [ 1 / 4 ] generating series at (2)
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 x) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (log x)) 1/3) (pow (* 3 (log x)) 1/3)) into (pow (* (pow 3 2) (pow (log x) 2)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) (pow (* 3 (log x)) 1/3)) into (* (pow (* 3 9) 1/3) (log x))
* [misc]backup-simplify:  Simplify (exp (* (pow (* 3 9) 1/3) (log x))) into (pow x (pow 27 1/3))
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 x) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (log x)) 1/3) (pow (* 3 (log x)) 1/3)) into (pow (* (pow 3 2) (pow (log x) 2)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) (pow (* 3 (log x)) 1/3)) into (* (pow (* 3 9) 1/3) (log x))
* [misc]backup-simplify:  Simplify (exp (* (pow (* 3 9) 1/3) (log x))) into (pow x (pow 27 1/3))
* [misc]backup-simplify:  Simplify (* -12.0 0) into 0
* [misc]backup-simplify:  Simplify (* 8.0 (pow x (pow 27 1/3))) into (* 8.0 (pow x (pow 27 1/3)))
* [misc]backup-simplify:  Simplify (+ 0 (* 8.0 (pow x (pow 27 1/3)))) into (* 8.0 (pow x (pow 27 1/3)))
* [misc]backup-simplify:  Simplify (* 8.0 (pow x (pow 27 1/3))) into (* 8.0 (pow x (pow 27 1/3)))
* [misc]backup-simplify:  Simplify (+ (* -12.0 1) (* 0 0)) into (- 12.0)
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (* 0 (pow (* 3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (* 0 (pow (* 3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* 3 9) 1/3) (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 (pow x (pow 27 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (- 12.0) 0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- 12.0) into (- 12.0)
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 1) (* 0 0))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* 3 9) 1/3) (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 (pow x (pow 27 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* 3 9) 1/3) (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x (pow 27 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* 3 9) 1/3) (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x (pow 27 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* 3 9) 1/3) (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x (pow 27 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* 3 9) 1/3) (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x (pow 27 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow 1 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow 1 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow 1 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow 1 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow (* 3 (log x)) 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow (* 3 (log x)) 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow (* 3 (log x)) 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow (* 3 (log x)) 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow (* 3 (log x)) 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow 1 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow 1 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow 1 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow 1 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow (* 3 (log x)) 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow (* 3 (log x)) 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow (* 3 (log x)) 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow (* 3 (log x)) 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow (* 3 (log x)) 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow 1 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow 1 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow 1 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow 1 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow (* 3 (log x)) 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow (* 3 (log x)) 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow (* 3 (log x)) 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow (* 3 (log x)) 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow (* 3 (log x)) 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* 3 9) 1/3) (log x))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x (pow 27 1/3)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* (- 12.0) x) (* 8.0 (pow x (pow 27 1/3)))) into (- (* 8.0 (pow x (pow 27 1/3))) (* 12.0 x))
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (exp (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x)))))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (exp (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* -3 (log x)) 1/3) (pow (* -3 (log x)) 1/3)) into (pow (* (pow -3 2) (pow (log x) 2)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) (pow (* -3 (log x)) 1/3)) into (* (pow (* -3 9) 1/3) (log x))
* [misc]backup-simplify:  Simplify (exp (* (pow (* -3 9) 1/3) (log x))) into (pow x (pow -27 1/3))
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (exp (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* -3 (log x)) 1/3) (pow (* -3 (log x)) 1/3)) into (pow (* (pow -3 2) (pow (log x) 2)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) (pow (* -3 (log x)) 1/3)) into (* (pow (* -3 9) 1/3) (log x))
* [misc]backup-simplify:  Simplify (exp (* (pow (* -3 9) 1/3) (log x))) into (pow x (pow -27 1/3))
* [misc]backup-simplify:  Simplify (* -12.0 1) into -12.0
* [misc]backup-simplify:  Simplify (+ -12.0 0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- 12.0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (* 8.0 (pow x (pow -27 1/3))) into (* 8.0 (pow x (pow -27 1/3)))
* [misc]backup-simplify:  Simplify (+ 0 (* 8.0 (pow x (pow -27 1/3)))) into (* 8.0 (pow x (pow -27 1/3)))
* [misc]backup-simplify:  Simplify (* 8.0 (pow x (pow -27 1/3))) into (* 8.0 (pow x (pow -27 1/3)))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (* 0 (pow (* -3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (* 0 (pow (* -3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* -3 9) 1/3) (log x))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 (pow x (pow -27 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* -3 9) 1/3) (log x))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 (pow x (pow -27 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* -3 9) 1/3) (log x))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x (pow -27 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* -3 9) 1/3) (log x))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x (pow -27 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* -3 9) 1/3) (log x))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x (pow -27 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow (* -3 9) 1/3) (log x))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow x (pow -27 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 (pow (/ 1 x) (pow -27 1/3))) (* (- 12.0) (/ 1 (/ 1 x)))) into (- (* 8.0 (pow (/ 1 x) (pow -27 1/3))) (* 12.0 x))
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (exp (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x))))))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (exp (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x))))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (- (log -1) (log x))) 1/3) (pow (* 3 (- (log -1) (log x))) 1/3)) into (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) (pow (* 3 (- (log -1) (log x))) 1/3)) into (* (- (log -1) (log x)) (pow (* 3 9) 1/3))
* [misc]backup-simplify:  Simplify (exp (* (- (log -1) (log x)) (pow (* 3 9) 1/3))) into (exp (* (- (log -1) (log x)) (pow 27 1/3)))
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (exp (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x))))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (- (log -1) (log x))) 1/3) (pow (* 3 (- (log -1) (log x))) 1/3)) into (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) (pow (* 3 (- (log -1) (log x))) 1/3)) into (* (- (log -1) (log x)) (pow (* 3 9) 1/3))
* [misc]backup-simplify:  Simplify (exp (* (- (log -1) (log x)) (pow (* 3 9) 1/3))) into (exp (* (- (log -1) (log x)) (pow 27 1/3)))
* [misc]backup-simplify:  Simplify (* -12.0 -1) into 12.0
* [misc]backup-simplify:  Simplify (+ 12.0 0) into 12.0
* [misc]backup-simplify:  Simplify 12.0 into 12.0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (* 8.0 (exp (* (- (log -1) (log x)) (pow 27 1/3)))) into (* 8.0 (exp (* (- (log -1) (log x)) (pow 27 1/3))))
* [misc]backup-simplify:  Simplify (+ 0 (* 8.0 (exp (* (- (log -1) (log x)) (pow 27 1/3))))) into (* 8.0 (exp (* (- (log -1) (log x)) (pow 27 1/3))))
* [misc]backup-simplify:  Simplify (* 8.0 (exp (* (- (log -1) (log x)) (pow 27 1/3)))) into (* 8.0 (exp (* (- (log -1) (log x)) (pow 27 1/3))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (pow (* 3 9) 1/3))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 (exp (* (- (log -1) (log x)) (pow 27 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (pow (* 3 9) 1/3))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 (exp (* (- (log -1) (log x)) (pow 27 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (pow (* 3 9) 1/3))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (- (log -1) (log x)) (pow 27 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (pow (* 3 9) 1/3))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (- (log -1) (log x)) (pow 27 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (pow (* 3 9) 1/3))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (- (log -1) (log x)) (pow 27 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (pow (* 3 9) 1/3))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (- (log -1) (log x)) (pow 27 1/3)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 (exp (* (- (log -1) (log (/ 1 (- x)))) (pow 27 1/3)))) (* 12.0 (/ 1 (/ 1 (- x))))) into (- (* 8.0 (exp (* (pow 27 1/3) (- (log -1) (log (/ -1 x)))))) (* 12.0 x))
* * * * [misc]progress:  [ 2 / 4 ] generating series at (2 2 2 1 1)
* [misc]approximate:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (log x)) 1/3) (pow (* 3 (log x)) 1/3)) into (pow (* (pow 3 2) (pow (log x) 2)) 1/3)
* [misc]backup-simplify:  Simplify (pow (* (pow 3 2) (pow (log x) 2)) 1/3) into (pow (* 9 (pow (log x) 2)) 1/3)
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (* 0 (pow (* 3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (pow (* 9 (pow (log x) 2)) 1/3) into (pow (* 9 (pow (log x) 2)) 1/3)
* [misc]approximate:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* -3 (log x)) 1/3) (pow (* -3 (log x)) 1/3)) into (pow (* (pow -3 2) (pow (log x) 2)) 1/3)
* [misc]backup-simplify:  Simplify (pow (* (pow -3 2) (pow (log x) 2)) 1/3) into (pow (* 9 (pow (log x) 2)) 1/3)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (* 0 (pow (* -3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (pow (* 9 (pow (log (/ 1 x)) 2)) 1/3) into (pow (* 9 (pow (log (/ 1 x)) 2)) 1/3)
* [misc]approximate:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (- (log -1) (log x))) 1/3) (pow (* 3 (- (log -1) (log x))) 1/3)) into (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3)
* [misc]backup-simplify:  Simplify (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) into (pow (* 9 (pow (- (log -1) (log x)) 2)) 1/3)
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (pow (* 9 (pow (- (log -1) (log (/ 1 (- x)))) 2)) 1/3) into (pow (* 9 (pow (- (log -1) (log (/ -1 x))) 2)) 1/3)
* * * * [misc]progress:  [ 3 / 4 ] generating series at (2 2 2 1)
* [misc]approximate:  Taking taylor expansion of (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (log x)) 1/3) (pow (* 3 (log x)) 1/3)) into (pow (* (pow 3 2) (pow (log x) 2)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) (pow (* 3 (log x)) 1/3)) into (* (pow (* 3 9) 1/3) (log x))
* [misc]backup-simplify:  Simplify (* (pow (* 3 9) 1/3) (log x)) into (* (pow 27 1/3) (log x))
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (* 0 (pow (* 3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (* 0 (pow (* 3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow 3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* (pow 27 1/3) (log x)) into (* (pow 27 1/3) (log x))
* [misc]approximate:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* -3 (log x)) 1/3) (pow (* -3 (log x)) 1/3)) into (pow (* (pow -3 2) (pow (log x) 2)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) (pow (* -3 (log x)) 1/3)) into (* (pow (* -3 9) 1/3) (log x))
* [misc]backup-simplify:  Simplify (* (pow (* -3 9) 1/3) (log x)) into (* (pow -27 1/3) (log x))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (* 0 (pow (* -3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (* 0 (pow (* -3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow -3 2) (pow (log x) 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* (pow -27 1/3) (log (/ 1 x))) into (* (log (/ 1 x)) (pow -27 1/3))
* [misc]approximate:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x)))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (- (log -1) (log x))) 1/3) (pow (* 3 (- (log -1) (log x))) 1/3)) into (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) (pow (* 3 (- (log -1) (log x))) 1/3)) into (* (- (log -1) (log x)) (pow (* 3 9) 1/3))
* [misc]backup-simplify:  Simplify (* (- (log -1) (log x)) (pow (* 3 9) 1/3)) into (* (- (log -1) (log x)) (pow 27 1/3))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* (- (log -1) (log (/ 1 (- x)))) (pow 27 1/3)) into (* (pow 27 1/3) (- (log -1) (log (/ -1 x))))
* * * * [misc]progress:  [ 4 / 4 ] generating series at (2 2 2 1 2 1)
* [misc]approximate:  Taking taylor expansion of (* 3 (log x)) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]approximate:  Taking taylor expansion of (* 3 (log (/ 1 x))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (* -3 (log x)) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* -3 (log (/ 1 x))) into (* -3 (log (/ 1 x)))
* [misc]approximate:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log (/ 1 (- x))))) into (* 3 (- (log -1) (log (/ -1 x))))
* * * [misc]progress:  simplifying candidates
* * * * [misc]progress:  [ 1 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (log (* (exp (* -12.0 x)) (exp (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (exp (* -12.0 x)) (exp (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (33 enodes)
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (exp (* (log x) 3))))
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (exp (* (log x) 3))))
* * * * [misc]progress:  [ 2 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (pow (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))) 1))>
* * * * [misc]progress:  [ 3 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (exp (log (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (log (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (24 enodes)
* [exit]simplify:  Simplified to (log (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0)))
* [exit]simplify:  Simplified to (log (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0)))
* * * * [misc]progress:  [ 4 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (log (exp (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (exp (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (24 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (exp (* (log x) 3))))
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (exp (* (log x) 3))))
* * * * [misc]progress:  [ 5 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (* (* (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))) (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))) (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))) (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (25 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0))) (cbrt (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0))) (cbrt (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0))))
* [enter]simplify:  Simplifying (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (24 enodes)
* [exit]simplify:  Simplified to (cbrt (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0)))
* [exit]simplify:  Simplified to (cbrt (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0)))
* * * * [misc]progress:  [ 6 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (cbrt (* (* (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (* (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (35 enodes)
* * [misc]simplify:  iters left: 4 (123 enodes)
* * [misc]simplify:  iters left: 3 (427 enodes)
* [exit]simplify:  Simplified to (pow (+ (* -12.0 x) (* (pow x 3) 8.0)) 3)
* [exit]simplify:  Simplified to (pow (+ (* -12.0 x) (* (pow x 3) 8.0)) 3)
* * * * [misc]progress:  [ 7 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (* (sqrt (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))) (sqrt (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (sqrt (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (24 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0)))
* [exit]simplify:  Simplified to (sqrt (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0)))
* [enter]simplify:  Simplifying (sqrt (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (24 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0)))
* [exit]simplify:  Simplified to (sqrt (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0)))
* * * * [misc]progress:  [ 8 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (/ (+ (pow (* -12.0 x) 3) (pow (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))) 3)) (+ (* (* -12.0 x) (* -12.0 x)) (- (* (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))) (* (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))))))>
* [enter]simplify:  Simplifying (+ (pow (* -12.0 x) 3) (pow (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))) 3))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (34 enodes)
* * [misc]simplify:  iters left: 4 (83 enodes)
* * [misc]simplify:  iters left: 3 (151 enodes)
* * [misc]simplify:  iters left: 2 (214 enodes)
* * [misc]simplify:  iters left: 1 (296 enodes)
* [exit]simplify:  Simplified to (+ (pow (* (* x x) (* x 8.0)) 3) (pow (* -12.0 x) 3))
* [exit]simplify:  Simplified to (+ (pow (* (* x x) (* x 8.0)) 3) (pow (* -12.0 x) 3))
* [enter]simplify:  Simplifying (+ (* (* -12.0 x) (* -12.0 x)) (- (* (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))) (* (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (43 enodes)
* * [misc]simplify:  iters left: 4 (108 enodes)
* * [misc]simplify:  iters left: 3 (229 enodes)
* * [misc]simplify:  iters left: 2 (386 enodes)
* * [misc]simplify:  iters left: 1 (497 enodes)
* [exit]simplify:  Simplified to (+ (* (- (* (* x 8.0) (* x x)) (* -12.0 x)) (* (* x 8.0) (* x x))) (* (* -12.0 x) (* -12.0 x)))
* [exit]simplify:  Simplified to (+ (* (- (* (* x 8.0) (* x x)) (* -12.0 x)) (* (* x 8.0) (* x x))) (* (* -12.0 x) (* -12.0 x)))
* * * * [misc]progress:  [ 9 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (* 1 (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))))>
* * * * [misc]progress:  [ 10 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (/ (- (* (* -12.0 x) (* -12.0 x)) (* (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))) (- (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))))>
* [enter]simplify:  Simplifying (- (* (* -12.0 x) (* -12.0 x)) (* (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (15 enodes)
* * [misc]simplify:  iters left: 5 (34 enodes)
* * [misc]simplify:  iters left: 4 (66 enodes)
* * [misc]simplify:  iters left: 3 (119 enodes)
* * [misc]simplify:  iters left: 2 (207 enodes)
* * [misc]simplify:  iters left: 1 (390 enodes)
* [exit]simplify:  Simplified to (- (* (* -12.0 x) (* -12.0 x)) (* (* (* 8.0 x) (* x x)) (* (* 8.0 x) (* x x))))
* [exit]simplify:  Simplified to (- (* (* -12.0 x) (* -12.0 x)) (* (* (* 8.0 x) (* x x)) (* (* 8.0 x) (* x x))))
* [enter]simplify:  Simplifying (- (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (31 enodes)
* [exit]simplify:  Simplified to (- (* -12.0 x) (* (exp (* (log x) 3)) 8.0))
* [exit]simplify:  Simplified to (- (* -12.0 x) (* (exp (* (log x) 3)) 8.0))
* * * * [misc]progress:  [ 11 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))) (* -12.0 x)))>
* * * * [misc]progress:  [ 12 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow (* 3 (log x)) (+ 1/3 1/3)) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ 1/3 1/3)
* * [misc]simplify:  iters left: 2 (2 enodes)
* [exit]simplify:  Simplified to (+ 1/3 1/3)
* [exit]simplify:  Simplified to (+ 1/3 1/3)
* * * * [misc]progress:  [ 13 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow (cbrt (* 3 (log x))) (+ 1 1)) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ 1 1)
* * [misc]simplify:  iters left: 2 (2 enodes)
* * [misc]simplify:  iters left: 1 (4 enodes)
* [exit]simplify:  Simplified to (+ 1 1)
* [exit]simplify:  Simplified to (+ 1 1)
* * * * [misc]progress:  [ 14 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow (* (* 3 (log x)) (* 3 (log x))) 1/3) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* 3 (log x)) (* 3 (log x)))
* * [misc]simplify:  iters left: 5 (5 enodes)
* * [misc]simplify:  iters left: 4 (10 enodes)
* * [misc]simplify:  iters left: 3 (17 enodes)
* * [misc]simplify:  iters left: 2 (21 enodes)
* * [misc]simplify:  iters left: 1 (22 enodes)
* [exit]simplify:  Simplified to (* (* 3 (log x)) (* 3 (log x)))
* [exit]simplify:  Simplified to (* (* 3 (log x)) (* 3 (log x)))
* * * * [misc]progress:  [ 15 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) 1) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (7 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 16 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow (cbrt (* 3 (log x))) 2) (cbrt (* 3 (log x))))))))>
* * * * [misc]progress:  [ 17 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow (cbrt (* 3 (log x))) (+ 1 1)) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ 1 1)
* * [misc]simplify:  iters left: 2 (2 enodes)
* * [misc]simplify:  iters left: 1 (4 enodes)
* [exit]simplify:  Simplified to (+ 1 1)
* [exit]simplify:  Simplified to (+ 1 1)
* * * * [misc]progress:  [ 18 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) 1) (cbrt (* 3 (log x))))))))>
* * * * [misc]progress:  [ 19 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (exp (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x)))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (8 enodes)
* [exit]simplify:  Simplified to (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 20 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (exp (log (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (log (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 21 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (log (exp (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (exp (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (exp (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (exp (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 22 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (cbrt (* (* 3 (log x)) (* 3 (log x)))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* 3 (log x)) (* 3 (log x)))
* * [misc]simplify:  iters left: 5 (5 enodes)
* * [misc]simplify:  iters left: 4 (10 enodes)
* * [misc]simplify:  iters left: 3 (17 enodes)
* * [misc]simplify:  iters left: 2 (21 enodes)
* * [misc]simplify:  iters left: 1 (22 enodes)
* [exit]simplify:  Simplified to (* (* 3 (log x)) (* 3 (log x)))
* [exit]simplify:  Simplified to (* (* 3 (log x)) (* 3 (log x)))
* * * * [misc]progress:  [ 23 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))) (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (* (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))))
* [enter]simplify:  Simplifying (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (8 enodes)
* [exit]simplify:  Simplified to (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 24 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (cbrt (* (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (16 enodes)
* * [misc]simplify:  iters left: 4 (23 enodes)
* * [misc]simplify:  iters left: 3 (31 enodes)
* * [misc]simplify:  iters left: 2 (54 enodes)
* * [misc]simplify:  iters left: 1 (93 enodes)
* [exit]simplify:  Simplified to (* (* 3 (log x)) (* 3 (log x)))
* [exit]simplify:  Simplified to (* (* 3 (log x)) (* 3 (log x)))
* * * * [misc]progress:  [ 25 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (sqrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (sqrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (sqrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (fabs (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (fabs (cbrt (* 3 (log x))))
* [enter]simplify:  Simplifying (sqrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (fabs (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (fabs (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 26 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* 1 (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* * * * [misc]progress:  [ 27 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (cbrt 3)) (cbrt (log x))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (cbrt 3))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (* (cbrt 3) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt 3) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 28 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 29 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (sqrt (cbrt (* 3 (log x))))) (sqrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (sqrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (* (sqrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (sqrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 30 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) 1) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) 1)
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* * [misc]simplify:  iters left: 4 (13 enodes)
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* * * * [misc]progress:  [ 31 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt 3) (* (cbrt (log x)) (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (log x)) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (* (cbrt (log x)) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (log x)) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 32 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 33 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (sqrt (cbrt (* 3 (log x)))) (* (sqrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (sqrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (* (sqrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (sqrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 34 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* 1 (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (7 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 35 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))>
* * * * [misc]progress:  [ 36 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* 3 (log x)) (+ (+ 1/3 1/3) 1/3))))))>
* [enter]simplify:  Simplifying (+ (+ 1/3 1/3) 1/3)
* * [misc]simplify:  iters left: 4 (3 enodes)
* * [misc]simplify:  iters left: 3 (4 enodes)
* [exit]simplify:  Simplified to (+ (+ 1/3 1/3) 1/3)
* [exit]simplify:  Simplified to (+ (+ 1/3 1/3) 1/3)
* * * * [misc]progress:  [ 37 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (cbrt (* 3 (log x))) (+ (+ 1 1) 1))))))>
* [enter]simplify:  Simplifying (+ (+ 1 1) 1)
* * [misc]simplify:  iters left: 4 (3 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* * * * [misc]progress:  [ 38 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (cbrt (* 3 (log x))) (+ 2 1))))))>
* [enter]simplify:  Simplifying (+ 2 1)
* * [misc]simplify:  iters left: 2 (3 enodes)
* * [misc]simplify:  iters left: 1 (6 enodes)
* [exit]simplify:  Simplified to (+ 1 2)
* [exit]simplify:  Simplified to (+ 1 2)
* * * * [misc]progress:  [ 39 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (cbrt (* 3 (log x))) (+ (+ 1 1) 1))))))>
* [enter]simplify:  Simplifying (+ (+ 1 1) 1)
* * [misc]simplify:  iters left: 4 (3 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* * * * [misc]progress:  [ 40 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x))) 1/3)))))>
* [enter]simplify:  Simplifying (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (29 enodes)
* * [misc]simplify:  iters left: 3 (55 enodes)
* * [misc]simplify:  iters left: 2 (86 enodes)
* * [misc]simplify:  iters left: 1 (89 enodes)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* * * * [misc]progress:  [ 41 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) 1)))))>
* [enter]simplify:  Simplifying (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* * [misc]simplify:  iters left: 4 (10 enodes)
* [exit]simplify:  Simplified to (* 3 (log x))
* [exit]simplify:  Simplified to (* 3 (log x))
* * * * [misc]progress:  [ 42 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) 1)))))>
* [enter]simplify:  Simplifying (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* * [misc]simplify:  iters left: 4 (10 enodes)
* [exit]simplify:  Simplified to (* 3 (log x))
* [exit]simplify:  Simplified to (* 3 (log x))
* * * * [misc]progress:  [ 43 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (cbrt (* 3 (log x))) 3)))))>
* * * * [misc]progress:  [ 44 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (cbrt (* 3 (log x))) (+ (+ 1 1) 1))))))>
* [enter]simplify:  Simplifying (+ (+ 1 1) 1)
* * [misc]simplify:  iters left: 4 (3 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* * * * [misc]progress:  [ 45 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (cbrt (* 3 (log x))) (+ 2 1))))))>
* [enter]simplify:  Simplifying (+ 2 1)
* * [misc]simplify:  iters left: 2 (3 enodes)
* * [misc]simplify:  iters left: 1 (6 enodes)
* [exit]simplify:  Simplified to (+ 1 2)
* [exit]simplify:  Simplified to (+ 1 2)
* * * * [misc]progress:  [ 46 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (cbrt (* 3 (log x))) (+ (+ 1 1) 1))))))>
* [enter]simplify:  Simplifying (+ (+ 1 1) 1)
* * [misc]simplify:  iters left: 4 (3 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* [exit]simplify:  Simplified to (+ (+ 1 1) 1)
* * * * [misc]progress:  [ 47 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) 1)))))>
* * * * [misc]progress:  [ 48 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (exp (+ (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x))))) (log (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (+ (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x))))) (log (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (+ (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x))))) (log (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (+ (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x))))) (log (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 49 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (exp (+ (log (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (log (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (+ (log (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (log (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* [exit]simplify:  Simplified to (+ (log (cbrt (* 3 (log x)))) (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (+ (log (cbrt (* 3 (log x)))) (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 50 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (exp (log (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (log (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (16 enodes)
* * [misc]simplify:  iters left: 3 (17 enodes)
* * [misc]simplify:  iters left: 2 (22 enodes)
* [exit]simplify:  Simplified to (log (* 3 (log x)))
* [exit]simplify:  Simplified to (log (* 3 (log x)))
* * * * [misc]progress:  [ 51 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (log (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* [exit]simplify:  Simplified to (exp (* 3 (log x)))
* [exit]simplify:  Simplified to (exp (* 3 (log x)))
* * * * [misc]progress:  [ 52 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (cbrt (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (29 enodes)
* * [misc]simplify:  iters left: 3 (55 enodes)
* * [misc]simplify:  iters left: 2 (86 enodes)
* * [misc]simplify:  iters left: 1 (89 enodes)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* * * * [misc]progress:  [ 53 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (cbrt (* (* (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (* 3 (log x)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (163 enodes)
* * [misc]simplify:  iters left: 2 (309 enodes)
* * [misc]simplify:  iters left: 1 (480 enodes)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* * * * [misc]progress:  [ 54 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))) (cbrt (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))) (cbrt (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))) (cbrt (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* * [misc]simplify:  iters left: 4 (12 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* * [misc]simplify:  iters left: 2 (23 enodes)
* * [misc]simplify:  iters left: 1 (28 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [enter]simplify:  Simplifying (cbrt (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* * [misc]simplify:  iters left: 4 (11 enodes)
* * [misc]simplify:  iters left: 3 (15 enodes)
* * [misc]simplify:  iters left: 2 (22 enodes)
* * [misc]simplify:  iters left: 1 (27 enodes)
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* * * * [misc]progress:  [ 55 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (cbrt (* (* (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))) (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (* (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))) (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (18 enodes)
* * [misc]simplify:  iters left: 4 (34 enodes)
* * [misc]simplify:  iters left: 3 (54 enodes)
* * [misc]simplify:  iters left: 2 (90 enodes)
* * [misc]simplify:  iters left: 1 (220 enodes)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* * * * [misc]progress:  [ 56 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (sqrt (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))) (sqrt (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (sqrt (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* * [misc]simplify:  iters left: 4 (11 enodes)
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [enter]simplify:  Simplifying (sqrt (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* * [misc]simplify:  iters left: 4 (11 enodes)
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* * * * [misc]progress:  [ 57 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* 1 (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))))>
* * * * [misc]progress:  [ 58 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt 3)) (cbrt (log x)))))))>
* [enter]simplify:  Simplifying (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt 3))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* * [misc]simplify:  iters left: 3 (15 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt 3) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (* (cbrt 3) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 59 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x)))))))))>
* [enter]simplify:  Simplifying (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (22 enodes)
* * [misc]simplify:  iters left: 3 (26 enodes)
* * [misc]simplify:  iters left: 2 (28 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 60 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (sqrt (cbrt (* 3 (log x))))) (sqrt (cbrt (* 3 (log x)))))))))>
* [enter]simplify:  Simplifying (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (sqrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* * [misc]simplify:  iters left: 3 (15 enodes)
* [exit]simplify:  Simplified to (* (sqrt (cbrt (* 3 (log x)))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (sqrt (cbrt (* 3 (log x)))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 61 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) 1) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) 1)
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* * [misc]simplify:  iters left: 3 (16 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 62 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (cbrt (* 3 (log x))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (7 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 63 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (cbrt (* 3 (log x))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))))))>
* * * * [misc]progress:  [ 64 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (pow (* 3 (log x)) 1)))))))>
* * * * [misc]progress:  [ 65 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (exp (log (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (log (* 3 (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (9 enodes)
* * [misc]simplify:  iters left: 2 (10 enodes)
* [exit]simplify:  Simplified to (log (* 3 (log x)))
* [exit]simplify:  Simplified to (log (* 3 (log x)))
* * * * [misc]progress:  [ 66 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (log (exp (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (exp (* 3 (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (8 enodes)
* * [misc]simplify:  iters left: 2 (11 enodes)
* * [misc]simplify:  iters left: 1 (17 enodes)
* [exit]simplify:  Simplified to (pow x 3)
* [exit]simplify:  Simplified to (pow x 3)
* * * * [misc]progress:  [ 67 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (7 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [enter]simplify:  Simplifying (cbrt (* 3 (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* * * * [misc]progress:  [ 68 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (29 enodes)
* * [misc]simplify:  iters left: 3 (55 enodes)
* * [misc]simplify:  iters left: 2 (86 enodes)
* * [misc]simplify:  iters left: 1 (89 enodes)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* * * * [misc]progress:  [ 69 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* (sqrt (* 3 (log x))) (sqrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (sqrt (* 3 (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [enter]simplify:  Simplifying (sqrt (* 3 (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* * * * [misc]progress:  [ 70 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 1 (* 3 (log x)))))))))>
* * * * [misc]progress:  [ 71 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* (* 3 (* (cbrt (log x)) (cbrt (log x)))) (cbrt (log x)))))))))>
* [enter]simplify:  Simplifying (* 3 (* (cbrt (log x)) (cbrt (log x))))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* * [misc]simplify:  iters left: 4 (11 enodes)
* [exit]simplify:  Simplified to (* 3 (* (cbrt (log x)) (cbrt (log x))))
* [exit]simplify:  Simplified to (* 3 (* (cbrt (log x)) (cbrt (log x))))
* * * * [misc]progress:  [ 72 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* (* 3 (sqrt (log x))) (sqrt (log x)))))))))>
* [enter]simplify:  Simplifying (* 3 (sqrt (log x)))
* * [misc]simplify:  iters left: 4 (5 enodes)
* * [misc]simplify:  iters left: 3 (6 enodes)
* [exit]simplify:  Simplified to (* (sqrt (log x)) 3)
* [exit]simplify:  Simplified to (* (sqrt (log x)) 3)
* * * * [misc]progress:  [ 73 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* (* 3 1) (log x))))))))>
* [enter]simplify:  Simplifying (* 3 1)
* * [misc]simplify:  iters left: 2 (3 enodes)
* * [misc]simplify:  iters left: 1 (5 enodes)
* [exit]simplify:  Simplified to 3
* [exit]simplify:  Simplified to 3
* * * * [misc]progress:  [ 74 / 86 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* (log x) 3)))))))>
* * * * [misc]progress:  [ 75 / 86 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (pow x (pow 27 1/3))) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (pow x (pow 27 1/3))) (* 12.0 x))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (22 enodes)
* [exit]simplify:  Simplified to (- (* (pow x (cbrt 27)) 8.0) (* 12.0 x))
* * * * [misc]progress:  [ 76 / 86 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (pow (/ 1 x) (pow -27 1/3))) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (pow (/ 1 x) (pow -27 1/3))) (* 12.0 x))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (19 enodes)
* * [misc]simplify:  iters left: 4 (26 enodes)
* [exit]simplify:  Simplified to (- (* (pow (/ 1 x) (cbrt -27)) 8.0) (* 12.0 x))
* * * * [misc]progress:  [ 77 / 86 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (exp (* (pow 27 1/3) (- (log -1) (log (/ -1 x)))))) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (exp (* (pow 27 1/3) (- (log -1) (log (/ -1 x)))))) (* 12.0 x))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (46 enodes)
* * [misc]simplify:  iters left: 3 (67 enodes)
* * [misc]simplify:  iters left: 2 (103 enodes)
* * [misc]simplify:  iters left: 1 (227 enodes)
* [exit]simplify:  Simplified to (- (* 8.0 (pow x (cbrt 27))) (* 12.0 x))
* * * * [misc]progress:  [ 78 / 86 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow (* 9 (pow (log x) 2)) 1/3) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (pow (* 9 (pow (log x) 2)) 1/3) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (18 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (32 enodes)
* * [misc]simplify:  iters left: 3 (33 enodes)
* [exit]simplify:  Simplified to (+ (* (exp (* (cbrt (* 3 (log x))) (cbrt (* (* (log x) 9) (log x))))) 8.0) (* -12.0 x))
* * * * [misc]progress:  [ 79 / 86 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow (* 9 (pow (log (/ 1 x)) 2)) 1/3) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (pow (* 9 (pow (log (/ 1 x)) 2)) 1/3) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (21 enodes)
* * [misc]simplify:  iters left: 5 (36 enodes)
* * [misc]simplify:  iters left: 4 (46 enodes)
* * [misc]simplify:  iters left: 3 (89 enodes)
* * [misc]simplify:  iters left: 2 (305 enodes)
* [exit]simplify:  Simplified to (+ (* (exp (* (cbrt (* 3 (log x))) (cbrt (* (* (log x) 9) (log x))))) 8.0) (* -12.0 x))
* * * * [misc]progress:  [ 80 / 86 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow (* 9 (pow (- (log -1) (log (/ -1 x))) 2)) 1/3) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (pow (* 9 (pow (- (log -1) (log (/ -1 x))) 2)) 1/3) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (23 enodes)
* * [misc]simplify:  iters left: 5 (36 enodes)
* * [misc]simplify:  iters left: 4 (51 enodes)
* * [misc]simplify:  iters left: 3 (132 enodes)
* * [misc]simplify:  iters left: 2 (279 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (* (exp (* (cbrt (* (* (log x) (log x)) 9)) (cbrt (* (log x) 3)))) 8.0))
* * * * [misc]progress:  [ 81 / 86 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow 27 1/3) (log x))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (pow 27 1/3) (log x)))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (19 enodes)
* * [misc]simplify:  iters left: 4 (20 enodes)
* * [misc]simplify:  iters left: 3 (22 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (* (pow x (cbrt 27)) 8.0))
* * * * [misc]progress:  [ 82 / 86 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (log (/ 1 x)) (pow -27 1/3))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (log (/ 1 x)) (pow -27 1/3)))))
* * [misc]simplify:  iters left: 6 (14 enodes)
* * [misc]simplify:  iters left: 5 (28 enodes)
* * [misc]simplify:  iters left: 4 (37 enodes)
* * [misc]simplify:  iters left: 3 (63 enodes)
* * [misc]simplify:  iters left: 2 (125 enodes)
* * [misc]simplify:  iters left: 1 (273 enodes)
* [exit]simplify:  Simplified to (+ (/ 8.0 (pow x (cbrt -27))) (* -12.0 x))
* * * * [misc]progress:  [ 83 / 86 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow 27 1/3) (- (log -1) (log (/ -1 x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (pow 27 1/3) (- (log -1) (log (/ -1 x)))))))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (27 enodes)
* * [misc]simplify:  iters left: 4 (38 enodes)
* * [misc]simplify:  iters left: 3 (59 enodes)
* * [misc]simplify:  iters left: 2 (95 enodes)
* * [misc]simplify:  iters left: 1 (219 enodes)
* [exit]simplify:  Simplified to (+ (* 8.0 (pow x (cbrt 27))) (* -12.0 x))
* * * * [misc]progress:  [ 84 / 86 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (23 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (* (exp (* (log x) 3)) 8.0))
* * * * [misc]progress:  [ 85 / 86 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* -3 (log (/ 1 x)))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* -3 (log (/ 1 x))))))))
* * [misc]simplify:  iters left: 6 (19 enodes)
* * [misc]simplify:  iters left: 5 (34 enodes)
* * [misc]simplify:  iters left: 4 (43 enodes)
* * [misc]simplify:  iters left: 3 (55 enodes)
* * [misc]simplify:  iters left: 2 (82 enodes)
* * [misc]simplify:  iters left: 1 (171 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (* 8.0 (exp (* (cbrt (* (log x) (- -3))) (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3)))))))
* * * * [misc]progress:  [ 86 / 86 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (- (log -1) (log (/ -1 x))))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt (* 3 (- (log -1) (log (/ -1 x)))))))))
* * [misc]simplify:  iters left: 6 (20 enodes)
* * [misc]simplify:  iters left: 5 (33 enodes)
* * [misc]simplify:  iters left: 4 (48 enodes)
* * [misc]simplify:  iters left: 3 (63 enodes)
* * [misc]simplify:  iters left: 2 (90 enodes)
* * [misc]simplify:  iters left: 1 (176 enodes)
* [exit]simplify:  Simplified to (+ (* 8.0 (exp (* 3 (log x)))) (* -12.0 x))
* * * [misc]progress:  adding candidates to table
* * [misc]progress:  iteration 4 / 4
* * * [misc]progress:  picking best candidate
* * * * [misc]pick:  Picked  #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* * * [misc]progress:  localizing error
* * * [misc]progress:  generating rewritten candidates
* * * * [misc]progress:  [ 1 / 4 ] rewriting at (2)
* * * * [misc]progress:  [ 2 / 4 ] rewriting at (2 2 2 1 1 1 2)
* * * * [misc]progress:  [ 3 / 4 ] rewriting at (2 2 2 1 1 1)
* * * * [misc]progress:  [ 4 / 4 ] rewriting at (2 2 2 1)
* * * [misc]progress:  generating series expansions
* * * * [misc]progress:  [ 1 / 4 ] generating series at (2)
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 x) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* 3 (log x)) 1/3) 1/3) (pow (pow (* 3 (log x)) 1/3) 1/3)) into (pow (* (pow 3 2) (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (log x)) 1/3) (pow (* (pow 3 2) (pow (log x) 2)) 1/9)) into (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) (pow (pow (* 3 (log x)) 1/3) 1/3)) into (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) (pow (* 3 (log x)) 1/3)) into (* (pow 3 1/3) (* (pow 729 1/9) (log x)))
* [misc]backup-simplify:  Simplify (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))) into (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x))))
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 x) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* 3 (log x)) 1/3) 1/3) (pow (pow (* 3 (log x)) 1/3) 1/3)) into (pow (* (pow 3 2) (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (log x)) 1/3) (pow (* (pow 3 2) (pow (log x) 2)) 1/9)) into (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) (pow (pow (* 3 (log x)) 1/3) 1/3)) into (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) (pow (* 3 (log x)) 1/3)) into (* (pow 3 1/3) (* (pow 729 1/9) (log x)))
* [misc]backup-simplify:  Simplify (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))) into (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x))))
* [misc]backup-simplify:  Simplify (* -12.0 0) into 0
* [misc]backup-simplify:  Simplify (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x))))) into (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))))
* [misc]backup-simplify:  Simplify (+ 0 (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))))) into (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))))
* [misc]backup-simplify:  Simplify (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x))))) into (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))))
* [misc]backup-simplify:  Simplify (+ (* -12.0 1) (* 0 0)) into (- 12.0)
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (* 0 (pow (* 3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ (- 12.0) 0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- 12.0) into (- 12.0)
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 1) (* 0 0))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 1) (* 0 0)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow 1 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow 1 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow 1 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow 1 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow (* 3 (log x)) 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow (* 3 (log x)) 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow (* 3 (log x)) 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow (* 3 (log x)) 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow (* 3 (log x)) 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow 1 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow 1 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow 1 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow 1 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow (* 3 (log x)) 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow (* 3 (log x)) 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow (* 3 (log x)) 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow (* 3 (log x)) 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow (* 3 (log x)) 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow (pow (* 3 (log x)) 1/3) 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow 1 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow 1 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow 1 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow 1 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow (* 3 (log x)) 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow (* 3 (log x)) 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow (* 3 (log x)) 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow (* 3 (log x)) 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow (* 3 (log x)) 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow (pow (* 3 (log x)) 1/3) 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow 1 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow 1 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow 1 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow 1 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow (* 3 (log x)) 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow (* 3 (log x)) 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow (* 3 (log x)) 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow (* 3 (log x)) 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow (* 3 (log x)) 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow (pow (* 3 (log x)) 1/3) 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow 1 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow 1 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow 1 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow 1 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow 1 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow 1 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow 1 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow 1 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow 1 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow 1 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow 1 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 720 (/ (* (pow (* 1 0) 7)) (pow (* 3 (log x)) 7))) (* -2520 (/ (* (pow (* 1 0) 5) (pow (* 2 0) 1)) (pow (* 3 (log x)) 6))) (* 2520 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 2)) (pow (* 3 (log x)) 5))) (* 840 (/ (* (pow (* 1 0) 4) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 5))) (* -630 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 3)) (pow (* 3 (log x)) 4))) (* -1260 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* -210 (/ (* (pow (* 1 0) 3) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 4))) (* 210 (/ (* 1 (pow (* 2 0) 2) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 140 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 3))) (* 210 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* 42 (/ (* (pow (* 1 0) 2) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 3))) (* -35 (/ (* 1 1 (pow (* 6 0) 1) (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -21 (/ (* 1 (pow (* 2 0) 1) 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* -7 (/ (* (pow (* 1 0) 1) 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 1 (pow (* 5040 0) 1)) (pow (* 3 (log x)) 1)))) 5040) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))) (+ (* (/ (pow 0 7) 5040)) (* (/ (pow 0 5) 120) (/ (pow 0 1) 1)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 2) 2)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* (- 12.0) x) (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))))) into (- (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x))))) (* 12.0 x))
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (exp (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x)))))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (exp (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* -3 (log x)) 1/3) 1/3) (pow (pow (* -3 (log x)) 1/3) 1/3)) into (pow (* (pow -3 2) (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* -3 (log x)) 1/3) (pow (* (pow -3 2) (pow (log x) 2)) 1/9)) into (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) (pow (pow (* -3 (log x)) 1/3) 1/3)) into (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) (pow (* -3 (log x)) 1/3)) into (* (pow 729 1/9) (* (log x) (pow -3 1/3)))
* [misc]backup-simplify:  Simplify (exp (* (pow 729 1/9) (* (log x) (pow -3 1/3)))) into (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x))))
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 x)) (* 8.0 (exp (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* -3 (log x)) 1/3) 1/3) (pow (pow (* -3 (log x)) 1/3) 1/3)) into (pow (* (pow -3 2) (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* -3 (log x)) 1/3) (pow (* (pow -3 2) (pow (log x) 2)) 1/9)) into (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) (pow (pow (* -3 (log x)) 1/3) 1/3)) into (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) (pow (* -3 (log x)) 1/3)) into (* (pow 729 1/9) (* (log x) (pow -3 1/3)))
* [misc]backup-simplify:  Simplify (exp (* (pow 729 1/9) (* (log x) (pow -3 1/3)))) into (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x))))
* [misc]backup-simplify:  Simplify (* -12.0 1) into -12.0
* [misc]backup-simplify:  Simplify (+ -12.0 0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- 12.0) into (- 12.0)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (* 0 1)) into 0
* [misc]backup-simplify:  Simplify (* 8.0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x))))) into (* 8.0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x)))))
* [misc]backup-simplify:  Simplify (+ 0 (* 8.0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x)))))) into (* 8.0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x)))))
* [misc]backup-simplify:  Simplify (* 8.0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x))))) into (* 8.0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x)))))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (* 0 1))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (* 0 (pow (* -3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 729 1/9) (* (log x) (pow -3 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 729 1/9) (* (log x) (pow -3 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 729 1/9) (* (log x) (pow -3 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 729 1/9) (* (log x) (pow -3 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 729 1/9) (* (log x) (pow -3 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 1)))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* -3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* -3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* -3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (pow 729 1/9) (* (log x) (pow -3 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 (exp (* (pow 729 1/9) (* (pow -3 1/3) (log (/ 1 x)))))) (* (- 12.0) (/ 1 (/ 1 x)))) into (- (* 8.0 (exp (* (log (/ 1 x)) (* (pow 729 1/9) (pow -3 1/3))))) (* 12.0 x))
* [misc]approximate:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (exp (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x))))))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (exp (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x))))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)) into (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (- (log -1) (log x))) 1/3) (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)) into (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)) into (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9))
* [misc]backup-simplify:  Simplify (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) (pow (* 3 (- (log -1) (log x))) 1/3)) into (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))
* [misc]backup-simplify:  Simplify (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))) into (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9))))
* [misc]taylor:  Taking taylor expansion of (+ (* -12.0 (/ 1 (- x))) (* 8.0 (exp (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x))))))))) in x
* [misc]taylor:  Taking taylor expansion of (* -12.0 (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of -12.0 in x
* [misc]backup-simplify:  Simplify -12.0 into -12.0
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]taylor:  Taking taylor expansion of (* 8.0 (exp (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of 8.0 in x
* [misc]backup-simplify:  Simplify 8.0 into 8.0
* [misc]taylor:  Taking taylor expansion of (exp (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)) into (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (- (log -1) (log x))) 1/3) (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)) into (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)) into (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9))
* [misc]backup-simplify:  Simplify (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) (pow (* 3 (- (log -1) (log x))) 1/3)) into (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))
* [misc]backup-simplify:  Simplify (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))) into (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9))))
* [misc]backup-simplify:  Simplify (* -12.0 -1) into 12.0
* [misc]backup-simplify:  Simplify (+ 12.0 0) into 12.0
* [misc]backup-simplify:  Simplify 12.0 into 12.0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (* 0 -1)) into 0
* [misc]backup-simplify:  Simplify (* 8.0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9))))) into (* 8.0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))))
* [misc]backup-simplify:  Simplify (+ 0 (* 8.0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))))) into (* 8.0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))))
* [misc]backup-simplify:  Simplify (* 8.0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9))))) into (* 8.0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (* 0 -1))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (* 0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (* 0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* -12.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 -1)))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (exp (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9))))))))))) into 0
* [misc]backup-simplify:  Simplify (+ 0 0) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (+ (* 8.0 (exp (* (- (log -1) (log (/ 1 (- x)))) (* (pow 3 1/3) (pow 729 1/9))))) (* 12.0 (/ 1 (/ 1 (- x))))) into (- (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (- (log -1) (log (/ -1 x))))))) (* 12.0 x))
* * * * [misc]progress:  [ 2 / 4 ] generating series at (2 2 2 1 1 1 2)
* [misc]approximate:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* 3 (log x)) 1/3) 1/3) (pow (pow (* 3 (log x)) 1/3) 1/3)) into (pow (* (pow 3 2) (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (pow (* (pow 3 2) (pow (log x) 2)) 1/9) into (pow (* 9 (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (pow (* 9 (pow (log x) 2)) 1/9) into (pow (* 9 (pow (log x) 2)) 1/9)
* [misc]approximate:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* -3 (log x)) 1/3) 1/3) (pow (pow (* -3 (log x)) 1/3) 1/3)) into (pow (* (pow -3 2) (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (pow (* (pow -3 2) (pow (log x) 2)) 1/9) into (pow (* 9 (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* -3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* -3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (pow (* 9 (pow (log (/ 1 x)) 2)) 1/9) into (pow (* 9 (pow (log (/ 1 x)) 2)) 1/9)
* [misc]approximate:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)) into (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)
* [misc]backup-simplify:  Simplify (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9) into (pow (* 9 (pow (- (log -1) (log x)) 2)) 1/9)
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (pow (* 9 (pow (- (log -1) (log (/ 1 (- x)))) 2)) 1/9) into (pow (* 9 (pow (- (log -1) (log (/ -1 x))) 2)) 1/9)
* * * * [misc]progress:  [ 3 / 4 ] generating series at (2 2 2 1 1 1)
* [misc]approximate:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* 3 (log x)) 1/3) 1/3) (pow (pow (* 3 (log x)) 1/3) 1/3)) into (pow (* (pow 3 2) (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (log x)) 1/3) (pow (* (pow 3 2) (pow (log x) 2)) 1/9)) into (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3))
* [misc]backup-simplify:  Simplify (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) into (* (pow 3 1/3) (pow (* 9 (pow (log x) 5)) 1/9))
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* (pow 3 1/3) (pow (* 9 (pow (log x) 5)) 1/9)) into (* (pow 3 1/3) (pow (* 9 (pow (log x) 5)) 1/9))
* [misc]approximate:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* -3 (log x)) 1/3) 1/3) (pow (pow (* -3 (log x)) 1/3) 1/3)) into (pow (* (pow -3 2) (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* -3 (log x)) 1/3) (pow (* (pow -3 2) (pow (log x) 2)) 1/9)) into (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3))
* [misc]backup-simplify:  Simplify (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) into (* (pow -3 1/3) (pow (* 9 (pow (log x) 5)) 1/9))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* -3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* -3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* (pow -3 1/3) (pow (* 9 (pow (log (/ 1 x)) 5)) 1/9)) into (* (pow (* (pow (log (/ 1 x)) 5) 9) 1/9) (pow -3 1/3))
* [misc]approximate:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)) into (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (- (log -1) (log x))) 1/3) (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)) into (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3))
* [misc]backup-simplify:  Simplify (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) into (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* (pow (* (pow (- (log -1) (log (/ 1 (- x)))) 5) 9) 1/9) (pow 3 1/3)) into (* (pow 3 1/3) (pow (* 9 (pow (- (log -1) (log (/ -1 x))) 5)) 1/9))
* * * * [misc]progress:  [ 4 / 4 ] generating series at (2 2 2 1)
* [misc]approximate:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (log x)) 1/3)) into (log (pow (* 3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (log x)) 1/3))) into (* 1/3 (log (pow (* 3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) into (pow (pow (* 3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log x))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log x)))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log x))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log x)) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (* 3 (log x)) into (* 3 (log x))
* [misc]backup-simplify:  Simplify (log (* 3 (log x))) into (log (* 3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (log x)))) into (* 1/3 (log (* 3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (log x))))) into (pow (* 3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* 3 (log x)) 1/3) 1/3) (pow (pow (* 3 (log x)) 1/3) 1/3)) into (pow (* (pow 3 2) (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (log x)) 1/3) (pow (* (pow 3 2) (pow (log x) 2)) 1/9)) into (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) (pow (pow (* 3 (log x)) 1/3) 1/3)) into (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) (pow (* 3 (log x)) 1/3)) into (* (pow 3 1/3) (* (pow 729 1/9) (log x)))
* [misc]backup-simplify:  Simplify (* (pow 3 1/3) (* (pow 729 1/9) (log x))) into (* (pow 3 1/3) (* (pow 729 1/9) (log x)))
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (log x))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (* 0 (pow (* 3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- -1) (log x)) 0) into (log x)
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow 3 2) (pow (log x) 2)) 1/9)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow 3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* (pow 3 1/3) (* (pow 729 1/9) (log x))) into (* (pow 3 1/3) (* (pow 729 1/9) (log x)))
* [misc]approximate:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 x)))) (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 x))))) (cbrt (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* -3 (log x)) 1/3)) into (log (pow (* -3 (log x)) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* -3 (log x)) 1/3))) into (* 1/3 (log (pow (* -3 (log x)) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) into (pow (pow (* -3 (log x)) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 x))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 x)))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 x))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 x)) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (/ 1 1) into 1
* [misc]backup-simplify:  Simplify (log 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log x))) into (* -3 (log x))
* [misc]backup-simplify:  Simplify (log (* -3 (log x))) into (log (* -3 (log x)))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* -3 (log x)))) into (* 1/3 (log (* -3 (log x))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* -3 (log x))))) into (pow (* -3 (log x)) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* -3 (log x)) 1/3) 1/3) (pow (pow (* -3 (log x)) 1/3) 1/3)) into (pow (* (pow -3 2) (pow (log x) 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* -3 (log x)) 1/3) (pow (* (pow -3 2) (pow (log x) 2)) 1/9)) into (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) (pow (pow (* -3 (log x)) 1/3) 1/3)) into (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) (pow (* -3 (log x)) 1/3)) into (* (pow 729 1/9) (* (log x) (pow -3 1/3)))
* [misc]backup-simplify:  Simplify (* (pow 729 1/9) (* (log x) (pow -3 1/3))) into (* (pow 729 1/9) (* (pow -3 1/3) (log x)))
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow 1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* -3 (log x)) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* -3 (log x))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (* 0 (pow (* -3 (log x)) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow 1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow 1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* -3 (log x)) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow 1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow 1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* -3 (log x)) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow 1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow 1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow 1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow 1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* -3 (log x)) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* -3 (log x)) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* -3 (log x)) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow 1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow 1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow 1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow 1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow 1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* -3 (log x)) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* -3 (log x)) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* -3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* -3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* -3 (log x)) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* -3 (log x)) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* -3 (log x)) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* -3 (log x)) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* -3 (log x)) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* -3 (log x)) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* -3 (log x)) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* -3 (log x)) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (- (+ (* 1 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)) (* 0 (/ 0 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow 1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow 1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow 1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow 1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow 1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow 1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow 1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow 1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow 1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow 1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow 1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) 0) into (- (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* -3 (log x)) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* -3 (log x)) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* -3 (log x)) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* -3 (log x)) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* -3 (log x)) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* -3 (log x)) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* -3 (log x)) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* -3 (log x)) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* -3 (log x)) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* -3 (log x)) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* -3 (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* -3 (log x))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* -3 (log x)) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow -3 2) (pow (log x) 2)) 1/9)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* 9 (pow (log x) 5)) 1/9) (pow -3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* -3 (log x)) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow -3 4) 9) 1/9) (pow (pow (log x) 2) 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* -3 (log x)) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* (pow 729 1/9) (* (pow -3 1/3) (log (/ 1 x)))) into (* (log (/ 1 x)) (* (pow 729 1/9) (pow -3 1/3)))
* [misc]approximate:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x)))))) in (x) around 0
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (* (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* (cbrt (* 3 (log (/ 1 (- x))))) (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]taylor:  Taking taylor expansion of (* (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) (cbrt (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Rewrote expression to (pow (cbrt (* 3 (log (/ 1 (- x))))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x)))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (cbrt (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (cbrt (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (log (pow (* 3 (- (log -1) (log x))) 1/3)) into (log (pow (* 3 (- (log -1) (log x))) 1/3))
* [misc]backup-simplify:  Simplify (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3))) into (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)
* [misc]taylor:  Taking taylor expansion of (cbrt (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Rewrote expression to (pow (* 3 (log (/ 1 (- x)))) 1/3)
* [misc]taylor:  Taking taylor expansion of (exp (* 1/3 (log (* 3 (log (/ 1 (- x))))))) in x
* [misc]taylor:  Taking taylor expansion of (* 1/3 (log (* 3 (log (/ 1 (- x)))))) in x
* [misc]taylor:  Taking taylor expansion of 1/3 in x
* [misc]backup-simplify:  Simplify 1/3 into 1/3
* [misc]taylor:  Taking taylor expansion of (log (* 3 (log (/ 1 (- x))))) in x
* [misc]taylor:  Taking taylor expansion of (* 3 (log (/ 1 (- x)))) in x
* [misc]taylor:  Taking taylor expansion of 3 in x
* [misc]backup-simplify:  Simplify 3 into 3
* [misc]taylor:  Taking taylor expansion of (log (/ 1 (- x))) in x
* [misc]taylor:  Taking taylor expansion of (/ 1 (- x)) in x
* [misc]taylor:  Taking taylor expansion of (- x) in x
* [misc]taylor:  Taking taylor expansion of x in x
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify 1 into 1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (/ 1 -1) into -1
* [misc]backup-simplify:  Simplify (log -1) into (log -1)
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (* 3 (- (log -1) (log x))) into (* 3 (- (log -1) (log x)))
* [misc]backup-simplify:  Simplify (log (* 3 (- (log -1) (log x)))) into (log (* 3 (- (log -1) (log x))))
* [misc]backup-simplify:  Simplify (* 1/3 (log (* 3 (- (log -1) (log x))))) into (* 1/3 (log (* 3 (- (log -1) (log x)))))
* [misc]backup-simplify:  Simplify (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) into (pow (* 3 (- (log -1) (log x))) 1/3)
* [misc]backup-simplify:  Simplify (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)) into (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)
* [misc]backup-simplify:  Simplify (* (pow (* 3 (- (log -1) (log x))) 1/3) (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)) into (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3))
* [misc]backup-simplify:  Simplify (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)) into (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9))
* [misc]backup-simplify:  Simplify (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) (pow (* 3 (- (log -1) (log x))) 1/3)) into (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))
* [misc]backup-simplify:  Simplify (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9))) into (* (- (log -1) (log x)) (* (pow 3 1/3) (pow 729 1/9)))
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow -1 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (* 0 (- (log -1) (log x)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 1 (/ (* (pow (* 1 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 1) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (* 0 (log (* 3 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow -1 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow -1 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -1 (/ (* (pow (* 1 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 2) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow -1 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow -1 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 2 (/ (* (pow (* 1 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 6) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow -1 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow -1 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow -1 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow -1 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -6 (/ (* (pow (* 1 0) 4)) (pow (* 3 (- (log -1) (log x))) 4))) (* 12 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -3 (/ (* 1 (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -4 (/ (* (pow (* 1 0) 1) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 24) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 4) 24)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow -1 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow -1 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow -1 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow -1 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow -1 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x)))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* 24 (/ (* (pow (* 1 0) 5)) (pow (* 3 (- (log -1) (log x))) 5))) (* -60 (/ (* (pow (* 1 0) 3) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 3))) (* 20 (/ (* (pow (* 1 0) 2) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -5 (/ (* (pow (* 1 0) 1) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 120) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x)))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 5) 120)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (pow (* 3 (- (log -1) (log x))) 1/3))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (pow (* 3 (- (log -1) (log x))) 1/3)))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- 0) into 0
* [misc]backup-simplify:  Simplify (- 1) into -1
* [misc]backup-simplify:  Simplify (- (+ (* -1 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)) (* 0 (/ 0 -1)))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow -1 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow -1 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow -1 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow -1 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow -1 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow -1 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow -1 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow -1 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow -1 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow -1 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow -1 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* (- 1) (log x)) (log -1)) into (- (log -1) (log x))
* [misc]backup-simplify:  Simplify (+ (* 3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (- (log -1) (log x))))))))) into 0
* [misc]backup-simplify:  Simplify (/ (+ (* -120 (/ (* (pow (* 1 0) 6)) (pow (* 3 (- (log -1) (log x))) 6))) (* 360 (/ (* (pow (* 1 0) 4) (pow (* 2 0) 1)) (pow (* 3 (- (log -1) (log x))) 5))) (* -270 (/ (* (pow (* 1 0) 2) (pow (* 2 0) 2)) (pow (* 3 (- (log -1) (log x))) 4))) (* -120 (/ (* (pow (* 1 0) 3) 1 (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 4))) (* 30 (/ (* 1 (pow (* 2 0) 3)) (pow (* 3 (- (log -1) (log x))) 3))) (* 120 (/ (* (pow (* 1 0) 1) (pow (* 2 0) 1) (pow (* 6 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* 30 (/ (* (pow (* 1 0) 2) 1 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 3))) (* -10 (/ (* 1 1 (pow (* 6 0) 2)) (pow (* 3 (- (log -1) (log x))) 2))) (* -15 (/ (* 1 (pow (* 2 0) 1) 1 (pow (* 24 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* -6 (/ (* (pow (* 1 0) 1) 1 1 1 (pow (* 120 0) 1)) (pow (* 3 (- (log -1) (log x))) 2))) (* 1 (/ (* 1 1 1 1 1 (pow (* 720 0) 1)) (pow (* 3 (- (log -1) (log x))) 1)))) 720) into 0
* [misc]backup-simplify:  Simplify (+ (* 1/3 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (log (* 3 (- (log -1) (log x))))))))))) into 0
* [misc]backup-simplify:  Simplify (* (exp (* 1/3 (log (* 3 (- (log -1) (log x)))))) (+ (* (/ (pow 0 6) 720)) (* (/ (pow 0 4) 24) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2) (/ (pow 0 2) 2)) (* (/ (pow 0 2) 2) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 3) 6)) (* (/ (pow 0 1) 1) (/ (pow 0 1) 1)) (* (/ (pow 0 2) 2)) (* (/ (pow 0 1) 1)))) into 0
* [misc]backup-simplify:  Simplify (+ (* (pow (* 3 (- (log -1) (log x))) 1/3) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* (pow (- (log -1) (log x)) 2) (pow 3 2)) 1/9)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (* (pow (- (log -1) (log x)) 5) 9) 1/9) (pow 3 1/3)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (pow (* 3 (- (log -1) (log x))) 1/3) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify (+ (* (* (pow (pow (- (log -1) (log x)) 2) 1/3) (pow (* (pow 3 4) 9) 1/9)) 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (+ (* 0 0) (* 0 (pow (* 3 (- (log -1) (log x))) 1/3)))))))) into 0
* [misc]backup-simplify:  Simplify 0 into 0
* [misc]backup-simplify:  Simplify (* (- (log -1) (log (/ 1 (- x)))) (* (pow 3 1/3) (pow 729 1/9))) into (* (pow 3 1/3) (* (pow 729 1/9) (- (log -1) (log (/ -1 x)))))
* * * [misc]progress:  simplifying candidates
* * * * [misc]progress:  [ 1 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (log (* (exp (* -12.0 x)) (exp (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (exp (* -12.0 x)) (exp (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (18 enodes)
* * [misc]simplify:  iters left: 5 (39 enodes)
* * [misc]simplify:  iters left: 4 (69 enodes)
* * [misc]simplify:  iters left: 3 (86 enodes)
* * [misc]simplify:  iters left: 2 (157 enodes)
* * [misc]simplify:  iters left: 1 (212 enodes)
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (exp (* (log x) 3))))
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (exp (* (log x) 3))))
* * * * [misc]progress:  [ 2 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (pow (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))) 1))>
* * * * [misc]progress:  [ 3 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (exp (log (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (log (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (32 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (79 enodes)
* * [misc]simplify:  iters left: 2 (150 enodes)
* * [misc]simplify:  iters left: 1 (195 enodes)
* [exit]simplify:  Simplified to (log (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x)))
* [exit]simplify:  Simplified to (log (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x)))
* * * * [misc]progress:  [ 4 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (log (exp (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (exp (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (35 enodes)
* * [misc]simplify:  iters left: 4 (71 enodes)
* * [misc]simplify:  iters left: 3 (94 enodes)
* * [misc]simplify:  iters left: 2 (165 enodes)
* * [misc]simplify:  iters left: 1 (252 enodes)
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (exp (* (log x) 3))))
* [exit]simplify:  Simplified to (* (exp (* -12.0 x)) (pow (exp 8.0) (exp (* (log x) 3))))
* * * * [misc]progress:  [ 5 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (* (* (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))) (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))) (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))) (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))))
* * [misc]simplify:  iters left: 6 (18 enodes)
* * [misc]simplify:  iters left: 5 (33 enodes)
* * [misc]simplify:  iters left: 4 (58 enodes)
* * [misc]simplify:  iters left: 3 (79 enodes)
* * [misc]simplify:  iters left: 2 (150 enodes)
* * [misc]simplify:  iters left: 1 (202 enodes)
* [exit]simplify:  Simplified to (* (cbrt (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x))) (cbrt (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x))))
* [exit]simplify:  Simplified to (* (cbrt (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x))) (cbrt (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x))))
* [enter]simplify:  Simplifying (cbrt (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (32 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (79 enodes)
* * [misc]simplify:  iters left: 2 (150 enodes)
* * [misc]simplify:  iters left: 1 (195 enodes)
* [exit]simplify:  Simplified to (cbrt (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x)))
* [exit]simplify:  Simplified to (cbrt (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x)))
* * * * [misc]progress:  [ 6 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (cbrt (* (* (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (* (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (18 enodes)
* * [misc]simplify:  iters left: 5 (46 enodes)
* * [misc]simplify:  iters left: 4 (156 enodes)
* * [misc]simplify:  iters left: 3 (482 enodes)
* [exit]simplify:  Simplified to (pow (+ (* 8.0 (exp (* (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3))) (cbrt (* (log x) 3))))) (* -12.0 x)) 3)
* [exit]simplify:  Simplified to (pow (+ (* 8.0 (exp (* (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3))) (cbrt (* (log x) 3))))) (* -12.0 x)) 3)
* * * * [misc]progress:  [ 7 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (* (sqrt (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))) (sqrt (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (sqrt (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (32 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (79 enodes)
* * [misc]simplify:  iters left: 2 (150 enodes)
* * [misc]simplify:  iters left: 1 (195 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x)))
* [exit]simplify:  Simplified to (sqrt (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x)))
* [enter]simplify:  Simplifying (sqrt (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (17 enodes)
* * [misc]simplify:  iters left: 5 (32 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (79 enodes)
* * [misc]simplify:  iters left: 2 (150 enodes)
* * [misc]simplify:  iters left: 1 (195 enodes)
* [exit]simplify:  Simplified to (sqrt (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x)))
* [exit]simplify:  Simplified to (sqrt (+ (* 8.0 (exp (* (log x) 3))) (* -12.0 x)))
* * * * [misc]progress:  [ 8 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (/ (+ (pow (* -12.0 x) 3) (pow (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))) 3)) (+ (* (* -12.0 x) (* -12.0 x)) (- (* (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))) (* (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))))))>
* [enter]simplify:  Simplifying (+ (pow (* -12.0 x) 3) (pow (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))) 3))
* * [misc]simplify:  iters left: 6 (18 enodes)
* * [misc]simplify:  iters left: 5 (45 enodes)
* * [misc]simplify:  iters left: 4 (119 enodes)
* * [misc]simplify:  iters left: 3 (211 enodes)
* * [misc]simplify:  iters left: 2 (371 enodes)
* [exit]simplify:  Simplified to (+ (pow (* 8.0 (exp (pow (cbrt (* 3 (log x))) 3))) 3) (pow (* -12.0 x) 3))
* [exit]simplify:  Simplified to (+ (pow (* 8.0 (exp (pow (cbrt (* 3 (log x))) 3))) 3) (pow (* -12.0 x) 3))
* [enter]simplify:  Simplifying (+ (* (* -12.0 x) (* -12.0 x)) (- (* (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))) (* (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))))
* * [misc]simplify:  iters left: 6 (20 enodes)
* * [misc]simplify:  iters left: 5 (54 enodes)
* * [misc]simplify:  iters left: 4 (141 enodes)
* * [misc]simplify:  iters left: 3 (284 enodes)
* [exit]simplify:  Simplified to (- (* (exp (* (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3))) (+ (cbrt (* (log x) 3)) (cbrt (* (log x) 3))))) (* 8.0 8.0)) (- (* (* x (* -12.0 8.0)) (exp (* (cbrt (* (log x) 3)) (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3)))))) (* (* -12.0 x) (* -12.0 x))))
* [exit]simplify:  Simplified to (- (* (exp (* (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3))) (+ (cbrt (* (log x) 3)) (cbrt (* (log x) 3))))) (* 8.0 8.0)) (- (* (* x (* -12.0 8.0)) (exp (* (cbrt (* (log x) 3)) (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3)))))) (* (* -12.0 x) (* -12.0 x))))
* * * * [misc]progress:  [ 9 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (* 1 (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))))>
* * * * [misc]progress:  [ 10 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (/ (- (* (* -12.0 x) (* -12.0 x)) (* (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))) (- (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))))>
* [enter]simplify:  Simplifying (- (* (* -12.0 x) (* -12.0 x)) (* (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (18 enodes)
* * [misc]simplify:  iters left: 5 (45 enodes)
* * [misc]simplify:  iters left: 4 (102 enodes)
* * [misc]simplify:  iters left: 3 (174 enodes)
* * [misc]simplify:  iters left: 2 (347 enodes)
* [exit]simplify:  Simplified to (- (* (* -12.0 x) (* -12.0 x)) (* (exp (* (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3))) (+ (cbrt (* (log x) 3)) (cbrt (* (log x) 3))))) (* 8.0 8.0)))
* [exit]simplify:  Simplified to (- (* (* -12.0 x) (* -12.0 x)) (* (exp (* (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3))) (+ (cbrt (* (log x) 3)) (cbrt (* (log x) 3))))) (* 8.0 8.0)))
* [enter]simplify:  Simplifying (- (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (32 enodes)
* * [misc]simplify:  iters left: 4 (66 enodes)
* * [misc]simplify:  iters left: 3 (88 enodes)
* * [misc]simplify:  iters left: 2 (156 enodes)
* * [misc]simplify:  iters left: 1 (212 enodes)
* [exit]simplify:  Simplified to (- (* -12.0 x) (* 8.0 (exp (* (log x) 3))))
* [exit]simplify:  Simplified to (- (* -12.0 x) (* 8.0 (exp (* (log x) 3))))
* * * * [misc]progress:  [ 11 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))) (* -12.0 x)))>
* * * * [misc]progress:  [ 12 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (cbrt (* 3 (log x))) (+ 1/3 1/3))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ 1/3 1/3)
* * [misc]simplify:  iters left: 2 (2 enodes)
* [exit]simplify:  Simplified to (+ 1/3 1/3)
* [exit]simplify:  Simplified to (+ 1/3 1/3)
* * * * [misc]progress:  [ 13 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (cbrt (cbrt (* 3 (log x)))) (+ 1 1))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ 1 1)
* * [misc]simplify:  iters left: 2 (2 enodes)
* * [misc]simplify:  iters left: 1 (4 enodes)
* [exit]simplify:  Simplified to (+ 1 1)
* [exit]simplify:  Simplified to (+ 1 1)
* * * * [misc]progress:  [ 14 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) 1/3)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (7 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 15 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) 1)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (8 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 16 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (cbrt (cbrt (* 3 (log x)))) 2)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* * * * [misc]progress:  [ 17 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (cbrt (cbrt (* 3 (log x)))) (+ 1 1))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ 1 1)
* * [misc]simplify:  iters left: 2 (2 enodes)
* * [misc]simplify:  iters left: 1 (4 enodes)
* [exit]simplify:  Simplified to (+ 1 1)
* [exit]simplify:  Simplified to (+ 1 1)
* * * * [misc]progress:  [ 18 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) 1)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* * * * [misc]progress:  [ 19 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (exp (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 20 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (exp (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* [exit]simplify:  Simplified to (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 21 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (log (exp (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (exp (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* [exit]simplify:  Simplified to (exp (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (exp (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 22 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (7 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 23 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (* (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* [exit]simplify:  Simplified to (* (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* [enter]simplify:  Simplifying (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 24 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (cbrt (* (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (23 enodes)
* * [misc]simplify:  iters left: 3 (28 enodes)
* * [misc]simplify:  iters left: 2 (33 enodes)
* * [misc]simplify:  iters left: 1 (38 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 25 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (sqrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (sqrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (sqrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (fabs (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (fabs (cbrt (cbrt (* 3 (log x)))))
* [enter]simplify:  Simplifying (sqrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (fabs (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (fabs (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 26 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* 1 (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* * * * [misc]progress:  [ 27 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt 3))) (cbrt (cbrt (log x))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt 3)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt 3)))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt 3)))
* * * * [misc]progress:  [ 28 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * * * [misc]progress:  [ 29 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (sqrt (cbrt (* 3 (log x)))))) (cbrt (sqrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (cbrt (sqrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (sqrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (sqrt (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 30 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt 1)) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (cbrt 1))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt 1))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt 1))
* * * * [misc]progress:  [ 31 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (* (cbrt (cbrt (* 3 (log x)))) (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (cbrt (* 3 (log x)))))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (cbrt (* 3 (log x)))))))
* * * * [misc]progress:  [ 32 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (* (cbrt (cbrt (* 3 (log x)))) (sqrt (cbrt (cbrt (* 3 (log x)))))) (sqrt (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (sqrt (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (* (sqrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (sqrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 33 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (* (cbrt (cbrt (* 3 (log x)))) 1) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) 1)
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* [exit]simplify:  Simplified to (cbrt (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (cbrt (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 34 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt 3)) (* (cbrt (cbrt (log x))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (log x))) (cbrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (log x))) (cbrt (cbrt (* (log x) 3))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (log x))) (cbrt (cbrt (* (log x) 3))))
* * * * [misc]progress:  [ 35 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 36 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (sqrt (cbrt (* 3 (log x))))) (* (cbrt (sqrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (sqrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (sqrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (sqrt (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 37 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt 1) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (8 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 38 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 39 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (sqrt (cbrt (cbrt (* 3 (log x))))) (* (sqrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (sqrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (* (sqrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (sqrt (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 40 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* 1 (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (8 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 41 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* * * * [misc]progress:  [ 42 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (pow (cbrt (* 3 (log x))) (+ 1 (+ 1/3 1/3))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ 1 (+ 1/3 1/3))
* * [misc]simplify:  iters left: 4 (4 enodes)
* * [misc]simplify:  iters left: 3 (9 enodes)
* * [misc]simplify:  iters left: 2 (11 enodes)
* [exit]simplify:  Simplified to (+ 1 (+ 1/3 1/3))
* [exit]simplify:  Simplified to (+ 1 (+ 1/3 1/3))
* * * * [misc]progress:  [ 43 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (pow (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) 1/3) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (26 enodes)
* * [misc]simplify:  iters left: 3 (36 enodes)
* * [misc]simplify:  iters left: 2 (40 enodes)
* [exit]simplify:  Simplified to (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 44 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (pow (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) 1) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 45 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (pow (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) 1) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 46 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (pow (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) 1) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* * * * [misc]progress:  [ 47 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (exp (+ (log (cbrt (* 3 (log x)))) (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (log (cbrt (* 3 (log x)))) (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (16 enodes)
* [exit]simplify:  Simplified to (+ (log (cbrt (* 3 (log x)))) (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x)))))))
* [exit]simplify:  Simplified to (+ (log (cbrt (* 3 (log x)))) (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x)))))))
* * * * [misc]progress:  [ 48 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (exp (+ (log (cbrt (* 3 (log x)))) (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (log (cbrt (* 3 (log x)))) (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (18 enodes)
* * [misc]simplify:  iters left: 3 (19 enodes)
* [exit]simplify:  Simplified to (+ (log (cbrt (* 3 (log x)))) (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* [exit]simplify:  Simplified to (+ (log (cbrt (* 3 (log x)))) (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * * * [misc]progress:  [ 49 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (exp (log (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (log (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (16 enodes)
* * [misc]simplify:  iters left: 4 (21 enodes)
* * [misc]simplify:  iters left: 3 (29 enodes)
* [exit]simplify:  Simplified to (log (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (log (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 50 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (log (exp (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (exp (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (15 enodes)
* * [misc]simplify:  iters left: 4 (17 enodes)
* [exit]simplify:  Simplified to (pow (exp (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (pow (exp (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 51 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (26 enodes)
* * [misc]simplify:  iters left: 3 (36 enodes)
* * [misc]simplify:  iters left: 2 (40 enodes)
* [exit]simplify:  Simplified to (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 52 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* (* 3 (log x)) (* (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* 3 (log x)) (* (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (23 enodes)
* * [misc]simplify:  iters left: 4 (61 enodes)
* * [misc]simplify:  iters left: 3 (162 enodes)
* * [misc]simplify:  iters left: 2 (293 enodes)
* * [misc]simplify:  iters left: 1 (371 enodes)
* [exit]simplify:  Simplified to (* (* (* 3 (log x)) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (* (* 3 (log x)) (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 53 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (* (cbrt (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (14 enodes)
* * [misc]simplify:  iters left: 4 (16 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* [exit]simplify:  Simplified to (* (cbrt (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* [enter]simplify:  Simplifying (cbrt (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* [exit]simplify:  Simplified to (cbrt (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (cbrt (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 54 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (51 enodes)
* * [misc]simplify:  iters left: 3 (131 enodes)
* * [misc]simplify:  iters left: 2 (421 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (* 3 (log x)))
* [exit]simplify:  Simplified to (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (* 3 (log x)))
* * * * [misc]progress:  [ 55 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (sqrt (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (sqrt (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (sqrt (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* [exit]simplify:  Simplified to (sqrt (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (sqrt (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* [enter]simplify:  Simplifying (sqrt (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* [exit]simplify:  Simplified to (sqrt (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (sqrt (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 56 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* 1 (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* * * * [misc]progress:  [ 57 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (* (cbrt (* 3 (log x))) (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (cbrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 58 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt 3) (* (cbrt (log x)) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (log x)) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (cbrt (log x)))
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (cbrt (log x)))
* * * * [misc]progress:  [ 59 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (* (cbrt (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (11 enodes)
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* * * * [misc]progress:  [ 60 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (sqrt (cbrt (* 3 (log x)))) (* (sqrt (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (sqrt (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (13 enodes)
* * [misc]simplify:  iters left: 4 (15 enodes)
* [exit]simplify:  Simplified to (* (sqrt (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* [exit]simplify:  Simplified to (* (sqrt (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * * * [misc]progress:  [ 61 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* 1 (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (12 enodes)
* * [misc]simplify:  iters left: 4 (14 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 62 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* * * * [misc]progress:  [ 63 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (cbrt (* 3 (log x))) (+ (+ (+ 1 (+ 1/3 1/3)) 1/3) 1))))))>
* [enter]simplify:  Simplifying (+ (+ (+ 1 (+ 1/3 1/3)) 1/3) 1)
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (50 enodes)
* * [misc]simplify:  iters left: 2 (53 enodes)
* [exit]simplify:  Simplified to (+ 1/3 (+ (+ 1/3 1) (+ 1/3 1)))
* [exit]simplify:  Simplified to (+ 1/3 (+ (+ 1/3 1) (+ 1/3 1)))
* * * * [misc]progress:  [ 64 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* (* (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) (* 3 (log x))) 1/3)))))>
* [enter]simplify:  Simplifying (* (* (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) (* 3 (log x)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (23 enodes)
* * [misc]simplify:  iters left: 4 (77 enodes)
* * [misc]simplify:  iters left: 3 (234 enodes)
* [exit]simplify:  Simplified to (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* [exit]simplify:  Simplified to (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* * * * [misc]progress:  [ 65 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) 1)))))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (39 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (117 enodes)
* * [misc]simplify:  iters left: 1 (134 enodes)
* [exit]simplify:  Simplified to (* 3 (log x))
* [exit]simplify:  Simplified to (* 3 (log x))
* * * * [misc]progress:  [ 66 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) 1)))))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (39 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (117 enodes)
* * [misc]simplify:  iters left: 1 (134 enodes)
* [exit]simplify:  Simplified to (* 3 (log x))
* [exit]simplify:  Simplified to (* 3 (log x))
* * * * [misc]progress:  [ 67 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) 1)))))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (39 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (117 enodes)
* * [misc]simplify:  iters left: 1 (134 enodes)
* [exit]simplify:  Simplified to (* 3 (log x))
* [exit]simplify:  Simplified to (* 3 (log x))
* * * * [misc]progress:  [ 68 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) 1)))))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (20 enodes)
* * [misc]simplify:  iters left: 4 (39 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (117 enodes)
* * [misc]simplify:  iters left: 1 (134 enodes)
* [exit]simplify:  Simplified to (* 3 (log x))
* [exit]simplify:  Simplified to (* 3 (log x))
* * * * [misc]progress:  [ 69 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (cbrt (* 3 (log x))) (+ (+ (+ 1 (+ 1/3 1/3)) 1/3) 1))))))>
* [enter]simplify:  Simplifying (+ (+ (+ 1 (+ 1/3 1/3)) 1/3) 1)
* * [misc]simplify:  iters left: 6 (6 enodes)
* * [misc]simplify:  iters left: 5 (17 enodes)
* * [misc]simplify:  iters left: 4 (36 enodes)
* * [misc]simplify:  iters left: 3 (50 enodes)
* * [misc]simplify:  iters left: 2 (53 enodes)
* [exit]simplify:  Simplified to (+ 1/3 (+ (+ 1/3 1) (+ 1/3 1)))
* [exit]simplify:  Simplified to (+ 1/3 (+ (+ 1/3 1) (+ 1/3 1)))
* * * * [misc]progress:  [ 70 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (pow (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) 1)))))>
* * * * [misc]progress:  [ 71 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (exp (+ (+ (+ (log (cbrt (* 3 (log x)))) (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x))))))) (log (cbrt (cbrt (* 3 (log x)))))) (log (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (+ (+ (+ (log (cbrt (* 3 (log x)))) (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x))))))) (log (cbrt (cbrt (* 3 (log x)))))) (log (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (44 enodes)
* * [misc]simplify:  iters left: 3 (61 enodes)
* * [misc]simplify:  iters left: 2 (64 enodes)
* [exit]simplify:  Simplified to (+ (+ (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x)))))) (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x)))))))
* [exit]simplify:  Simplified to (+ (+ (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x)))))) (+ (log (cbrt (cbrt (* 3 (log x))))) (log (cbrt (cbrt (* 3 (log x)))))))
* * * * [misc]progress:  [ 72 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (exp (+ (+ (+ (log (cbrt (* 3 (log x)))) (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (log (cbrt (cbrt (* 3 (log x)))))) (log (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (+ (+ (+ (log (cbrt (* 3 (log x)))) (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (log (cbrt (cbrt (* 3 (log x)))))) (log (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (42 enodes)
* * [misc]simplify:  iters left: 3 (59 enodes)
* * [misc]simplify:  iters left: 2 (72 enodes)
* [exit]simplify:  Simplified to (+ (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (+ (log (cbrt (cbrt (* 3 (log x))))) (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x)))))))
* [exit]simplify:  Simplified to (+ (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (+ (log (cbrt (cbrt (* 3 (log x))))) (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x)))))))
* * * * [misc]progress:  [ 73 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (exp (+ (+ (log (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (log (cbrt (cbrt (* 3 (log x)))))) (log (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (+ (+ (log (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (log (cbrt (cbrt (* 3 (log x)))))) (log (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (13 enodes)
* * [misc]simplify:  iters left: 5 (23 enodes)
* * [misc]simplify:  iters left: 4 (38 enodes)
* * [misc]simplify:  iters left: 3 (55 enodes)
* * [misc]simplify:  iters left: 2 (61 enodes)
* * [misc]simplify:  iters left: 1 (65 enodes)
* [exit]simplify:  Simplified to (+ (+ (log (cbrt (cbrt (* 3 (log x))))) (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x)))))) (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* [exit]simplify:  Simplified to (+ (+ (log (cbrt (cbrt (* 3 (log x))))) (+ (log (cbrt (* 3 (log x)))) (log (cbrt (* 3 (log x)))))) (log (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))
* * * * [misc]progress:  [ 74 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (exp (+ (log (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x)))))) (log (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (+ (log (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x)))))) (log (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (23 enodes)
* * [misc]simplify:  iters left: 4 (42 enodes)
* * [misc]simplify:  iters left: 3 (63 enodes)
* * [misc]simplify:  iters left: 2 (138 enodes)
* * [misc]simplify:  iters left: 1 (169 enodes)
* [exit]simplify:  Simplified to (* 3 (log (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* 3 (log (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 75 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (exp (log (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (log (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (24 enodes)
* * [misc]simplify:  iters left: 4 (50 enodes)
* * [misc]simplify:  iters left: 3 (93 enodes)
* * [misc]simplify:  iters left: 2 (218 enodes)
* * [misc]simplify:  iters left: 1 (341 enodes)
* [exit]simplify:  Simplified to (log (* 3 (log x)))
* [exit]simplify:  Simplified to (log (* 3 (log x)))
* * * * [misc]progress:  [ 76 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (log (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (23 enodes)
* * [misc]simplify:  iters left: 4 (48 enodes)
* * [misc]simplify:  iters left: 3 (66 enodes)
* * [misc]simplify:  iters left: 2 (134 enodes)
* * [misc]simplify:  iters left: 1 (168 enodes)
* [exit]simplify:  Simplified to (exp (* 3 (log x)))
* [exit]simplify:  Simplified to (exp (* 3 (log x)))
* * * * [misc]progress:  [ 77 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (cbrt (* (* (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (* (* 3 (log x)) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) (* 3 (log x)))
* * [misc]simplify:  iters left: 6 (9 enodes)
* * [misc]simplify:  iters left: 5 (23 enodes)
* * [misc]simplify:  iters left: 4 (77 enodes)
* * [misc]simplify:  iters left: 3 (234 enodes)
* [exit]simplify:  Simplified to (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* [exit]simplify:  Simplified to (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* * * * [misc]progress:  [ 78 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (cbrt (* (* (* (* 3 (log x)) (* (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (* 3 (log x)))) (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (* (* 3 (log x)) (* (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (* 3 (log x)))) (* 3 (log x)))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (33 enodes)
* * [misc]simplify:  iters left: 4 (123 enodes)
* [exit]simplify:  Simplified to (* (* (* (* 3 (log x)) (* 3 (log x))) (cbrt (* 3 (log x)))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (* (* (* 3 (log x)) (* 3 (log x))) (cbrt (* 3 (log x)))) (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 79 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (cbrt (* (* (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (* 3 (log x)))) (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))) (cbrt (* 3 (log x)))) (* 3 (log x)))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (30 enodes)
* * [misc]simplify:  iters left: 4 (102 enodes)
* * [misc]simplify:  iters left: 3 (384 enodes)
* [exit]simplify:  Simplified to (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* [exit]simplify:  Simplified to (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* * * * [misc]progress:  [ 80 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (cbrt (* (* (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x)))))) (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x)))))) (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x)))))) (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x)))))) (* 3 (log x)))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (31 enodes)
* * [misc]simplify:  iters left: 4 (107 enodes)
* * [misc]simplify:  iters left: 3 (475 enodes)
* [exit]simplify:  Simplified to (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* [exit]simplify:  Simplified to (* (* (* 3 (log x)) (* 3 (log x))) (* 3 (log x)))
* * * * [misc]progress:  [ 81 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))) (cbrt (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))) (cbrt (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (cbrt (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))) (cbrt (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (41 enodes)
* * [misc]simplify:  iters left: 3 (53 enodes)
* * [misc]simplify:  iters left: 2 (118 enodes)
* * [misc]simplify:  iters left: 1 (153 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [enter]simplify:  Simplifying (cbrt (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (40 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (117 enodes)
* * [misc]simplify:  iters left: 1 (142 enodes)
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* [exit]simplify:  Simplified to (cbrt (* 3 (log x)))
* * * * [misc]progress:  [ 82 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (cbrt (* (* (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))) (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (* (* (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))) (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))) (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (12 enodes)
* * [misc]simplify:  iters left: 5 (29 enodes)
* * [misc]simplify:  iters left: 4 (77 enodes)
* * [misc]simplify:  iters left: 3 (301 enodes)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* [exit]simplify:  Simplified to (pow (* 3 (log x)) 3)
* * * * [misc]progress:  [ 83 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (sqrt (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))) (sqrt (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))))>
* [enter]simplify:  Simplifying (sqrt (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (40 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (117 enodes)
* * [misc]simplify:  iters left: 1 (142 enodes)
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [enter]simplify:  Simplifying (sqrt (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (40 enodes)
* * [misc]simplify:  iters left: 3 (52 enodes)
* * [misc]simplify:  iters left: 2 (117 enodes)
* * [misc]simplify:  iters left: 1 (142 enodes)
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* [exit]simplify:  Simplified to (sqrt (* 3 (log x)))
* * * * [misc]progress:  [ 84 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* 1 (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))))>
* * * * [misc]progress:  [ 85 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt 3)) (cbrt (log x)))))))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt 3))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (46 enodes)
* * [misc]simplify:  iters left: 3 (86 enodes)
* * [misc]simplify:  iters left: 2 (180 enodes)
* * [misc]simplify:  iters left: 1 (251 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt 3))
* [exit]simplify:  Simplified to (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (cbrt 3))
* * * * [misc]progress:  [ 86 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x)))))))))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (10 enodes)
* * [misc]simplify:  iters left: 5 (22 enodes)
* * [misc]simplify:  iters left: 4 (42 enodes)
* * [misc]simplify:  iters left: 3 (59 enodes)
* * [misc]simplify:  iters left: 2 (63 enodes)
* * [misc]simplify:  iters left: 1 (69 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 87 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (sqrt (cbrt (* 3 (log x))))) (sqrt (cbrt (* 3 (log x)))))))))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (sqrt (cbrt (* 3 (log x)))))
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (21 enodes)
* * [misc]simplify:  iters left: 4 (46 enodes)
* * [misc]simplify:  iters left: 3 (86 enodes)
* * [misc]simplify:  iters left: 2 (180 enodes)
* * [misc]simplify:  iters left: 1 (251 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (sqrt (cbrt (* 3 (log x)))))
* [exit]simplify:  Simplified to (* (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))) (sqrt (cbrt (* 3 (log x)))))
* * * * [misc]progress:  [ 88 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) 1) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) 1)
* * [misc]simplify:  iters left: 6 (11 enodes)
* * [misc]simplify:  iters left: 5 (23 enodes)
* * [misc]simplify:  iters left: 4 (48 enodes)
* * [misc]simplify:  iters left: 3 (102 enodes)
* * [misc]simplify:  iters left: 2 (140 enodes)
* * [misc]simplify:  iters left: 1 (148 enodes)
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 89 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x)))))))))>
* [enter]simplify:  Simplifying (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * [misc]simplify:  iters left: 6 (7 enodes)
* * [misc]simplify:  iters left: 5 (9 enodes)
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (cbrt (cbrt (* 3 (log x)))) (cbrt (* 3 (log x))))
* * * * [misc]progress:  [ 90 / 102 ] simplifiying candidate #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (cbrt (* 3 (log x))) (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))))))))>
* * * * [misc]progress:  [ 91 / 102 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x))))) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x))))) (* 12.0 x))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (27 enodes)
* * [misc]simplify:  iters left: 4 (40 enodes)
* * [misc]simplify:  iters left: 3 (43 enodes)
* * [misc]simplify:  iters left: 2 (53 enodes)
* * [misc]simplify:  iters left: 1 (61 enodes)
* [exit]simplify:  Simplified to (- (* 8.0 (pow x (* (cbrt 3) (pow 729 1/9)))) (* 12.0 x))
* * * * [misc]progress:  [ 92 / 102 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (exp (* (log (/ 1 x)) (* (pow 729 1/9) (pow -3 1/3))))) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (exp (* (log (/ 1 x)) (* (pow 729 1/9) (pow -3 1/3))))) (* 12.0 x))
* * [misc]simplify:  iters left: 6 (18 enodes)
* * [misc]simplify:  iters left: 5 (36 enodes)
* * [misc]simplify:  iters left: 4 (60 enodes)
* * [misc]simplify:  iters left: 3 (112 enodes)
* * [misc]simplify:  iters left: 2 (280 enodes)
* [exit]simplify:  Simplified to (- (/ 8.0 (pow x (* (cbrt -3) (pow 729 1/9)))) (* 12.0 x))
* * * * [misc]progress:  [ 93 / 102 ] simplifiying candidate #<alt-event (Î» (x) (- (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (- (log -1) (log (/ -1 x))))))) (* 12.0 x)))>
* [enter]simplify:  Simplifying (- (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (- (log -1) (log (/ -1 x))))))) (* 12.0 x))
* * [misc]simplify:  iters left: 6 (20 enodes)
* * [misc]simplify:  iters left: 5 (35 enodes)
* * [misc]simplify:  iters left: 4 (65 enodes)
* * [misc]simplify:  iters left: 3 (129 enodes)
* * [misc]simplify:  iters left: 2 (218 enodes)
* * [misc]simplify:  iters left: 1 (485 enodes)
* [exit]simplify:  Simplified to (- (* (pow x (* (cbrt 3) (pow 729 1/9))) 8.0) (* 12.0 x))
* * * * [misc]progress:  [ 94 / 102 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (* 9 (pow (log x) 2)) 1/9)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (* 9 (pow (log x) 2)) 1/9)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (21 enodes)
* * [misc]simplify:  iters left: 5 (36 enodes)
* * [misc]simplify:  iters left: 4 (64 enodes)
* * [misc]simplify:  iters left: 3 (80 enodes)
* * [misc]simplify:  iters left: 2 (83 enodes)
* [exit]simplify:  Simplified to (+ (* (exp (* (* (cbrt (cbrt (* (log x) 3))) (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3)))) (pow (* (log x) (* 9 (log x))) 1/9))) 8.0) (* -12.0 x))
* * * * [misc]progress:  [ 95 / 102 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (* 9 (pow (log (/ 1 x)) 2)) 1/9)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (* 9 (pow (log (/ 1 x)) 2)) 1/9)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (24 enodes)
* * [misc]simplify:  iters left: 5 (44 enodes)
* * [misc]simplify:  iters left: 4 (78 enodes)
* * [misc]simplify:  iters left: 3 (130 enodes)
* * [misc]simplify:  iters left: 2 (362 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (* (exp (* (* (cbrt (* (log x) 3)) (pow (* (* (log x) (log x)) 9) 1/9)) (* (cbrt (cbrt (* (log x) 3))) (cbrt (* (log x) 3))))) 8.0))
* * * * [misc]progress:  [ 96 / 102 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (* 9 (pow (- (log -1) (log (/ -1 x))) 2)) 1/9)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (pow (* 9 (pow (- (log -1) (log (/ -1 x))) 2)) 1/9)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (26 enodes)
* * [misc]simplify:  iters left: 5 (44 enodes)
* * [misc]simplify:  iters left: 4 (83 enodes)
* * [misc]simplify:  iters left: 3 (173 enodes)
* * [misc]simplify:  iters left: 2 (317 enodes)
* [exit]simplify:  Simplified to (+ (* 8.0 (exp (* (pow (* (* (log x) 9) (log x)) 1/9) (* (cbrt (cbrt (* (log x) 3))) (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3))))))) (* -12.0 x))
* * * * [misc]progress:  [ 97 / 102 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (pow 3 1/3) (pow (* 9 (pow (log x) 5)) 1/9)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (* (* (pow 3 1/3) (pow (* 9 (pow (log x) 5)) 1/9)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (23 enodes)
* * [misc]simplify:  iters left: 5 (38 enodes)
* * [misc]simplify:  iters left: 4 (64 enodes)
* * [misc]simplify:  iters left: 3 (97 enodes)
* * [misc]simplify:  iters left: 2 (111 enodes)
* [exit]simplify:  Simplified to (+ (* -12.0 x) (* (exp (* (* (cbrt (cbrt (* (log x) 3))) (cbrt 3)) (* (pow (* (pow (log x) 5) 9) 1/9) (cbrt (* (log x) 3))))) 8.0))
* * * * [misc]progress:  [ 98 / 102 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (pow (* (pow (log (/ 1 x)) 5) 9) 1/9) (pow -3 1/3)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (* (* (pow (* (pow (log (/ 1 x)) 5) 9) 1/9) (pow -3 1/3)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (27 enodes)
* * [misc]simplify:  iters left: 5 (47 enodes)
* * [misc]simplify:  iters left: 4 (74 enodes)
* * [misc]simplify:  iters left: 3 (106 enodes)
* * [misc]simplify:  iters left: 2 (131 enodes)
* * [misc]simplify:  iters left: 1 (191 enodes)
* [exit]simplify:  Simplified to (+ (* (exp (* (pow (* (pow (- (log x)) 5) 9) 1/9) (* (cbrt (cbrt (* (log x) 3))) (* (cbrt -3) (cbrt (* (log x) 3)))))) 8.0) (* -12.0 x))
* * * * [misc]progress:  [ 99 / 102 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (pow 3 1/3) (pow (* 9 (pow (- (log -1) (log (/ -1 x))) 5)) 1/9)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (* (* (pow 3 1/3) (pow (* 9 (pow (- (log -1) (log (/ -1 x))) 5)) 1/9)) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x)))))))
* * [misc]simplify:  iters left: 6 (28 enodes)
* * [misc]simplify:  iters left: 5 (46 enodes)
* * [misc]simplify:  iters left: 4 (77 enodes)
* * [misc]simplify:  iters left: 3 (109 enodes)
* * [misc]simplify:  iters left: 2 (122 enodes)
* * [misc]simplify:  iters left: 1 (172 enodes)
* [exit]simplify:  Simplified to (+ (* 8.0 (exp (* (* (cbrt (* 3 (log x))) (cbrt (cbrt (* 3 (log x))))) (* (pow (* 9 (pow (log x) 5)) 1/9) (cbrt 3))))) (* -12.0 x))
* * * * [misc]progress:  [ 100 / 102 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x)))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (log x))))))
* * [misc]simplify:  iters left: 6 (16 enodes)
* * [misc]simplify:  iters left: 5 (26 enodes)
* * [misc]simplify:  iters left: 4 (32 enodes)
* * [misc]simplify:  iters left: 3 (34 enodes)
* * [misc]simplify:  iters left: 2 (44 enodes)
* * [misc]simplify:  iters left: 1 (52 enodes)
* [exit]simplify:  Simplified to (+ (* 8.0 (pow x (* (cbrt 3) (pow 729 1/9)))) (* -12.0 x))
* * * * [misc]progress:  [ 101 / 102 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (log (/ 1 x)) (* (pow 729 1/9) (pow -3 1/3)))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (log (/ 1 x)) (* (pow 729 1/9) (pow -3 1/3))))))
* * [misc]simplify:  iters left: 6 (18 enodes)
* * [misc]simplify:  iters left: 5 (35 enodes)
* * [misc]simplify:  iters left: 4 (52 enodes)
* * [misc]simplify:  iters left: 3 (104 enodes)
* * [misc]simplify:  iters left: 2 (269 enodes)
* [exit]simplify:  Simplified to (+ (/ 8.0 (pow x (* (pow 729 1/9) (cbrt -3)))) (* -12.0 x))
* * * * [misc]progress:  [ 102 / 102 ] simplifiying candidate #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (- (log -1) (log (/ -1 x)))))))))>
* [enter]simplify:  Simplifying (+ (* -12.0 x) (* 8.0 (exp (* (pow 3 1/3) (* (pow 729 1/9) (- (log -1) (log (/ -1 x))))))))
* * [misc]simplify:  iters left: 6 (20 enodes)
* * [misc]simplify:  iters left: 5 (34 enodes)
* * [misc]simplify:  iters left: 4 (57 enodes)
* * [misc]simplify:  iters left: 3 (121 enodes)
* * [misc]simplify:  iters left: 2 (210 enodes)
* * [misc]simplify:  iters left: 1 (476 enodes)
* [exit]simplify:  Simplified to (+ (* 8.0 (pow x (* (cbrt 3) (pow 729 1/9)))) (* -12.0 x))
* * * [misc]progress:  adding candidates to table
* [misc]progress:  [Phase 3 of 3] Extracting.
* * [misc]regime-changes:  Finding splitpoints for: (#<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (log (exp (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))> #<alt-delta (Î» (x) (/ (- (* (* -12.0 x) (* -12.0 x)) (* (* 8.0 (* (* x x) x)) (* 8.0 (* (* x x) x)))) (- (* -12.0 x) (* 8.0 (* (* x x) x)))))> #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (* (sqrt (pow x 3)) (sqrt (pow x 3))))))> #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (log (exp (pow x 3))))))> #<alt-delta (Î» (x) (/ (+ (pow (* -12.0 x) 3) (pow (* 8.0 (* (* x x) x)) 3)) (+ (* (- (* (* x x) (* x 8.0)) (* -12.0 x)) (* (* x x) (* x 8.0))) (* (* -12.0 x) (* -12.0 x)))))> #<alt-delta (Î» (x) (/ (- (* (* -12.0 x) (* -12.0 x)) (* (* (* 8.0 x) (* x x)) (* (* 8.0 x) (* x x)))) (- (* -12.0 x) (* (exp (* (log x) 3)) 8.0))))> #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))> #<alt-delta (Î» (x) (/ (+ (pow (* 8.0 (exp (pow (cbrt (* 3 (log x))) 3))) 3) (pow (* -12.0 x) 3)) (- (* (exp (* (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3))) (+ (cbrt (* (log x) 3)) (cbrt (* (log x) 3))))) (* 8.0 8.0)) (- (* (* x (* -12.0 8.0)) (exp (* (cbrt (* (log x) 3)) (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3)))))) (* (* -12.0 x) (* -12.0 x))))))> #<alt-delta (Î» (x) (/ (- (* (* -12.0 x) (* -12.0 x)) (* (exp (* (* (cbrt (* (log x) 3)) (cbrt (* (log x) 3))) (+ (cbrt (* (log x) 3)) (cbrt (* (log x) 3))))) (* 8.0 8.0))) (- (* -12.0 x) (* 8.0 (exp (* (log x) 3))))))> #<alt-delta (Î» (x) (/ (+ (pow (* -12.0 x) 3) (pow (* 8.0 (exp (* 3 (log x)))) 3)) (+ (* (* -12.0 x) (- (* -12.0 x) (* (* x x) (* x 8.0)))) (* (* (* x x) (* x 8.0)) (* (* x x) (* x 8.0))))))> #<alt-delta (Î» (x) (* (* (cbrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x)))))) (cbrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))) (cbrt (+ (* -12.0 x) (* 8.0 (exp (* 3 (log x))))))))> #<alt-delta (Î» (x) (+ (* -12.0 x) (/ 8.0 (pow x -3))))> #<alt-event (Î» (x) (+ (* -12.0 x) (* 8.0 (pow (/ 1 x) -3))))> #<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x))))) (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))) (cbrt (* (cbrt (* 3 (log x))) (cbrt (* 3 (log x)))))) (cbrt (* 3 (log x))))))))>)
* [misc]regimes:  Found splitpoints: (#s(sp 0 (+ (* -12.0 x) (* 8.0 (* (* x x) x))) +nan.0)) , with alts (#<alt-delta (Î» (x) (+ (* -12.0 x) (* 8.0 (exp (* (* (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x)))))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))))))>)
* [enter]simplify:  Simplifying (* (cbrt (* 3 (log x))) (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))))
* * [misc]simplify:  iters left: 6 (8 enodes)
* * [misc]simplify:  iters left: 5 (10 enodes)
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))
* [exit]simplify:  Simplified to (* (* (cbrt (cbrt (* 3 (log x)))) (cbrt (cbrt (* 3 (log x))))) (cbrt (* 3 (log x))))
* * * * [misc]points:  Sampling 8000 additional inputs, on iter 0 have 0 / 8000
* * * * [misc]points:  Computing exacts on every 500 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 250 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 125 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 62 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 31 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 15 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 7 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Computing exacts on every 3 of 8000 points to ramp up precision
* * * * [misc]points:  Setting MPFR precision to 64
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Setting MPFR precision to 576
* * * * [misc]points:  Computing exacts for 8000 points
* * * * [misc]points:  Setting MPFR precision to 320
* * * * [misc]points:  Setting MPFR precision to 576
* * * * [misc]points:  Filtering points with unrepresentable outputs
* * * * [exit]points:  Sampled 8000 points with exact outputs
